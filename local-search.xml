<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringCloud</title>
    <link href="/2022/02/01/springCloud/"/>
    <url>/2022/02/01/springCloud/</url>
    
    <content type="html"><![CDATA[<p>SpringCloud基础组件</p><span id="more"></span><h1 id="一、SpringCloud简介"><a href="#一、SpringCloud简介" class="headerlink" title="一、SpringCloud简介"></a>一、SpringCloud简介</h1><ul><li>SpringCloud 和 微服务之间的关系</li><li>SpringCloud 整体架构</li><li>SpringCloud组件库(产地来自三个地方) Netflix Alibaba</li><li>SpringCloud 更新很频繁，选择</li><li>电商系统微服务化的构想</li><li>开发环境和依赖组件的版本</li></ul><h2 id="1-1、微服务拆分"><a href="#1-1、微服务拆分" class="headerlink" title="1.1、微服务拆分"></a>1.1、微服务拆分</h2><ol><li><p>拆分依赖项 每个pom都只引入自己使用到的依赖</p></li><li><p>微服务模块拆分粒度始终</p></li><li><p>公共组件拆离</p></li><li><p>平台中间件剥离(注册中心，配置中心)</p></li></ol><h1 id="二、SpringCloudNetflix"><a href="#二、SpringCloudNetflix" class="headerlink" title="二、SpringCloudNetflix"></a>二、SpringCloudNetflix</h1><h2 id="2-1、服务治理-Eureka"><a href="#2-1、服务治理-Eureka" class="headerlink" title="2.1、服务治理(Eureka)"></a>2.1、服务治理(Eureka)</h2><ul><li><p>概念 技术选型</p></li><li><p>服务治理全链路</p><p>  服务注册，服务发现，心跳和续约，服务下线，剔除和自保</p></li><li><p>源码解读 - 服务注册，心跳检测和服务续约</p></li><li><p>注册中心高可用改造</p></li><li><p>实现</p></li></ul><h3 id="1-服务治理-技术选型"><a href="#1-服务治理-技术选型" class="headerlink" title="1.服务治理 - 技术选型"></a>1.服务治理 - 技术选型</h3><p>分布式系统CAP定理</p><blockquote><p>一致性：各个分布式节点数据一致</p><ul><li>强一致性：某次更新之后，所有的请求都可以访问到更新的值</li><li>弱一致性：某次更新之后，有的请求或者所有请求都拿不到更新的值</li><li>最终一致性：未来的某一时刻，所有请求都可以拿到更新的值</li></ul></blockquote><p>C - 强一致性</p><p>A - 可用性</p><p>P - 分区容错性</p><blockquote><p>CAP定理：分布式系统只能三选二 且 分区容错性必须要满足，因为分布式系统不可能只有一个服务器</p></blockquote><blockquote><p>三大服务治理</p><ul><li>Eureka 老牌劲旅(Netflix)</li><li>Consul 同门师弟(官方)</li><li>Nacos 后起之秀(Alibaba)</li></ul></blockquote><h3 id="2-Eureka2-0开源计划搁置"><a href="#2-Eureka2-0开源计划搁置" class="headerlink" title="2.Eureka2.0开源计划搁置"></a>2.Eureka2.0开源计划搁置</h3><h3 id="3-搭建注册中心demo"><a href="#3-搭建注册中心demo" class="headerlink" title="3.搭建注册中心demo"></a>3.搭建注册中心demo</h3><ul><li>创建Demo顶层pom 和 子项目 eureka-server</li><li>添加Eureka依赖</li><li>设置启动类</li><li>Start</li></ul><h3 id="4-解读注册中心UI界面"><a href="#4-解读注册中心UI界面" class="headerlink" title="4.解读注册中心UI界面"></a>4.解读注册中心UI界面</h3><h3 id="5-服务注册"><a href="#5-服务注册" class="headerlink" title="5.服务注册"></a>5.服务注册</h3><h3 id="6-服务注册源码解读"><a href="#6-服务注册源码解读" class="headerlink" title="6.服务注册源码解读"></a>6.服务注册源码解读</h3><blockquote><ul><li>重要的注解</li><li>代理模式，装饰器模式</li><li>服务注册都注册什么内容</li></ul></blockquote><h3 id="7-创建服务消费者"><a href="#7-创建服务消费者" class="headerlink" title="7.创建服务消费者"></a>7.创建服务消费者</h3><h3 id="8-服务心跳和续约源码"><a href="#8-服务心跳和续约源码" class="headerlink" title="8.服务心跳和续约源码"></a>8.服务心跳和续约源码</h3><h3 id="9-启用心跳和健康度检查"><a href="#9-启用心跳和健康度检查" class="headerlink" title="9.启用心跳和健康度检查"></a>9.启用心跳和健康度检查</h3><h3 id="10-注册中心高可用"><a href="#10-注册中心高可用" class="headerlink" title="10.注册中心高可用"></a>10.注册中心高可用</h3><h2 id="2-2、负载均衡-Ribbon"><a href="#2-2、负载均衡-Ribbon" class="headerlink" title="2.2、负载均衡(Ribbon)"></a>2.2、负载均衡(Ribbon)</h2><h3 id="1-负载均衡介绍"><a href="#1-负载均衡介绍" class="headerlink" title="1.负载均衡介绍"></a>1.负载均衡介绍</h3><blockquote><ul><li>概念 体系架构 技术选型</li><li>深入Ribbon<ul><li>负载均衡策略和原理，加载方式，IPing机制</li><li>源码阅读 LoadBalanced 底层机制 &amp; 可扩展性</li><li>架构探讨 - 如何选择负载均衡策略</li><li>Demo  +  造轮子</li></ul></li></ul></blockquote><blockquote><p>理解负载均衡</p><ul><li>雨露均沾</li><li>不能让某台机器负载过高</li><li>如果请求太大，所有机器要都承担较高负载</li></ul></blockquote><h3 id="2-客户端负载均衡-amp-服务端负载均衡"><a href="#2-客户端负载均衡-amp-服务端负载均衡" class="headerlink" title="2.客户端负载均衡&amp;服务端负载均衡"></a>2.客户端负载均衡&amp;服务端负载均衡</h3><ul><li>客户端负载均衡</li></ul><blockquote><p>客户端从Eureka 中获取服务的机器列表，根据一定的负载均衡策略，选择访问某个服务</p></blockquote><ul><li>服务端负载均衡</li></ul><blockquote><p>客户端 借助 nginx(软件) 或者 F5(软件) 实现负载均衡，客户端</p></blockquote><blockquote><p>大型应用通常是 客户端 + 服务端 负载均衡搭配使用</p></blockquote><blockquote><p>两种负载均衡策略对比</p></blockquote><p><img src="/img/springCloud.assets/image-20220130171732376.png" alt="image-20220130171732376"></p><h3 id="3-添加负载均衡功能"><a href="#3-添加负载均衡功能" class="headerlink" title="3.添加负载均衡功能"></a>3.添加负载均衡功能</h3><ul><li>创建ribbon-consumer</li><li>添加依赖，调用eureka-client</li><li>启动多个eureka-client</li><li>将负载均衡策略应用到全局或指定服务</li></ul><blockquote><p>Ribbon懒加载机制，Ribbon在第一次方法调用的时候才去初始化LoadBalancer，这样看来，第一个方法不仅包含HTTP连接和方法的响应时间，还包括了LoadBalancer的创建耗时，假如方法本身比较耗时的话，而且超时时间又设置地比较短，那么很大可能这第一次http调用就会失败</p><ul><li>通过配置关闭懒加载</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">ribbon.eager-load.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">ribbon.eager-load.clients</span>=<span class="hljs-string">ribbon-consumer</span><br></code></pre></td></tr></table></figure><ul><li>第一个参数开启了Ribbon的饥饿加载模式</li><li>第二个参数指定了需要应用饥饿加载的服务名称</li></ul></blockquote><h3 id="4-负载均衡配置"><a href="#4-负载均衡配置" class="headerlink" title="4.负载均衡配置"></a>4.负载均衡配置</h3><ul><li>全局负载均衡配置</li><li>指定服务负载均衡配置</li></ul><blockquote><ol><li>application.properties 配置文件配置 </li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">eureka-client.ribbon.NFLoadBalancerRuleClassName</span>=<span class="hljs-string">com.netflix.loadbalancer.RandomRule</span><br></code></pre></td></tr></table></figure><ol start="2"><li>指定加载Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.springcloud;<br><br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.RandomRule;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/1/31/14:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> spring-cloud-netflix-demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: RibbonConfiguration</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RibbonConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">defaultLBStrategy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>通过注解 实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RibbonClient(name = &quot;eureka-client&quot;, configuration = com.netflix.loadbalancer.RandomRule.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RibbonConfiguration</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ul><li>注解配置的负载均衡策略优先于配置文件配置的负载均衡 ，可能和资源文件加载顺序有关</li></ul><h3 id="5-负载均衡策略解析-源码解析"><a href="#5-负载均衡策略解析-源码解析" class="headerlink" title="5.负载均衡策略解析(源码解析)"></a>5.负载均衡策略解析(源码解析)</h3><ul><li>熟悉7种负载均衡策略</li><li>自旋锁使用方式</li><li>防御性编程</li></ul><h3 id="6-LoadBalanced-注解"><a href="#6-LoadBalanced-注解" class="headerlink" title="6.LoadBalanced 注解"></a>6.LoadBalanced 注解</h3><ul><li>LoadBalanced 作用原理</li><li>拦截器到IRule的调用链路</li><li>IPing机制 </li></ul><h3 id="7-IPing机制解析"><a href="#7-IPing机制解析" class="headerlink" title="7.IPing机制解析"></a>7.IPing机制解析</h3><h3 id="8-IRule机制可扩展研究"><a href="#8-IRule机制可扩展研究" class="headerlink" title="8.IRule机制可扩展研究"></a>8.IRule机制可扩展研究</h3><h3 id="9-造轮子-自定义IRule"><a href="#9-造轮子-自定义IRule" class="headerlink" title="9.造轮子 - 自定义IRule"></a>9.造轮子 - 自定义IRule</h3><ul><li>自定义基于一致性哈希负载均衡策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.springcloud.rule;<br><br><span class="hljs-keyword">import</span> com.netflix.client.config.IClientConfig;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.AbstractLoadBalancerRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.Server;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.SortedMap;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/2/13:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> spring-cloud-netflix-demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: MyRule</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractLoadBalancerRule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IRule</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initWithNiwsConfig</span><span class="hljs-params">(IClientConfig clientConfig)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        HttpServletRequest request = ((ServletRequestAttributes)<br>                RequestContextHolder.getRequestAttributes())<br>                .getRequest();<br>        String uri = request.getServletPath() + <span class="hljs-string">&quot;?&quot;</span> + request.getQueryString();<br><br><br>        <span class="hljs-keyword">return</span> route(uri.hashCode(), getLoadBalancer().getAllServers());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">route</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hashId, List&lt;Server&gt; addressList)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(addressList)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        TreeMap&lt;Long, Server&gt; address = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>        addressList.stream().forEach(e -&gt; &#123;<br>            <span class="hljs-comment">// 虚化若干个服务节点，到环上</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>                <span class="hljs-keyword">long</span> hash = hash(e.getId() + i);<br>                address.put(hash, e);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">long</span> hash = hash(String.valueOf(hashId));<br>        SortedMap&lt;Long, Server&gt; last = address.tailMap(hash);<br>        <span class="hljs-comment">// 当request URL hash值大于任意一个服务器对应的hashKey</span><br>        <span class="hljs-comment">// 取address中的第一个节点</span><br><br>        <span class="hljs-keyword">if</span> (last.isEmpty()) &#123;<br>            address.firstEntry().getValue();<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> last.get(last.firstKey());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">hash</span><span class="hljs-params">(String key)</span> </span>&#123;<br><br>        MessageDigest md5;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            md5 = MessageDigest.getInstance(<span class="hljs-string">&quot;md5&quot;</span>);<br>        &#125;  <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br><br>        <span class="hljs-keyword">byte</span>[] keyByte = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            keyByte = key.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>        md5.update(keyByte);<br>        <span class="hljs-keyword">byte</span>[] digest = md5.digest();<br>        <span class="hljs-keyword">long</span> hashCode = ((<span class="hljs-keyword">long</span>)(digest[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xFF</span> &lt;&lt; <span class="hljs-number">16</span>))<br>                | ((<span class="hljs-keyword">long</span>)(digest[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xFF</span> &lt;&lt; <span class="hljs-number">8</span>))<br>                | ((<span class="hljs-keyword">long</span>)(digest[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xFF</span>));<br><br>        <span class="hljs-keyword">return</span> hashCode &amp; <span class="hljs-number">0xffffffffL</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、服务通信-amp-调用-Feign"><a href="#2-3、服务通信-amp-调用-Feign" class="headerlink" title="2.3、服务通信&amp;调用(Feign)"></a>2.3、服务通信&amp;调用(Feign)</h2><ul><li>服务间调用介绍(什么是Feign ， 它做了什么)</li><li>深入Feign (体系结构，底层机制，动态代理，重试)</li><li>Feign的项目结构</li><li>源码阅读 EnableFeignClient 注解的底层机制 Feign协议解析过程</li></ul><h3 id="1-现有的服务调用方式"><a href="#1-现有的服务调用方式" class="headerlink" title="1.现有的服务调用方式"></a>1.现有的服务调用方式</h3><ul><li>Eureka <a href="http://ip:port/path">http://ip:port/path</a> 借助 RestTemplate实现</li><li>Ribbon <a href="http://servicename/path">http://serviceName/path</a> 借助 Ribbon 实现负载均衡，借助服务名来实现</li></ul><h3 id="2-Feign基础"><a href="#2-Feign基础" class="headerlink" title="2.Feign基础"></a>2.Feign基础</h3><blockquote><p>Feign解决了什么问题</p></blockquote><ul><li>简化远程调用</li><li>集成Ribbon</li><li>集成Hystrix</li></ul><blockquote><p>Feign调用方式</p></blockquote><ul><li>@FignClient(“service-name”)</li></ul><h3 id="3-Feign应用到服务消费者中"><a href="#3-Feign应用到服务消费者中" class="headerlink" title="3.Feign应用到服务消费者中"></a>3.Feign应用到服务消费者中</h3><h3 id="4-Feign注解背后的源码"><a href="#4-Feign注解背后的源码" class="headerlink" title="4.Feign注解背后的源码"></a>4.Feign注解背后的源码</h3><ul><li>EnableFeignClients 注解背后的加载流程</li><li>Spring 中 Bean 加载模式的扩展点</li><li>Feign 构造上下文对象(FeignContext) 的过程</li></ul><h3 id="5-改造项目结构"><a href="#5-改造项目结构" class="headerlink" title="5.改造项目结构"></a>5.改造项目结构</h3><ul><li>构建公共接口层(注意不要引入依赖)</li><li>改造服务提供者</li><li>创建基于公共接口层的服务消费者</li></ul><h3 id="6-配置Ribbon-重试-和-超时策略"><a href="#6-配置Ribbon-重试-和-超时策略" class="headerlink" title="6.配置Ribbon 重试 和 超时策略"></a>6.配置Ribbon 重试 和 超时策略</h3><p>配置文件配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign-client:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-comment"># 每台机器最大重试次数</span><br>    <span class="hljs-attr">MaxAutoRetries:</span> <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 可以再重试几台机器</span><br>    <span class="hljs-attr">MaxAutoRetriesNextServer:</span> <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 连接超时</span><br>    <span class="hljs-attr">ConnectionTimeout:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-comment"># 业务处理超时时间</span><br>    <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">2000</span><br>    <span class="hljs-comment"># 在所有 HTTP Method 进行重试</span><br>    <span class="hljs-attr">OkToRetryOnAllOpertions:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="7-Contract协议解析过程"><a href="#7-Contract协议解析过程" class="headerlink" title="7.Contract协议解析过程"></a>7.Contract协议解析过程</h3><ul><li>一家三口：Contract，BaseContract，SpringMvcContract</li></ul><blockquote><p>不能存在泛型，只能继承一个接口，继承的接口不能再继承其它接口</p></blockquote><ul><li>子类BaseContract 校验规则是什么</li><li>孙类SpringMvcContract 类如何抽取元数据</li></ul><h3 id="8-Feign-项目实战"><a href="#8-Feign-项目实战" class="headerlink" title="8.Feign 项目实战"></a>8.Feign 项目实战</h3><h2 id="2-4、降级熔断-Hystrix"><a href="#2-4、降级熔断-Hystrix" class="headerlink" title="2.4、降级熔断(Hystrix)"></a>2.4、降级熔断(Hystrix)</h2><ul><li>服务容错介绍</li><li>Hystrix服务降级<ul><li>核心功能，服务降级原理，常用降级方案</li><li>Demo Fallback，RequestCache 多级降级</li></ul></li><li>Hystrix服务熔断<ul><li>熔断器工作原理</li><li>集成Hystrix熔断器</li></ul></li><li>源码阅读<ul><li>Hystrix触发方式，熔断器的参数的作用</li></ul></li><li>架构思考<ul><li>降级和熔断的规划</li><li>主链路规划</li><li>业务与容灾策略</li></ul></li><li>线程隔离方案<ul><li>线程池</li><li>信号量</li></ul></li><li>Demo <ul><li>Turbine + Hystrix 大盘 - 聚合监控信息</li></ul></li></ul><h3 id="1-服务容错解决方案"><a href="#1-服务容错解决方案" class="headerlink" title="1.服务容错解决方案"></a>1.服务容错解决方案</h3><ul><li>服务雪崩</li></ul><blockquote><p>生产故障三步</p><ul><li>延迟</li><li>服务不可用</li><li>造成资损</li></ul></blockquote><blockquote><p>降低故障影响</p><ul><li>降低串联影响</li><li>隔离异常服务</li><li>减压(快速失败 熔断)</li><li>备选方案(降级  最小可用性)</li></ul></blockquote><h3 id="2-Feign-Hystrix-实现Fallback降级"><a href="#2-Feign-Hystrix-实现Fallback降级" class="headerlink" title="2.Feign + Hystrix 实现Fallback降级"></a>2.Feign + Hystrix 实现Fallback降级</h3><ul><li>创建 hystrix-consumer项目 引入依赖</li><li>实现 Fallback 降级逻辑</li><li>Fallback 降级还有什么花式玩法</li></ul><h3 id="3-Hystrix-实现Timeout降级"><a href="#3-Hystrix-实现Timeout降级" class="headerlink" title="3.Hystrix 实现Timeout降级"></a>3.Hystrix 实现Timeout降级</h3><ul><li>配置文件配置 hystrix 超时降级</li></ul><h3 id="4-Hystrix-实现RequestCache减压"><a href="#4-Hystrix-实现RequestCache减压" class="headerlink" title="4.Hystrix 实现RequestCache减压"></a>4.Hystrix 实现RequestCache减压</h3><ul><li><p>Request Cache 只是一种减压手段</p></li><li><p>使用 @CacheResult 缓存值</p></li></ul><h3 id="5-多级降级方案"><a href="#5-多级降级方案" class="headerlink" title="5.多级降级方案"></a>5.多级降级方案</h3><ul><li>模拟二级降级场景</li><li>一直错误的情况</li></ul><p>某个方法超时时间可以通过注解来配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/timeout2&quot;)</span><br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;timeoutFallBack&quot;,commandProperties = &#123;</span><br><span class="hljs-meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">timeOut2</span><span class="hljs-params">(Integer timeOut)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> service.retry(timeOut);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是要注意  service.retry(timeOut);  此方法的超时时间如果短于 timeOut2 中通过注解配置的超时时间，以更短的超时时间为主</p><h3 id="6-Hystrix降级触发方案-阅读源码"><a href="#6-Hystrix降级触发方案-阅读源码" class="headerlink" title="6.Hystrix降级触发方案(阅读源码)"></a>6.Hystrix降级触发方案(阅读源码)</h3><ul><li>Aspect 切面编程</li><li>RxJava 中的 Observer 模式</li><li>RxFunction 回调函数实现异常判定</li></ul><h3 id="7-Hystrix-熔断"><a href="#7-Hystrix-熔断" class="headerlink" title="7.Hystrix 熔断"></a>7.Hystrix 熔断</h3><ul><li>熔断器参数配置</li><li>验证断路器开关状态切换</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Hystrix 熔断器配置</span><br><span class="hljs-comment"># 重要的配置</span><br><span class="hljs-comment"># 熔断的前提条件,(请求的数量),在一定的时间窗口内,请求达到5个以后,才开始进行熔断判断</span><br><span class="hljs-meta">hystrix.command.default.circuitBreaker.requestVolumeThreshold</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"># 错误请求占总请求的百分比,超过 50% 错误请求,熔断开启</span><br><span class="hljs-meta">hystrix.command.default.circuitBreaker.errorThresholdPercentage</span>=<span class="hljs-string">50</span><br><span class="hljs-comment"># 当熔断开启以后,经过 多少时间,再进入半开状态</span><br><span class="hljs-meta">hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</span>=<span class="hljs-string">15000</span><br><span class="hljs-comment"># 配置时间窗口</span><br><span class="hljs-meta">hystrix.command.default.metrics.rollingStats.timeInMilliseconds</span>=<span class="hljs-string">20000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 不重要的配置</span><br><span class="hljs-meta">hystrix.command.default.circuitBreaker.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 强制开启熔断开关</span><br><span class="hljs-meta">hystrix.command.default.circuitBreaker.forceOpen</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 强制关闭熔断开关</span><br><span class="hljs-meta">hystrix.command.default.circuitBreaker.forceClosed</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure><h3 id="8-Hystrix-熔断器参数作用-源码"><a href="#8-Hystrix-熔断器参数作用-源码" class="headerlink" title="8.Hystrix 熔断器参数作用(源码)"></a>8.Hystrix 熔断器参数作用(源码)</h3><ul><li><p>HystrixCircuitBreaker</p></li><li><p>断路判断逻辑</p></li><li><p>断路器开启/关闭 触发判断</p></li><li><p>Half - Open 下的同步控制</p></li></ul><h3 id="9-降级熔断规划-主链路"><a href="#9-降级熔断规划-主链路" class="headerlink" title="9.降级熔断规划 - 主链路"></a>9.降级熔断规划 - 主链路</h3><img src="/img/springCloud.assets/image-20220205150830444.png" alt="image-20220205150830444" style="zoom:80%;" /><h3 id="10-线程隔离-核心方案以及工作原理"><a href="#10-线程隔离-核心方案以及工作原理" class="headerlink" title="10.线程隔离 - 核心方案以及工作原理"></a>10.线程隔离 - 核心方案以及工作原理</h3><ul><li><p>每个服务设定一定的线程数量, 该服务只能使用这些线程</p></li><li><p>线程隔离两种实现方式</p><ul><li>线程池</li><li>信号量隔离</li></ul></li></ul><p>两种实现方式对比</p><p>实现原理：</p><ul><li>线程池技术：它使用Hystrix自己内建的线程池去执行方法调用，而不是使用Tomcat的线程池</li><li>信号量技术：它直接使用tomcat的容器线程去执行方法，不会创建新的线程，信号量只充当开关和计数器的作用。获取到信号量就执行，没有获取到就　fallback</li></ul><p>性能对比</p><p>-　线程池技术：涉及到线程的相关操作，还有线程之间的切换，性能不如信号量机制<br>-　信号量机制：直接使用Tｏｍｃａｔ容器线程去访问方法，信号量只是一个计数器的作用</p><p>超时判定</p><ul><li>线程池技术：相当于多了一层保护机制，可以对 “执行阶段” 超时进行判断</li><li>信号量技术：只能等待网络请求超时 “被动超时” 的情况</li></ul><p>选择：官方文档指出，信号量机制仅适用超高并发的非外部接口调用上，其它场景应该使用线程池技术</p><blockquote><p>tips：线程池技术要注意ThreadLocal 的数据传递的作用，由于前后调用不在同一个线程内，也不在父子线程内，如果业务层面声明了ThreaLocal 变量 ，将无法获取正确的值</p></blockquote><h3 id="11-Turbine-聚合-Hystrix-信息"><a href="#11-Turbine-聚合-Hystrix-信息" class="headerlink" title="11.Turbine 聚合 Hystrix 信息"></a>11.Turbine 聚合 Hystrix 信息</h3><ul><li>创建 hystrix-turbine 子模块，引入依赖</li><li>添加Turbine 配置， 指定监控服务名称</li><li>hystrix-fallback 项目开放 actuator 服务</li></ul><h3 id="12-Turbine-集成-大盘监控"><a href="#12-Turbine-集成-大盘监控" class="headerlink" title="12.Turbine 集成 大盘监控"></a>12.Turbine 集成 大盘监控</h3><ul><li>创建 hystrix-dashboard 项目,引入依赖</li><li>启动大盘监控</li><li>解读监控页面内容，断路器进一步了解</li></ul><h3 id="13-集成-Hystrix-和-Turbine"><a href="#13-集成-Hystrix-和-Turbine" class="headerlink" title="13.集成 Hystrix 和 Turbine"></a>13.集成 Hystrix 和 Turbine</h3><ul><li>配置基础组件 Turbine</li><li>配置 Dashboard  +  开放微服务端点</li><li>基于 HystrixCommand 注解配置降级和线程池</li></ul><p>基于注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HystrixCommand(</span><br><span class="hljs-meta">        commandKey = &quot;loginFail&quot; ,// 全局唯一的标识服务, 默认函数名称</span><br><span class="hljs-meta">        groupKey = &quot;password&quot;  , // 全局服务分组, 用于组织仪表盘,统计信息 默认 类名称</span><br><span class="hljs-meta">        fallbackMethod = &quot;loginFailFallBack&quot; ,// 同一个类里面 public / private 都可以</span><br><span class="hljs-meta">        // ignoreExceptions = &#123;IllegalAccessException.class&#125;   // 在列表中的exception 不会降级</span><br><span class="hljs-meta">        // 线程有关属性</span><br><span class="hljs-meta">        // 线程组,多个服务可以共用一个线程组</span><br><span class="hljs-meta">        threadPoolKey = &quot;threadPoolA&quot;,</span><br><span class="hljs-meta">        threadPoolProperties = &#123;</span><br><span class="hljs-meta">                // 核心线程数</span><br><span class="hljs-meta">                @HystrixProperty(name = &quot;coreSize&quot;, value = &quot;8&quot;),</span><br><span class="hljs-meta">                // size &gt; 0 LinkedBlockingQueue 实现 请求等待队列</span><br><span class="hljs-meta">                // SynchronousQueue 不存储元素 阻塞队列(建议读源码, 学CAS 操作)</span><br><span class="hljs-meta">                @HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;20&quot;),</span><br><span class="hljs-meta">                // maxQueueSize = -1 时无效 队列没有达到 maxQueueSize 依然拒绝请求</span><br><span class="hljs-meta">                @HystrixProperty(name = &quot;queueSizeRejectionThreshold&quot;, value = &quot;15&quot;),</span><br><span class="hljs-meta">                // 统计窗口持续时间 (线程池)</span><br><span class="hljs-meta">                @HystrixProperty(name = &quot;metrics.rollingStats.timeInMilliseconds&quot;, value = &quot;1024&quot;),</span><br><span class="hljs-meta">                // 统计窗口内 筒子数量 (线程池)</span><br><span class="hljs-meta">                @HystrixProperty(name = &quot;metrics.rollingStats.numBuckets&quot;, value = &quot;18&quot;)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">        &#125;</span><br><span class="hljs-meta">        // ,</span><br><span class="hljs-meta">        // commandProperties = &#123;</span><br><span class="hljs-meta">        //         // 熔断降级相关属性也可以配置在这里</span><br><span class="hljs-meta">        // &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><p>基于 配置文件 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-comment"># 默认全局配置</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span><br>      <span class="hljs-comment"># 优先级高于上面配置</span><br>      <span class="hljs-attr">foodie-user-service:</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span><br><br><br><span class="hljs-comment"># 开启所有 actuator-endpoint</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br>        <span class="hljs-comment"># health info xxx</span><br><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-comment"># 有的属性是默认值,写不写都行</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">fallback:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">circuitBreaker:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 超过 50% 错误开启熔断</span><br>        <span class="hljs-attr">errorThresholdPercentage:</span> <span class="hljs-number">50</span><br>        <span class="hljs-comment"># 5个request 之后才进行统计</span><br>        <span class="hljs-attr">requestVolumeThreshold:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 10 秒后进行半开启状态</span><br>        <span class="hljs-attr">sleepWindowInMilliseconds:</span> <span class="hljs-number">10000</span><br>        <span class="hljs-comment"># forceClosed , forceOpen 强制关闭/开启 熔断开关</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 可以指定线程池方式还是 信号量方式</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">thread:</span><br>            <span class="hljs-attr">interruptTimeout:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">interruptOnFutureCancel:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">10000</span><br>      <span class="hljs-attr">metrics:</span><br>        <span class="hljs-attr">rollingStats:</span><br>          <span class="hljs-comment"># 时间窗口统计</span><br>          <span class="hljs-attr">timeInMilliseconds:</span> <span class="hljs-number">20000</span><br></code></pre></td></tr></table></figure><blockquote><p>Ambiguous mapping 错误</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 对于需要调用端指定降级业务的场景来说,由于<span class="hljs-doctag">@RequestMapping</span>  和 xxxMapping 注解可以从原始接口上继承，因此</span><br><span class="hljs-comment"> * 不能配置完全一样的两个路径，否则启动报错</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 在实际应用中，ItemCommentsService 上面定义了 <span class="hljs-doctag">@RequestMapping</span> 同时 ItemCommentsFeignClient 继承自 ItemCommentsService</span><br><span class="hljs-comment"> * 因此在Spring 上下文中加载了两个访问路径一样的方法，会报错 Ambiguous mapping</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 解决问题的思路，避免Spring 上下文中同时加载两个访问路径相同的方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1) 在启动类扫包的时候，不要把原始的Feign接口扫描进来 也就是 ItemCommentsService</span><br><span class="hljs-comment"> * 具体做法:  可以使用 <span class="hljs-doctag">@EnableFeignClients</span> 注解的clients 属性, 只加载需要的Feign接口</span><br><span class="hljs-comment"> * 优点： 访问提供者和调用者不需要额外的配置</span><br><span class="hljs-comment"> * 缺点： 需要将每个使用的类都写一遍</span><br><span class="hljs-comment"> * 2) 原始Feign接口不定义<span class="hljs-doctag">@RequestMapping</span> 注解</span><br><span class="hljs-comment"> * 优点：启动的时候直接扫包即可，不用加载接口</span><br><span class="hljs-comment"> * 缺点：a.服务提供者需要额外的配置访问的注解</span><br><span class="hljs-comment"> *       b.任何情况下，即使不需要在调用端定义fallback类，服务调用者都需要声明一个</span><br><span class="hljs-comment"> * 3) 原始Feign接口不要定义 <span class="hljs-doctag">@FeignClients</span> 注解 这样就不会被加载到上下文中</span><br><span class="hljs-comment"> * 优点：启动的时候直接扫包即可,不用指定加载接口,服务提供者不用额外配置</span><br><span class="hljs-comment"> * 缺点: 任何情况下，服务调用者都需要一个额外的 <span class="hljs-doctag">@FeignClient</span> 接口</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li> 第一种方案是最简便的</li></ul><h2 id="2-5、分布式配置中心-Config"><a href="#2-5、分布式配置中心-Config" class="headerlink" title="2.5、分布式配置中心(Config)"></a>2.5、分布式配置中心(Config)</h2><ul><li>配置中心介绍，在微服务中的应用</li><li>Config核心功能和应用</li><li>直连式架构模型<ul><li>Github 准备 存储属性</li><li>搭建 config-server 应用</li><li>将应用方直连配置中心</li></ul></li><li>资源文件加载方式(源码阅读)</li><li>参数动态刷新机制 + Demo</li><li>高可用性分析<ul><li>单中心宕机，高可用改造方向</li><li>借助Eureka 实现高可用配置中心架构</li></ul></li><li>架构思考<ul><li>总线式架构展望</li><li>分布式配置中心的用途</li></ul></li><li>用对称密钥对配置项加密 解密</li></ul><h3 id="1-配置中心的作用"><a href="#1-配置中心的作用" class="headerlink" title="1.配置中心的作用"></a>1.配置中心的作用</h3><ul><li>配置项定义 (程序 hardcode)</li><li>配置文件 application.yml bootstrap.yml 保存尽量不变的属性</li><li>环境变量 (操作系统层面)</li><li>数据库存储 配置信息</li></ul><blockquote><p>传统配置管理的缺点</p><ul><li>格式不统一，json，properties，yml</li><li>没有版本控制</li><li>基于静态配置 </li><li>分布零散 - 没有统一管理</li></ul></blockquote><blockquote><p>配置项的静态内容</p><ul><li>环境配置 <ul><li>数据库连接串</li><li>Eureka 注册中心</li><li>Kafka 连接</li><li>应用名称</li></ul></li><li>安全配置(进行加密)<ul><li>连接密码</li><li>公钥私钥</li><li>Http 连接 Cert</li></ul></li></ul><p>动态内容</p><ul><li>功能控制<ul><li>功能开关</li><li>人工熔断开关</li><li>蓝绿发布</li><li>数据源切换</li></ul></li><li>业务规则<ul><li>当日外汇利率</li><li>动态文案</li><li>规则引擎参数</li></ul></li><li>应用参数<ul><li>网关 黑白名单</li><li>缓存过期时间</li><li>日志MDC设置</li></ul></li></ul></blockquote><blockquote><p>配置管理的需求</p><ul><li>配置项定义<ul><li>高可用</li><li>版本管理 (修改记录，版本控制，权限控制)</li><li>业务需求（内容加密，动态推送变更)</li><li>配置分离(中心化管理)</li></ul></li></ul></blockquote><h3 id="2-创建Github配置仓库"><a href="#2-创建Github配置仓库" class="headerlink" title="2.创建Github配置仓库"></a>2.创建Github配置仓库</h3><ul><li>创建github仓库</li><li>文件命名规则(文件名不能随便起)</li><li>添加配置文件和属性</li></ul><blockquote><p>文件命名规则</p><ul><li>Application &amp; profile (application-dev.yml)</li><li>Label - 代码分支名称</li></ul></blockquote><h3 id="3-搭建配置中心"><a href="#3-搭建配置中心" class="headerlink" title="3.搭建配置中心"></a>3.搭建配置中心</h3><ul><li>创建  config-server 项目引入依赖</li><li>添加参数和启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.WebApplicationType;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;<br><span class="hljs-keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/8/14:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> spring-cloud-netflix-demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: ConfigServerApplication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableConfigServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigServerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br><br><br><br>        <span class="hljs-keyword">new</span> SpringApplicationBuilder(ConfigServerApplication.class)<br>                .web(WebApplicationType.SERVLET)<br>                .run(args);<br>    <span class="hljs-comment">//      访问git 仓库的配置文件</span><br>    <span class="hljs-comment">//    http://localhost:60000/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.json (.yml .properties )</span><br>    <span class="hljs-comment">//    http://localhost:60000/&#123;application&#125;/&#123;profile&#125;/&#123;label&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>对应的配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-server</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br><span class="hljs-comment">#          uri: git@github.com:th66778899/config-repo.git</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://github.com/th66778899/config-repo.git</span><br>          <span class="hljs-comment"># 强制拉取资源文件</span><br>          <span class="hljs-attr">force-pull:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 多个项目共用一个repo 使用文件夹来进行区分</span><br><span class="hljs-comment">#          search-paths: aaa, ccc, ddd</span><br><span class="hljs-comment">#          username:</span><br><span class="hljs-comment">#          password:</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">60000</span><br></code></pre></td></tr></table></figure><h3 id="4-搭建Client-直连式配置中心"><a href="#4-搭建Client-直连式配置中心" class="headerlink" title="4.搭建Client 直连式配置中心"></a>4.搭建Client 直连式配置中心</h3><ul><li>创建 config-client 项目引入依赖</li><li>配置启动项和启动类</li><li>注入Github 属性到测试用例</li></ul><h3 id="5-阅读源码-资源文件加载"><a href="#5-阅读源码-资源文件加载" class="headerlink" title="5.阅读源码(资源文件加载)"></a>5.阅读源码(资源文件加载)</h3><ul><li>Config server 加载资源文件</li></ul><h3 id="6-动态拉取参数"><a href="#6-动态拉取参数" class="headerlink" title="6.动态拉取参数"></a>6.动态拉取参数</h3><ul><li>引入特殊依赖</li><li>改造 config-client 可以拉取动态参数</li><li>借助 actuator 可以让config-client 访问 config-server ,获取最新的配置信息，</li></ul><p>访问 <a href="http://localhost:61000/actuator/refresh">http://localhost:61000/actuator/refresh</a> 会显示更新的配置信息</p><ul><li>只有发生了变化的配置才会显示出来</li></ul><h3 id="7-配置中心高可用"><a href="#7-配置中心高可用" class="headerlink" title="7.配置中心高可用"></a>7.配置中心高可用</h3><ul><li>config-server 向eureka注册中心报道</li><li>config-client 从注册中心获取config-server 地址</li></ul><h3 id="8-使用对称性密钥进行加解密"><a href="#8-使用对称性密钥进行加解密" class="headerlink" title="8.使用对称性密钥进行加解密"></a>8.使用对称性密钥进行加解密</h3><ul><li>JDK 中替换 JCE (jdk版本 高于8u161 不需要替换，已经集成了最新的)</li><li>改造 config-server 并生成加密字符串</li><li>修改Github 文件，启动服务拉取配置</li></ul><blockquote><p>密钥在哪，加解密就在哪进行</p></blockquote><h3 id="9-分布式配置中心的通用场景"><a href="#9-分布式配置中心的通用场景" class="headerlink" title="9.分布式配置中心的通用场景"></a>9.分布式配置中心的通用场景</h3><ul><li>环境隔离<ul><li>日常环境</li><li>预发环境</li><li>生产环境</li></ul></li><li>业务开关 + 定向推送<ul><li>灰度发布，蓝绿发布，金丝雀发布</li></ul></li><li>修改业务逻辑 <ul><li>网关黑名单 -&gt; 网关层</li><li>费率 - 规则引擎 （下单接口）</li><li>熔断阈值   (下单接口)</li></ul></li></ul><h3 id="10-集成配置中心"><a href="#10-集成配置中心" class="headerlink" title="10.集成配置中心"></a>10.集成配置中心</h3><ul><li>搭建配置中心</li><li>创建Github 配置文件</li><li>用户中心集成Config</li></ul><h2 id="2-6、消息总线-BUS"><a href="#2-6、消息总线-BUS" class="headerlink" title="2.6、消息总线(BUS)"></a>2.6、消息总线(BUS)</h2><p>BUS</p><ul><li>消息总线 (BUS) 介绍</li><li>BUS 体系结构和接入方式 (借助RabbitMQ实现)</li><li>将配置中心改造为总线式架构</li><li>源码阅读 - bus -refresh 底层机制</li><li>Git Webhook 自动推送</li><li>架构思考 - 消息总线如何用于其它业务场景</li></ul><h3 id="1-BUS-简介"><a href="#1-BUS-简介" class="headerlink" title="1.BUS 简介"></a>1.BUS 简介</h3><ul><li>BUS的标签<ul><li>轻量级 (依赖于 stream 组件)</li><li>消息广播 (基于 发布 - 订阅)</li><li>无缝集成 Config</li><li>自定义消息</li></ul></li><li>BUS 的两个场景<ul><li>配置变更通知(仅仅是通知配置的变更)</li><li>自定义消息广播</li></ul></li></ul><h3 id="2-搭建总线式架构配置中心"><a href="#2-搭建总线式架构配置中心" class="headerlink" title="2.搭建总线式架构配置中心"></a>2.搭建总线式架构配置中心</h3><ul><li>创建 config-bus-server 和 config-bus-consumer</li><li>启动RabbitMQ 修改demo 配置属性</li><li>使用 actuator 服务推送Bus 变更</li></ul><h3 id="3-源码阅读-bus-refresh底层机制"><a href="#3-源码阅读-bus-refresh底层机制" class="headerlink" title="3.源码阅读 - bus-refresh底层机制"></a>3.源码阅读 - bus-refresh底层机制</h3><ul><li>内置的事件结构，RefreshRemoteApplicationEvent</li><li>刷新事件的发送端 - RefreshBusEndpoint</li></ul><h3 id="4-WebHook-自动推送"><a href="#4-WebHook-自动推送" class="headerlink" title="4.WebHook 自动推送"></a>4.WebHook 自动推送</h3><p>配置Github 的 WebHook</p><ul><li>设置 encrypt.key</li><li>将上一步中的key添加到github仓库设置中</li><li>配置Webhook url</li></ul><h3 id="5-BUS其它业务场景"><a href="#5-BUS其它业务场景" class="headerlink" title="5.BUS其它业务场景"></a>5.BUS其它业务场景</h3><ul><li>自定义自己的事件</li><li>清空缓存：通知所有服务监听者清空某项业务的本地缓存业务，我们也可以在自定义的消息体中加业务属性，事件监听逻辑可以根据这些属性来定点清除某个特点业务对象的缓存</li><li>数据同步：子系统依赖实时的数据库记录变动触发响应的业务逻辑，我们这里可以将数据的binlog抓取出来，通过广播功能同步到所有监听器，起到数据同步的作用</li></ul><h3 id="6-BUS总结"><a href="#6-BUS总结" class="headerlink" title="6.BUS总结"></a>6.BUS总结</h3><img src="/img/springCloud.assets/image-20220210152803883.png" alt="image-20220210152803883" style="zoom:80%;" /><h2 id="2-7、服务网关-Gateway"><a href="#2-7、服务网关-Gateway" class="headerlink" title="2.7、服务网关(Gateway)"></a>2.7、服务网关(Gateway)</h2><ul><li>服务网关在微服务中的应用</li><li>第二代网关组件Gateway 介绍 (第一代网关 Zuul)</li><li>Gateway 体系架构</li><li>Gateway 急速落地(路由规则)</li><li>Gateway断言功能详解<ul><li>Demo 利用断言实现URL映射</li><li>利用After 断言构建简易秒杀场景</li></ul></li><li>Gateway 过滤器原理和生命周期<ul><li>demo 自定义过滤器</li></ul></li><li>源码阅读Gateway 过滤器机制解析</li><li>权限认证 -  分布式session 的替代方案<ul><li>基于 jwt 的网关层鉴权服务</li></ul></li><li>如何借助网关层对服务端各类异常做统一处理</li><li>网关的另一个技能 - 限流</li><li>还有哪些网关技术，如何选型</li></ul><h3 id="1-第二代网关Gateway简介"><a href="#1-第二代网关Gateway简介" class="headerlink" title="1.第二代网关Gateway简介"></a>1.第二代网关Gateway简介</h3><ul><li>SpringCloud 官方主推</li><li>底层基于Netty</li></ul><blockquote><p>Gateway的业务场景</p></blockquote><ul><li>路由寻址 (根据url导向到后端的服务)</li><li>负载均衡 (ribbon)</li><li>限流</li><li>鉴权</li></ul><p>Gateway 自动装配工厂类 GatewayAutoConfiguration</p><h3 id="2-创建默认路由规则-demo"><a href="#2-创建默认路由规则-demo" class="headerlink" title="2.创建默认路由规则(demo)"></a>2.创建默认路由规则(demo)</h3><ul><li>创建gateway-sample 项目，引入依赖</li><li>连接eureka自动创建路由</li><li>通过 Actuator 实现动态路由功能</li></ul><h3 id="3-Path断言"><a href="#3-Path断言" class="headerlink" title="3.Path断言"></a>3.Path断言</h3><ul><li>使用Path断言转发请求(yml配置 java配置)</li><li>配合使用Method断言</li></ul><h3 id="4-After断言实现简易秒杀"><a href="#4-After断言实现简易秒杀" class="headerlink" title="4.After断言实现简易秒杀"></a>4.After断言实现简易秒杀</h3><ul><li>创建模拟下单接口</li><li>通过After断言设置生效时间</li></ul><h3 id="5-自定义过滤器"><a href="#5-自定义过滤器" class="headerlink" title="5.自定义过滤器"></a>5.自定义过滤器</h3><ul><li>创建 TimerFilter 实现计时功能</li><li>添加TimerFiler 到路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.springcloud;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StopWatch;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/11/14:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> spring-cloud-netflix-demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: TimerFilter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">// 实现 GlobalFilter 的filter 是全局filter</span><br><span class="hljs-comment">// 实现 GatewayFilter 的 fileter 需要进行配置,不是全局filter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimerFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GatewayFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br><br>        StopWatch timer = <span class="hljs-keyword">new</span> StopWatch();<br>        timer.start(exchange.getRequest().getURI().getRawPath());<br>        <span class="hljs-comment">// Zuul Filter before / after</span><br><br>        <span class="hljs-comment">// exchange.getAttributes().put(&quot;requestTimeBegin&quot;, System.currentTimeMillis());</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange).then(<br>                Mono.fromRunnable(() -&gt; &#123;<br>                    timer.stop();<br>                    log.info(timer.prettyPrint());<br>                &#125;)<br><br>        );<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-源码阅读-Gateway过滤机制解析"><a href="#6-源码阅读-Gateway过滤机制解析" class="headerlink" title="6.源码阅读 - Gateway过滤机制解析"></a>6.源码阅读 - Gateway过滤机制解析</h3><ul><li>接收请求获取路由表 - RoutePredicateHandlerMapping</li><li>执行过滤器 - FilteringWebHandler</li><li>Filter执行顺序排序 - AnnotationAwareOrderComparator</li></ul><h3 id="7-实现JWT鉴权"><a href="#7-实现JWT鉴权" class="headerlink" title="7.实现JWT鉴权"></a>7.实现JWT鉴权</h3><ul><li>创建 auth-service (登录，鉴权等服务)</li><li>添加JwtService 类 实现token创建和验证</li><li>网关层集成 auth-service (添加AuthFilter 到网关层)</li></ul><h3 id="8-其它网关技术-amp-选型"><a href="#8-其它网关技术-amp-选型" class="headerlink" title="8.其它网关技术&amp;选型"></a>8.其它网关技术&amp;选型</h3><ul><li>Nginx &amp; lua 开源免费，软负载，性价比高</li><li>F5 负载均衡，流量控制，高可用 99.999%，全链路监控，BIG-IP压缩流量，编程路由，拓扑路由，攻击防护，网络安全，统计和报告</li></ul><blockquote><p>选型</p><ul><li>F5 贵</li><li>万金油  - nginx</li><li>springcloud 项目 - gateway</li></ul></blockquote><h3 id="9-结合项目"><a href="#9-结合项目" class="headerlink" title="9.结合项目"></a>9.结合项目</h3><ul><li>添加gateway组件</li><li>配置路由规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/11/22:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodie-cloud</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: RoutesConfiguration</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoutesConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title">routes</span><span class="hljs-params">(RouteLocatorBuilder builder)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> builder.routes()<br>                .route(r -&gt; r.path(<span class="hljs-string">&quot;/address/**&quot;</span>, <span class="hljs-string">&quot;/passport/**&quot;</span>, <span class="hljs-string">&quot;/userInfo/**&quot;</span>, <span class="hljs-string">&quot;/center/**&quot;</span>)<br>                        .uri(<span class="hljs-string">&quot;lb://FOODIE-USER-SERVICE&quot;</span>))<br>                .route(r -&gt; r.path(<span class="hljs-string">&quot;/items/**&quot;</span>)<br>                        .uri(<span class="hljs-string">&quot;lb://FOODIE-ITEM-SERVICE&quot;</span>))<br>                .route(r -&gt; r.path(<span class="hljs-string">&quot;/shopcart/**&quot;</span>)<br>                        .uri(<span class="hljs-string">&quot;lb://FOODIE-CART-SERVICE&quot;</span>))<br>                .route(r -&gt; r.path(<span class="hljs-string">&quot;/orders/**&quot;</span>, <span class="hljs-string">&quot;/myOrders/**&quot;</span>, <span class="hljs-string">&quot;/mycommonts/**&quot;</span>)<br>                        .uri(<span class="hljs-string">&quot;lb://FOODIE-ORDER-SERVICE&quot;</span>))<br>                .build();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置网关层Redis限流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Primary;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/11/22:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodie-cloud</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: RedisLimiterConfiguration</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Redis限流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisLimiterConfiguration</span> </span>&#123;<br><br>    <span class="hljs-comment">// ID : KEY</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-comment">// 多个keyResolver 采用这个为主</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title">remoteAddressKeyResolver</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> exchange -&gt; Mono.just(<br>                exchange<br>                        .getRequest()<br>                        .getRemoteAddress()<br>                        .getAddress()<br>                        .getHostAddress()<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-meta">@Bean(&quot;redisLimiterUser&quot;)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisRateLimiter <span class="hljs-title">redisRateLimiterUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RedisRateLimiter(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean(&quot;redisLimiterItem&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisRateLimiter <span class="hljs-title">redisRateLimiterItem</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RedisRateLimiter(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li><p>创建网关鉴权服务</p></li><li><p>网关层跨域Filter</p></li><li><p>网关层登录校验</p></li></ul><h2 id="2-8、服务调用链追踪-Sleuth"><a href="#2-8、服务调用链追踪-Sleuth" class="headerlink" title="2.8、服务调用链追踪(Sleuth)"></a>2.8、服务调用链追踪(Sleuth)</h2><ul><li>服务调用链追踪是做什么的</li><li>Sleuth核心功能和体系结构<ul><li>调用链追踪模型 - Trace Span Annotation </li><li>demo</li></ul></li><li>阅读源码 链路追踪原理 </li><li>Zipkin 简介<ul><li>搭建Zipkin服务端</li><li>Sleuth集成Zipkin</li></ul></li><li>Sleuth集成ELK实现日志搜索</li><li>阿里系分布式追踪技术 - 鹰眼系统</li></ul><h3 id="1-链路追踪的作用"><a href="#1-链路追踪的作用" class="headerlink" title="1.链路追踪的作用"></a>1.链路追踪的作用</h3><ul><li>微服务之间调用关系复杂</li><li>得到整条链路的调用关系</li></ul><blockquote><p>链路追踪技术的基本功能</p></blockquote><ul><li>分布式环境下链路追踪</li><li>Timing信息</li><li>定位链路</li><li>信息收集和展示</li></ul><h3 id="2-整合Sleuth追踪调用链路"><a href="#2-整合Sleuth追踪调用链路" class="headerlink" title="2.整合Sleuth追踪调用链路"></a>2.整合Sleuth追踪调用链路</h3><ul><li>创建sleuth-traceA 和 sleuth-traceB ， 添加sleuth依赖</li><li>调用请求链路，查看log中的信息</li><li>采样率设置</li></ul><h3 id="3-源码阅读-Sleuth原理"><a href="#3-源码阅读-Sleuth原理" class="headerlink" title="3.源码阅读 Sleuth原理"></a>3.源码阅读 Sleuth原理</h3><ul><li>Sleuth项目结构和启动类</li><li>以Spring WebFlux调用链举例<ul><li> TraceWebFilter创建Span的过程</li><li>关联上下游Span的过程</li></ul></li></ul><h3 id="4-Zipkin"><a href="#4-Zipkin" class="headerlink" title="4.Zipkin"></a>4.Zipkin</h3><ul><li>搭建Zipkin服务端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.WebApplicationType;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;<br><span class="hljs-keyword">import</span> zipkin.server.internal.EnableZipkinServer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ZipKin服务端: 用于收集客户端Sleuth埋点收集到的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableZipkinServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ZipkinServerApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> SpringApplicationBuilder(ZipkinServerApplication.class)<br>                .web(WebApplicationType.SERVLET)<br>                .run(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Sleuth集成Zipkin实例<ul><li>sleuth-traceA和sleuth-traceB集成Zipkin</li><li>从Zipkin Dashboard 搜索调用链的时间维度数据</li></ul></li><li>Sleuth集成ELK实现日志检索<ul><li>ELK的作用 <ul><li>日志收集和过滤</li><li>日志信息持久化</li><li>汇总分析重要数据</li><li>根据关键字查找Log</li></ul></li><li>ELK工作流程<ul><li>Logstash Log信息的收集和过滤</li><li>ElasticSearch 存储log信息 提供搜索</li><li>Kibana  Log信息的查询,报表等</li></ul></li><li>Docker启动ELK<ul><li>通过docker安装elk镜像 (耐心) <code>docker pull sebp/elk</code></li><li>创建Docker容器，取名为elk，指定ELK三个组件的端口</li><li>修改logstash 接收日志的方式</li></ul></li><li>ELK集成Sleuth<ul><li>引入Logstash依赖到sleuth项目中</li><li>配置日志文件，输出Json格式日志到Logstash</li></ul></li></ul></li></ul><h3 id="5-项目集成Sleuth"><a href="#5-项目集成Sleuth" class="headerlink" title="5.项目集成Sleuth"></a>5.项目集成Sleuth</h3><ul><li>搭建Zipkin服务端</li><li>项目集成sleuth 和 zipkin</li><li>sleuth 集成 elk</li></ul><h2 id="2-9、消息驱动-Stream"><a href="#2-9、消息驱动-Stream" class="headerlink" title="2.9、消息驱动(Stream)"></a>2.9、消息驱动(Stream)</h2><ul><li>消息驱动在微服务中的应用</li><li>消息驱动三板斧(理论 - 实践 - 扩展)<ul><li>Stream 体系结构</li><li>Stream快速入门 集成MQ消费</li><li>商品发布销峰策略</li></ul></li><li>源码阅读  <ul><li>Stream Binder 的作用机制</li></ul></li><li>发布订阅相关<ul><li>分布订阅模型详解</li><li>Demo 基于发布订阅实现广播功能</li><li>利用发布订阅实现商品信息的刷新</li></ul></li><li>消费组和消费分区详解<ul><li>demo 基于消费组实现轮询单播功能</li></ul></li><li>经典业务场景<ul><li>延迟消息介绍 + 案例 demo Stream + MQ插件实现延迟消息</li></ul></li><li>Stream中的异常消息处理 (四种方式)</li><li>Stream 的重试机制<ul><li>demo Stream本地重试功能</li><li>Stream + MQ实现 enqueue操作</li></ul></li><li>架构思考<ul><li>异常情况导致消息无法被消费<ul><li>借助死信队列实现异常处理</li><li>定制自定义异常逻辑</li></ul></li><li>如何根据业务场景选择合适的异常处理策略</li></ul></li><li>项目集成消息组件</li></ul><h3 id="1-消息驱动在微服务中的应用"><a href="#1-消息驱动在微服务中的应用" class="headerlink" title="1.消息驱动在微服务中的应用"></a>1.消息驱动在微服务中的应用</h3><ul><li>发布消息 (消息中间件 Kafka RabbitMQ)</li></ul><img src="/img/springCloud.assets/image-20220213131027914.png" alt="image-20220213131027914" style="zoom:67%;" /><blockquote><p>消息驱动的应用场景</p></blockquote><ul><li>跨系统异步通信</li><li>应用解耦</li><li>流量削峰</li></ul><h3 id="2-Stream急速落地"><a href="#2-Stream急速落地" class="headerlink" title="2.Stream急速落地"></a>2.Stream急速落地</h3><ul><li>创建stream-sample项目，引入依赖</li><li>创建监听器(声明和绑定信道)</li><li>从RabbitMQ触发消息</li></ul><h3 id="3-削峰策略"><a href="#3-削峰策略" class="headerlink" title="3.削峰策略"></a>3.削峰策略</h3><blockquote><p>消息组件</p><ul><li>平滑输出(客户端自动拉取)</li><li>不怕Timeout 不受限于API超时</li><li>高吞吐量</li></ul></blockquote><h3 id="4-StreamBinder作用机制"><a href="#4-StreamBinder作用机制" class="headerlink" title="4.StreamBinder作用机制"></a>4.StreamBinder作用机制</h3><h3 id="5-Stream实现消息广播"><a href="#5-Stream实现消息广播" class="headerlink" title="5.Stream实现消息广播"></a>5.Stream实现消息广播</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">stream-sample</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">63000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Rabbitmq连接字符串</span><br><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.198.100</span><br><span class="hljs-meta">spring.rabbitmq.port</span>=<span class="hljs-string">5672</span><br><span class="hljs-meta">spring.rabbitmq.username</span>=<span class="hljs-string">tho</span><br><span class="hljs-meta">spring.rabbitmq.password</span>=<span class="hljs-string">123456</span><br><br><span class="hljs-meta">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-meta">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Stream自定义广播消息Topic: 绑定消费者、生产者信道到broadcastTopic</span><br><span class="hljs-comment">#spring.cloud.stream.bindings.broadcastTopic-consumer.destination=broadcast</span><br><span class="hljs-comment">#spring.cloud.stream.bindings.broadcastTopic-producer.destination=broadcast</span><br><span class="hljs-meta">spring.cloud.stream.bindings.broadcastTopic-consumer.destination</span>=<span class="hljs-string">broadcastTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.broadcastTopic-producer.destination</span>=<span class="hljs-string">broadcastTopic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试单播: 绑定消费者、生产者信道到groupTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.groupTopic-consumer.destination</span>=<span class="hljs-string">groupTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.groupTopic-producer.destination</span>=<span class="hljs-string">groupTopic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试单播: 配置消费者分组 =&gt; 实际上是一个组一个queue, 每个queue有多个Consumer</span><br><span class="hljs-meta">spring.cloud.stream.bindings.groupTopic-consumer.group</span>=<span class="hljs-string">GroupA</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试单播: 配置消息分区 =&gt; 经测试可知, 消息分区和消费组可以合起来使用, 消费组可用来实现单播(组内轮训消费), 消息分区可用来隔离消费组(只有满足条件即SpEL匹配的消费组才能消费消息)</span><br><span class="hljs-comment"># 打开消费者的消费分区功能</span><br><span class="hljs-meta">spring.cloud.stream.bindings.groupTopic-consumer.consumer.partitioned</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 指定当前消费者实例的总数</span><br><span class="hljs-meta">spring.cloud.stream.instance-count</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"># 指定当前消费者实例的索引号, 最大值为count-1, 用于测试消息分区</span><br><span class="hljs-meta">spring.cloud.stream.instance-index</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"># 指定生产者拥有两个消息分区</span><br><span class="hljs-meta">spring.cloud.stream.bindings.groupTopic-producer.producer.partition-count</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"># SpEL =&gt; Key Resolver解析, 表示只有节点为1的消费者才能消费消息, 即SpEL匹配才能消费</span><br><span class="hljs-meta">spring.cloud.stream.bindings.groupTopic-producer.producer.partition-key-expression</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试延迟消息: 绑定消费者、生产者信道到delayedTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.delayedTopic-consumer.destination</span>=<span class="hljs-string">delayedTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.delayedTopic-producer.destination</span>=<span class="hljs-string">delayedTopic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试延迟消息: 生产者允许生成延迟交换机与延迟队列(都只有一个)</span><br><span class="hljs-meta">spring.cloud.stream.rabbit.bindings.delayedTopic-producer.producer.delayed-exchange</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试测试异常重试(单机版), 即在Consumer本地重试, 而不会发回给Rabbitm: 绑定消费者、生产者信道到exceptionTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.exceptionTopic-consumer.destination</span>=<span class="hljs-string">exceptionTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.exceptionTopic-producer.destination</span>=<span class="hljs-string">exceptionTopic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试测试异常重试(单机版), 即在Consumer本地重试, 而不会发回给Rabbitm: 配置本机重试次数, 次数为1代表不重试</span><br><span class="hljs-meta">spring.cloud.stream.bindings.exceptionTopic-consumer.consumer.max-attempts</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试异常重试(联机版), 消费者会重新生成把消息投递回队列尾部: 绑定消费者、生产者信道到requeueTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.requeueTopic-consumer.destination</span>=<span class="hljs-string">requeueTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.requeueTopic-producer.destination</span>=<span class="hljs-string">requeueTopic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试异常重试(联机版), 消费者会重新生成把消息投递回队列尾部: 对指定Consumer配置重新入队</span><br><span class="hljs-comment">#spring.cloud.stream.rabbit.bindings.requeueTopic-consumer.consumer.requeueRejected=true</span><br><span class="hljs-comment"># 默认全局开启Direct重新入队(不过会被Consumer重试覆盖)</span><br><span class="hljs-comment">#spring.rabbitmq.listener.direct.default-requeue-rejected=true</span><br><span class="hljs-comment"># 所以配置Consumer只能重试1次</span><br><span class="hljs-meta">spring.cloud.stream.bindings.requeueTopic-consumer.consumer.max-attempts</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"># 测试不同分组的消费者消费Requeue消息 =&gt; 实际上Group、Topic的名称最好都用-作为连接, 而不是驼峰标识</span><br><span class="hljs-meta">spring.cloud.stream.bindings.requeueTopic-consumer.group</span>=<span class="hljs-string">requeue-group</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试死信队列Topic: 绑定消费者、生产者信道到dlqTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.dlqTopic-consumer.destination</span>=<span class="hljs-string">dlqTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.dlqTopic-producer.destination</span>=<span class="hljs-string">dlqTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.dlqTopic-consumer.consumer.max-attempts</span>=<span class="hljs-string">2</span><br><span class="hljs-meta">spring.cloud.stream.bindings.dlqTopic-consumer.group</span>=<span class="hljs-string">dlq-group</span><br><span class="hljs-comment"># 开启死信队列(默认名称为$&#123;dlqTopic&#125;.dlq, 复杂的需要自己指定DLK), 允许指定Consumer绑定DLQ</span><br><span class="hljs-comment"># =&gt; rabbitmq-plugins enable rabbitmq_shovel rabbitmq_shovel_management, 管理控制台开启重推消息其他队列功能</span><br><span class="hljs-meta">spring.cloud.stream.rabbit.bindings.dlqTopic-consumer.consumer.auto-bind-dlq</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 测试异常降级, 自定义异常逻辑 + 接口升版: 绑定消费者、生产者信道到dlqTopic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.fallbackTopic-consumer.destination</span>=<span class="hljs-string">fallback-Topic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.fallbackTopic-producer.destination</span>=<span class="hljs-string">fallback-Topic</span><br><span class="hljs-meta">spring.cloud.stream.bindings.fallbackTopic-consumer.consumer.max-attempts</span>=<span class="hljs-string">2</span><br><span class="hljs-meta">spring.cloud.stream.bindings.fallbackTopic-consumer.group</span>=<span class="hljs-string">fallback-group</span><br><span class="hljs-comment"># errors 是规定写死的</span><br><span class="hljs-comment"># inputChannel =&gt; fallback-Topic.fallback-group.errors</span><br></code></pre></td></tr></table></figure><ul><li>创建消息Producer服务，配置消息主题</li><li>启动多个Consumer节点测试消息广播</li><li>RabbitMQ界面查看广播组(Exchanges )</li></ul><h3 id="6-基于消费组实现轮询单播功能"><a href="#6-基于消费组实现轮询单播功能" class="headerlink" title="6.基于消费组实现轮询单播功能"></a>6.基于消费组实现轮询单播功能</h3><ul><li>创建Producer和Consumer</li><li>配置消费组，启动两个节点</li><li>RabbitMQ界面单播和广播在Exchange中的不同</li><li>消费分区的配置项</li></ul><h3 id="7-Stream-MQ插件实现延迟消息"><a href="#7-Stream-MQ插件实现延迟消息" class="headerlink" title="7.Stream + MQ插件实现延迟消息"></a>7.Stream + MQ插件实现延迟消息</h3><ul><li>配置RabbitMQ延迟插件，重启MQ</li><li>创建producer和consumer，配置 exchange-type</li><li>添加Message Header 传递延迟时间</li><li>启动查看效果</li></ul><blockquote><p>Postman测试时注意 </p><ul><li>@RequestParam 修饰的变量 postman传参时要传入json形式，或者在传值时多加一对双引号,直接传值会报错</li></ul></blockquote><h3 id="8-Stream实现异常重试"><a href="#8-Stream实现异常重试" class="headerlink" title="8.Stream实现异常重试"></a>8.Stream实现异常重试</h3><ul><li>创建Producer和Consumer，在Consumer中抛出异常</li><li>设置重试次数</li><li>重试成功和失败的表现</li></ul><h3 id="9-Stream实现Requeue操作进行重试"><a href="#9-Stream实现Requeue操作进行重试" class="headerlink" title="9.Stream实现Requeue操作进行重试"></a>9.Stream实现Requeue操作进行重试</h3><ul><li>创建Producer和Consumer</li><li>开启 Re-queue功能(和retry配置又冲突)</li><li>测试Re-queue在不同节点的消费情况</li></ul><blockquote><p>如何处理重试不能被解决的异常</p></blockquote><ul><li>消息被拒绝 ， 重试次数达到阈值</li><li>消息过期(TTL)</li><li>队列长度已满</li></ul><blockquote><p>解决方式</p></blockquote><ul><li>死信交换机<ul><li>DLX - 死信交换器，将异常消息路由到死信队列</li><li>DLK - Dead Letter Routing Key</li></ul></li></ul><h3 id="10-借助死信队列实现异常处理"><a href="#10-借助死信队列实现异常处理" class="headerlink" title="10.借助死信队列实现异常处理"></a>10.借助死信队列实现异常处理</h3><ul><li>使用rabbitmq-plugins enable命令开启RabbitMQ插件</li><li>创建producer和consumer，配置死信队列</li><li>查看Rabbitmq 死信队列</li><li>死信队列消息重新消费</li></ul><h3 id="11-自定义异常处理逻辑"><a href="#11-自定义异常处理逻辑" class="headerlink" title="11.自定义异常处理逻辑"></a>11.自定义异常处理逻辑</h3><ul><li>借助Spring-integration实现Fallback降级逻辑</li><li>Consumer升级</li></ul><h2 id="2-10、基于RPC服务治理（Dubbo）"><a href="#2-10、基于RPC服务治理（Dubbo）" class="headerlink" title="2.10、基于RPC服务治理（Dubbo）"></a>2.10、基于RPC服务治理（Dubbo）</h2><ul><li>服务治理 RPC vs Http</li><li>Dubbo介绍<ul><li>Dubbo架构设计</li><li>Dubbo核心功能</li></ul></li><li>Dubbo注册中心介绍<ul><li>基于Zookeeper的注册中心</li></ul></li><li>RPC协议解析流程</li><li>构建服务消费者，发起远程调用</li><li>Dubbo服务容错，负载均衡</li><li>Dubbo-admin的服务治理</li><li>源码阅读 - Dubbo</li><li>HSF 和 Dubbo</li></ul><h3 id="1-RPC-vs-Http"><a href="#1-RPC-vs-Http" class="headerlink" title="1.RPC vs Http"></a>1.RPC vs Http</h3><ul><li>RPC 远程方法调用 (Remote Procedure call)</li><li>服务治理 (分布式环境注册中心)</li><li>RPC协议 (方法寻址，对象序列化/反序列化)</li></ul><blockquote><p>两者对比</p><ul><li>接口风格</li></ul><img src="/img/springCloud.assets/image-20220214152855031.png" alt="image-20220214152855031" style="zoom:67%;" /><img src="/img/springCloud.assets/image-20220214154744795.png" alt="image-20220214154744795" style="zoom:67%;" /></blockquote><h3 id="2-Dubbo注册中心"><a href="#2-Dubbo注册中心" class="headerlink" title="2.Dubbo注册中心"></a>2.Dubbo注册中心</h3><blockquote><p>可选的注册中心</p></blockquote><ul><li>Multicast</li><li>Zookeeper</li><li>Nacos</li><li>Redis</li><li>Simple</li></ul><blockquote><p>基于Zookeeper的服务注册</p></blockquote><img src="/img/springCloud.assets/image-20220214154920464.png" alt="image-20220214154920464" style="zoom:80%;" /><h3 id="3-创建基于ZK的注册中心生产者服务"><a href="#3-创建基于ZK的注册中心生产者服务" class="headerlink" title="3.创建基于ZK的注册中心生产者服务"></a>3.创建基于ZK的注册中心生产者服务</h3><ul><li>启动ZK作为注册中心</li><li>创建dubbo-api接口层</li><li>创建dubbo-provider，添加service层</li></ul><h3 id="4-构建服务消费者"><a href="#4-构建服务消费者" class="headerlink" title="4.构建服务消费者"></a>4.构建服务消费者</h3><ul><li>创建dubbo-consumer作为服务调用方</li><li>添加Controller 并调用 dubbo-client中的服务</li><li>注意序列化/反序列化的异常</li></ul><h3 id="5-基于-Dubbo-Admin的服务治理"><a href="#5-基于-Dubbo-Admin的服务治理" class="headerlink" title="5.基于 Dubbo-Admin的服务治理"></a>5.基于 Dubbo-Admin的服务治理</h3><ul><li>服务治理可视化<ul><li>条件路由</li><li>标签路由</li><li>黑白名单</li><li>服务权重</li><li>负载均衡</li><li>服务测试</li></ul></li><li>前端工程<ul><li>Vue.js + Vuetify实现</li></ul></li><li>后端工程<ul><li>SpringBoot工程</li></ul></li></ul><blockquote><p>服务治理兼容</p></blockquote><blockquote><p>环境搭建</p><ul><li>修改ookeeper冲突端口</li><li>元数据配置</li><li>启动dubbo-admin的前后端项目</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Spirng</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务</title>
    <link href="/2021/12/29/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2021/12/29/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>分布式事务</p><span id="more"></span><h1 id="一、分布式事务"><a href="#一、分布式事务" class="headerlink" title="一、分布式事务"></a>一、分布式事务</h1><ul><li>CAP原理</li><li>ACID原理 和 BASE原理</li><li>事务补偿机制</li></ul><blockquote><p>分布式事务的解决方案</p></blockquote><ul><li>基于XA协议的两阶段提交 (提交过程复杂，谨慎使用)</li><li>基于本地消息表的最终一致方案</li><li>基于MQ消息队列的最终一致方案</li></ul><h2 id="1-1、CAP原理"><a href="#1-1、CAP原理" class="headerlink" title="1.1、CAP原理"></a>1.1、CAP原理</h2><ul><li>C - Consistent，一致性。具体是指，操作成功后，所有的节点在同一时间内，看到的数据都是完全一致的，一致性指的就是数据一致性</li><li>A - Availability，可用性。指服务一致可用性，在规定的时间内完成响应</li><li>P - Partition tolerance，分区容错性。指分布式系统遇到某节点或网络分区故障的时候，仍然能够对外提供服务</li></ul><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.assets/image-20220105221637828.png" alt="image-20220105221637828" style="zoom:50%;" /><blockquote><p>CAP原理指出，这三个指标不能同时满足，最多只能同时满足其中两个</p></blockquote><blockquote><p>之所以使用分布式系统，就是为了在某个节点不可用的情况下，整个服务对外还是可以的，这正是满足P(分区容错性)。如果我们的服务不满足P(分区容错性)，那么我们的系统也就不是分布式的，所以P(分区容错性)总是成立的，那么A 和 C为什么不能同时满足呢</p></blockquote><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.assets/image-20220105222035561.png" alt="image-20220105222035561" style="zoom:80%;" /><blockquote><ul><li>A 和 B 是两个数据节点，A 向 B 同步数据，并且作为一个整体对外提供服务。由于我们的系统保证了P(分区容错性)，那么A 和 B 的同步，我们允许出现故障。接下来我们再保证A (可用性)，也就是说A 和B 同步出现问题时，客户端还能够访问我们的系统，那么客户即可能访问A 也可能访问B，这时,A 和 B的数据是不一致的，所以C(一致性)不能满足</li><li>如果我们满足C（一致性），无论访问A还是B，得到的结果都是一样的，那么A和B的数据不一致，需要等到A和B的数据一致之后，也就是同步恢复之后，才可对外提供服务，这样我们虽然满足了C(一致性)，却不能满足A（可用性）</li><li>所以,在满足P（分区容错性)的同时，A和C只能有一个满足</li></ul></blockquote><h2 id="1-2、ACID与BASE"><a href="#1-2、ACID与BASE" class="headerlink" title="1.2、ACID与BASE"></a>1.2、ACID与BASE</h2><blockquote><p>ACID </p></blockquote><ul><li>关系型数据库中，最大的特点就是事务处理，也就是ACID,ACID是事务处理的4个特性<ul><li>A - Atomicity(原子性)  ，事务中的操作要么都做，要么都不做</li><li>C - Consistency(一致性)，系统必须始终处于强一致状态下。</li><li>I - Isolation(隔离性)，一个事务的执行不能被其它事务所干扰。</li><li>D - Durability(持久性)，一个已提交的事务对数据库中的数据改变时永久性的</li></ul></li></ul><blockquote><p>ACID强调的是强一致性，要么都做，要么都不做，所有的用户看到的都是一致的数据，传统的数据库都有ACID特性，它们再CAP原理中，保证的是CA,但是在分布式系统流行的当下，满足CA特性的系统很难生存下去，ACID也逐渐向BASE转换，BASE指的是 Basically Available(基本可用)，Soft-state(软状态)，Eventually consistenct(最终一致)的缩写</p></blockquote><ul><li>Basically Available ，基本可用指的是分布式系统再出现故障的时候，允许损失部分可用性，即保证核心可用，电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务，这就是损失部分可用性的体现</li><li>Soft-state，软状态指的是允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有两到三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication 的异步复制也是一种体现</li><li>Eventual Consistent ，最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况</li></ul><blockquote><ul><li>BASE模型是传统ACID模型的反面，不同于ACID,BASE强调的是牺牲高一致性，从而获得可用性，数据允许一段时间内的不一致，只要保证最终一致性就可以了</li><li>再分布式事务的解决方案中，它们都是依赖了ACID 或者 BASE 模型而实现的。像基于XA协议的两阶段提交和事务补偿机制就是基于ACID 实现的</li><li>而基于本地消息表和基于MQ的最终一致方案都是通过BASE原理实现的</li></ul></blockquote><h2 id="1-3、分布式事务问题"><a href="#1-3、分布式事务问题" class="headerlink" title="1.3、分布式事务问题"></a>1.3、分布式事务问题</h2><ul><li>单一数据库的事务很容易解决</li><li>多个独立的数据库之间，无法统一事务，造成数据不一致的情况</li></ul><blockquote><p>一个下单操作可能涉及到多个数据库中数据的修改，这涉及到三个数据库的共同事务</p></blockquote><h2 id="1-4、分布式事务解决方案"><a href="#1-4、分布式事务解决方案" class="headerlink" title="1.4、分布式事务解决方案"></a>1.4、分布式事务解决方案</h2><ul><li>基于XA协议的两阶段提交</li><li>事务补偿机制</li><li>基于本地消息表 + 定时任务的最终一致方案</li><li>基于MQ的最终一致方案</li></ul><h3 id="1、基于XA协议的两阶段提交"><a href="#1、基于XA协议的两阶段提交" class="headerlink" title="1、基于XA协议的两阶段提交"></a>1、基于XA协议的两阶段提交</h3><ul><li>XA由X/OPEN 组织提出的分布式事务的规范</li><li>有一个事务管理器(TM) 和 多个资源管理器(RM)组成</li><li>提交分为两个阶段：prepare 和 commit</li><li>保证数据的强一致性</li><li>commit阶段出现问题，事务出现不一致，需人工处理</li><li>效率低下，性能与本地事务相差10倍</li><li>Mysql5.7 及以上均支持XA协议</li><li>Java系统中，采用XA协议流行的数据源 Atomikos(充当事务管理器的角色)</li></ul><h3 id="2、事务补偿机制-不推荐使用"><a href="#2、事务补偿机制-不推荐使用" class="headerlink" title="2、事务补偿机制(不推荐使用)"></a>2、事务补偿机制(不推荐使用)</h3><ul><li>针对每个操作，都要注册一个与其对应的补偿(撤销)操作</li><li>执行失败时，调用补偿操作，撤销之前的操作</li></ul><blockquote><p>事务补偿例子</p></blockquote><ul><li>A给B转账，A和B在两家不同的银行，A账户扣减200元，B账户增加200元，两个操作要保证原子性，转账的动作要么全成功，要么全失败</li><li>A和B在两家不同的银行，存在分布式事务的问题</li><li>转账接口需要提供补偿机制</li><li>如果A在扣减的过程中出现问题，直接抛出异常，事务回滚</li><li>如果B在增加余额过程中出现问题，调用A的补偿操作，恢复A的钱</li><li>A之前的扣减操作得到了补偿，进行了撤销</li><li>保证了A和B的账户没有问题</li></ul><p><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.assets/image-20220106155647202.png" alt="image-20220106155647202"></p><blockquote><p>优点：逻辑清晰，流程简单</p><p>缺点：数据一致性比XA还要差，可能出错的点较多</p><ul><li>TCC(事务补偿机制)属于应用层的一种补偿方式，需要写大量的代码来实现</li></ul></blockquote><h3 id="3、基于本地消息表的最终一致方案"><a href="#3、基于本地消息表的最终一致方案" class="headerlink" title="3、基于本地消息表的最终一致方案"></a>3、基于本地消息表的最终一致方案</h3><ul><li>采用BASE原理，保证事务最终一致</li><li>在一致性方面，允许一段时间内的不一致，但最终会一致</li><li>在实际的系统当中，要根据具体情况，判断是否采用</li><li>基于本地消息表的方案中，将==本事务外==操作，记录在消息表中</li><li>其它事务，提供操作接口</li><li>定时任务轮询本地消息表，将未执行的消息发送给操作窗口</li><li>操作接口处理成功，返回成功标识，处理失败，返回失败标识</li><li>定时任务接到标识，更新消息状态</li><li>定时任务按照一定的周期反复执行</li><li>对于屡次失败的消息，可以设置最大失败次数</li><li>超过最大失败次数的消息，不再进行接口调用，等待人工处理</li></ul><p><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.assets/image-20220108125126799.png" alt="image-20220108125126799"></p><p>优点：避免了分布式事务，实现了最终一致性</p><p>缺点：要注意重试时的幂等性操作</p><h3 id="4、基于MQ的最终一致方案"><a href="#4、基于MQ的最终一致方案" class="headerlink" title="4、基于MQ的最终一致方案"></a>4、基于MQ的最终一致方案</h3><ul><li>原理，流程与本地消息表是类似的</li><li>不同点：本地消息表改为MQ</li><li>定时任务，改为MQ的消费者</li></ul><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.assets/image-20220110134213965.png" alt="image-20220110134213965" style="zoom:67%;" /><ul><li>优点：不依赖于定时任务，基于MQ更高效，更可靠</li><li>基于MQ适合公司内部的系统</li><li>不同公司之间无法基于MQ，本地消息表更合适</li></ul><h2 id="1-5、基于XA协议的Atomikos做分布式事务"><a href="#1-5、基于XA协议的Atomikos做分布式事务" class="headerlink" title="1.5、基于XA协议的Atomikos做分布式事务"></a>1.5、基于XA协议的Atomikos做分布式事务</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><blockquote><ul><li><p>环境准备 两台虚拟机上的mysql 分别建立 xa_101 和 xa_102 数据库，两个数据库分别建立两张表 xa_101 xa_102</p></li><li><p>新建springBoot项目</p></li></ul></blockquote><p>Atomikos   maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>springboot配置多数据源需要使用配置文件进行配置</p><p>DB101数据源配置(DB102数据源配置类似于DB101)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.xademo.config;<br><br><span class="hljs-keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;<br><span class="hljs-keyword">import</span> com.mysql.cj.jdbc.MysqlXADataSource;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> javax.sql.XADataSource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/1/6/11:53</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> xa-demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: ConfigDb101</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: DB101 数据源配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// mapper 接口文件的位置</span><br><span class="hljs-meta">@MapperScan(value = &quot;com.tho.xademo.dao101&quot;, sqlSessionFactoryRef = &quot;sqlSessionFactoryBean101&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigDb101</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置db101数据源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;DB101&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">DB101</span><span class="hljs-params">()</span> </span>&#123;<br>        MysqlXADataSource xaDataSource = <span class="hljs-keyword">new</span> MysqlXADataSource();<br>        xaDataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        xaDataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        xaDataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://192.168.198.101:3306/xa_101&quot;</span>);<br><br>        <span class="hljs-comment">// 使用 Atomikos统一管理</span><br>        AtomikosDataSourceBean atomikosDataSourceBean = <span class="hljs-keyword">new</span> AtomikosDataSourceBean();<br>      <span class="hljs-comment">// 要写上下面的语句,否则会报NPE</span><br>      atomikosDataSourceBean.setUniqueResourceName(<span class="hljs-string">&quot;atomikosDataSourceBean101&quot;</span>);<br>        atomikosDataSourceBean.setXaDataSource(xaDataSource);<br>        <span class="hljs-keyword">return</span> atomikosDataSourceBean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置mybatis sql session factory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;sqlSessionFactoryBean101&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title">sqlSessionFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;DB101&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        ResourcePatternResolver resourceResolver = <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver();<br>        sqlSessionFactoryBean.setMapperLocations(resourceResolver.getResources(<span class="hljs-string">&quot;mybatis/db101/*.xml&quot;</span>));<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置 Atomikos事务管理器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;xaTransaction&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JtaTransactionManager <span class="hljs-title">jtaTransactionManager</span><span class="hljs-params">()</span> </span>&#123;<br>        UserTransaction userTransaction = <span class="hljs-keyword">new</span> UserTransactionImp();<br>        UserTransactionManager userTransactionManager = <span class="hljs-keyword">new</span> UserTransactionManager();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JtaTransactionManager(userTransaction, userTransactionManager);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-通过generator生成mapper类"><a href="#2-通过generator生成mapper类" class="headerlink" title="2.通过generator生成mapper类"></a>2.通过generator生成mapper类</h3><blockquote><p>pom.xml 引入插件信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>生成器的配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MysqlTables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.198.102:3306/xa_102?serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.tho.xademo.db102.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mybatis/db102&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.tho.xademo.db102.dao&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">&quot;xa_102&quot;</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;xa_102&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;XA102&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="3-测试XA事务"><a href="#3-测试XA事务" class="headerlink" title="3.测试XA事务"></a>3.测试XA事务</h3><blockquote><p>service类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.xademo.service;<br><br><span class="hljs-keyword">import</span> com.tho.xademo.db101.dao.XA101Mapper;<br><span class="hljs-keyword">import</span> com.tho.xademo.db101.model.XA101;<br><span class="hljs-keyword">import</span> com.tho.xademo.db102.dao.XA102Mapper;<br><span class="hljs-keyword">import</span> com.tho.xademo.db102.model.XA102;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/1/6/12:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> xa-demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: XAService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: XA 测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XAService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> XA101Mapper xa101Mapper;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> XA102Mapper xa102Mapper;<br><br>    <span class="hljs-meta">@Transactional(transactionManager = &quot;xaTransaction&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">XATest</span><span class="hljs-params">()</span> </span>&#123;<br>         XA101 xa101 = <span class="hljs-keyword">new</span> XA101();<br>         xa101.setId(<span class="hljs-number">1</span>);<br>         xa101.setName(<span class="hljs-string">&quot;tho&quot;</span>);<br>         xa101Mapper.insert(xa101);<br><br>         XA102 xa102 = <span class="hljs-keyword">new</span> XA102();<br>         xa102.setId(<span class="hljs-number">2</span>);<br>         xa102.setName(<span class="hljs-string">&quot;tho666&quot;</span>);<br>         xa102Mapper.insert(xa102);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.xademo;<br><br><span class="hljs-keyword">import</span> com.tho.xademo.service.XAService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = XaDemoApplication.class)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XaDemoApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> XAService xaService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">xaTest</span><span class="hljs-params">()</span> </span>&#123;<br>        xaService.XATest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-模拟sql执行错误"><a href="#4-模拟sql执行错误" class="headerlink" title="4.模拟sql执行错误"></a>4.模拟sql执行错误</h3><blockquote><p>修改表中字段，将其长度修改为2，这样修改之后插入数据时会报错，查看事务的执行情况</p><p>最后两张表的数据都没有插入成功</p></blockquote><h2 id="1-6、Mycat和Sharding-jdbc的分布式事务"><a href="#1-6、Mycat和Sharding-jdbc的分布式事务" class="headerlink" title="1.6、Mycat和Sharding-jdbc的分布式事务"></a>1.6、Mycat和Sharding-jdbc的分布式事务</h2><ul><li>Mycat和 Sharding-Jdbc 内置了XA分布式事务，Mycat需要在配置文件中修改</li></ul><h2 id="1-7、基于本地消息表分布式事务"><a href="#1-7、基于本地消息表分布式事务" class="headerlink" title="1.7、基于本地消息表分布式事务"></a>1.7、基于本地消息表分布式事务</h2><h2 id="1-8、基于MQ分布式事务"><a href="#1-8、基于MQ分布式事务" class="headerlink" title="1.8、基于MQ分布式事务"></a>1.8、基于MQ分布式事务</h2>]]></content>
    
    
    <categories>
      
      <category>分布式相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分库分表</title>
    <link href="/2021/12/26/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <url>/2021/12/26/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>分库分表常见解决方案</p><span id="more"></span><p>yum配置阿里镜像源 </p><blockquote><p>1）下载repo文件<br>wget <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>wget命令不存在 使用 yum进行安装即可  </p><p>yum install -y wget</p><p>2）备份并替换系统的repo文件</p><p>cp Centos-7.repo /etc/yum.repos.d/<br>cd /etc/yum.repos.d/<br>mv CentOS-Base.repo CentOS-Base.repo.bak<br>mv Centos-7.repo CentOS-Base.repo</p><p>3）执行yum源更新命令</p><p>yum clean all<br>yum makecache<br>yum update</p><p>配置完毕。</p></blockquote><h1 id="一、分库分表"><a href="#一、分库分表" class="headerlink" title="一、分库分表"></a>一、分库分表</h1><h2 id="1-1、切分数据库"><a href="#1-1、切分数据库" class="headerlink" title="1.1、切分数据库"></a>1.1、切分数据库</h2><p>水平切分 ：按照表的属性名进行切分</p><p>垂直切分 ：按照 userId 的哈希值或者一定规则将表中数据切分为不同的组成 </p><ul><li>分布式事务问题</li><li>跨库join问题</li><li>多数据源的管理问题</li></ul><blockquote><p>针对多数据源的管理问题,主要有两种思路：</p><ol><li>客户端模式，在每个应用模块内，配置自己需要的数据源，直接访问数据库，在各模块内完成数据的整合</li><li>中间代理模式，中间代理统一管理所有的数据源，数据库层对开发人员完全透明，开发人员无需关注拆分的细节</li></ol></blockquote><ul><li>中间代理模式：MyCat</li><li>客户端模式:sharding-jdbc</li></ul><h2 id="1-2、读写分离"><a href="#1-2、读写分离" class="headerlink" title="1.2、读写分离"></a>1.2、读写分离</h2><ul><li>数据库分为读库和写库 写库中的数据更新要同步到读库</li></ul><h2 id="1-3、垂直切分"><a href="#1-3、垂直切分" class="headerlink" title="1.3、垂直切分"></a>1.3、垂直切分</h2><ul><li>按照业务切分</li><li>每种业务一个数据库</li><li>不同业务之间，禁止跨库join联查(性能太差，一般通过服务来进行查询)</li></ul><blockquote><p>垂直切分</p><p>优点：</p><ul><li>拆分后业务清晰，拆分规则明确</li><li>系统之间容易扩展和整合</li><li>数据维护简单</li></ul><p>缺点：</p><ul><li>部分业务表无法join，只能通过接口调用，提升了系统的复杂度</li><li>跨库事务难以处理</li><li>垂直切分后，某些业务数据过于庞大，仍然存在单体性能瓶颈</li></ul></blockquote><h2 id="1-4、水平切分"><a href="#1-4、水平切分" class="headerlink" title="1.4、水平切分"></a>1.4、水平切分</h2><ul><li>将一张表的数据按照某种规则分到不同的数据库中</li><li>需确定分片的规则</li><li>使用分片字段查询时，可确定实体库，其它字段查询，查询所有表</li></ul><blockquote><p>水平切分</p><p>优点：</p><ul><li>解决了单库大数据，高并发的性能瓶颈</li><li>拆分规则封装好，对应用端几乎透明，开发人员无需关心拆分细节</li><li>提高了系统的稳定性和负载能力</li></ul><p>缺点：</p><ul><li>拆分规则很难抽象</li><li>分片事务一致性难以解决</li><li>二次扩展时，数据迁移，维护难度大</li></ul></blockquote><h2 id="1-5、分库分表选择"><a href="#1-5、分库分表选择" class="headerlink" title="1.5、分库分表选择"></a>1.5、分库分表选择</h2><ul><li>优先选择垂直切分</li><li>之后选择水平切分</li></ul><h1 id="二、MyCat"><a href="#二、MyCat" class="headerlink" title="二、MyCat"></a>二、MyCat</h1><h2 id="2-1、MyCat概述"><a href="#2-1、MyCat概述" class="headerlink" title="2.1、MyCat概述"></a>2.1、MyCat概述</h2><ul><li>对于DBA来说： MyCat就是MySql ， 而MyCat后面连接的mysql可以理解为mysql的存储引擎，比如：myisam，innodb等，mycat本身并不存储数据，数据都是存储在mycat后面连接的mysql上，数据的可靠性和事务都是mysql保证的</li><li>对于开发人员来说： mycat就是一个近似等于mysql的数据库服务，可以使用连接mysql的方式连接mycat。绝大多数情况，可以使用常用的orm框架连接mycat，但是对于分片的表，建议使用标准的sql语句，这样能够达到最佳的性能</li><li>对于架构师来说： mycat是一个强大的数据库中间件，不仅仅可以用作读写分离，分库分表，还可以用于容灾备份，云平台建设等，让架构具备更强的适应性和灵活性</li></ul><blockquote><p>MyCat的应用场景</p><p>MyCat发展到现在，使用的场景很丰富，常见的典型应用场景有</p><ul><li>单纯的读写分离，此时配置最为简单，支持读写分离，主从切换</li><li>分库分表，对于超过1000w的表进行分片，最大支持1000亿的数据</li><li>多租户应用，每个应用一个数据库，应用只连接MyCat，程序本身不需要改造</li><li>代替Hbase，分析大数据</li></ul></blockquote><h2 id="2-2、MyCat基本概念"><a href="#2-2、MyCat基本概念" class="headerlink" title="2.2、MyCat基本概念"></a>2.2、MyCat基本概念</h2><p>MyCat是一个数据库的中间件，介于应用和数据库之间，是进行数据处理和交互的中间服务</p><h3 id="1-逻辑库-Schema"><a href="#1-逻辑库-Schema" class="headerlink" title="1.逻辑库(Schema)"></a>1.逻辑库(Schema)</h3><ul><li>在实际的开发中，开发人员不需要知道数据库中间件的存在，开发人员只需要有数据库的概念就可以了，所以数据库中间件可以被看做一个或者多个数据库集群构成的逻辑库</li></ul><h3 id="2-逻辑表-table"><a href="#2-逻辑表-table" class="headerlink" title="2.逻辑表(table)"></a>2.逻辑表(table)</h3><ul><li>既然有逻辑库，就有逻辑表，对于应用系统来说，读写数据的表，就是逻辑表。而逻辑表中的数据则是被水平切分之后，分布在不同的分片库中。</li><li>假设用户库中有一张用户表，这个用户表就被称为逻辑表，而用户表又被水平切分为3个表，每一个逻辑表中都存储一部分用户数据。业务系统在对用户数据进行读写时，只需要操作逻辑表就可以了，后面的分片细节则由MyCat来进行操作，这对于业务开发人员来说是完全透明的。当然，有些表的数据量没有那么大，完全不需要进行分片，只在一个物理的数据库表中即可</li><li>凡是做的数据水平切分的表，都叫做分片表。而数据量较小，没有进行分片的表，叫做非分片表</li><li>在真实的业务系统中，往往存在着大量的字典表，这些表的数据基本上很少变动，比如：订单状态。查询的时候往往需要关联字段表去查询，比如：查询订单时，需要把订单状态关联查出，如果订单表做了分片，分布在不同的数据库中，而订单状态由于数据量小，没有做分片，那么我们查询的时候就要跨库关联查询订单状态，增加了不必要的麻烦，不如把订单状态冗余到所有的订单分片库中，这样关联查询就不需要跨库了，我们把这种通过数据冗余方式复制到所有分片库中的表 叫做==全局表==</li></ul><h3 id="3-分片节点-dataNode"><a href="#3-分片节点-dataNode" class="headerlink" title="3.分片节点(dataNode)"></a>3.分片节点(dataNode)</h3><ul><li>数据被切分后，一张大表被分到不同的分片数据库上面，每个分片表所在的数据库就叫做==分片节点==</li></ul><h3 id="4-分片主机-dataHost"><a href="#4-分片主机-dataHost" class="headerlink" title="4.分片主机(dataHost)"></a>4.分片主机(dataHost)</h3><ul><li>数据切分后，每一个分片节点不一定都会占用一个真正的物理主机，会存在多个分片节点在同一个物理主机上的情况，这些分片节点所在的主机就叫做==节点主机==，为了避免单节点并发数的限制，尽量将读写压力高的分片节点放在不同的节点主机上</li></ul><h3 id="5-分片规则-rule"><a href="#5-分片规则-rule" class="headerlink" title="5.分片规则(rule)"></a>5.分片规则(rule)</h3><ul><li>一个大表被拆分成多个分片表，就需要一定的规则，按照某种业务逻辑，将数据分到一个确定的分片当中，这个规则就叫做==分片规则==。数据切分选择合适的分片规则非常重要，这将影响到后续的数据处理难度，结合业务，选择合适的分片规则是一个艰难的，难以抉择的过程</li></ul><h3 id="6-全局序列号-sequence"><a href="#6-全局序列号-sequence" class="headerlink" title="6.全局序列号(sequence)"></a>6.全局序列号(sequence)</h3><ul><li>数据切分之后，数据库中的id怎么办，原来在一张表的时候，采用id自增，数据分布到多个数据可怎么办？比如向用户表插入数据，第一条记录插入了用户库1，id为1，第二条记录插入了用户库2，如果是自增，他的id也为1，这样就太混乱了，也无法确定一条数据的唯一标识了，我们需要借助外部机制来保证数据的唯一标识，这种保证数据唯一标识的机制，就是 ==全局序列号==</li></ul><h2 id="2-3、Mycat环境搭建"><a href="#2-3、Mycat环境搭建" class="headerlink" title="2.3、Mycat环境搭建"></a>2.3、Mycat环境搭建</h2><h3 id="1-mysql环境搭建"><a href="#1-mysql环境搭建" class="headerlink" title="1.mysql环境搭建"></a>1.mysql环境搭建</h3><blockquote><p>三台虚拟机 两台安装mysql 一台安装Mycat，并修改配置文件</p></blockquote><ul><li>使用yum方式安装mysql (查看官网教程)</li><li>手动安装</li></ul><p> 两台虚拟机配置好mysql环境</p><h3 id="2-mycat环境搭建"><a href="#2-mycat环境搭建" class="headerlink" title="2.mycat环境搭建"></a>2.mycat环境搭建</h3><p>解压mycat安装包到 /usr/local/mycat-1.6 目录下</p><blockquote><p>/conf 目录下下 修改配置文件</p><p>server.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">defaultAccount</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 表级 DML 权限设置 --&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">&lt;privileges check=&quot;false&quot;&gt;</span><br><span class="hljs-comment">&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span><br><span class="hljs-comment">&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span><br><span class="hljs-comment">&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span><br><span class="hljs-comment">&lt;/schema&gt;</span><br><span class="hljs-comment">&lt;/privileges&gt;</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;readOnly&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- dataHost 配置 (对应mysql节点所在主机) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;db101&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br><span class="hljs-comment">&lt;!-- can have multi write hosts --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;M1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.198.101:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- can have multi read hosts --&gt;</span><br><span class="hljs-comment">&lt;!--&lt;readHost host=&quot;hostS2&quot; url=&quot;192.168.1.200:3306&quot; user=&quot;root&quot; password=&quot;xxx&quot; /&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--&lt;writeHost host=&quot;hostS1&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot;</span><br><span class="hljs-comment">   password=&quot;123456&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;db102&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br><span class="hljs-comment">&lt;!-- can have multi write hosts --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;M1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.198.102:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- can have multi read hosts --&gt;</span><br><span class="hljs-comment">&lt;!--&lt;readHost host=&quot;hostS2&quot; url=&quot;192.168.1.200:3306&quot; user=&quot;root&quot; password=&quot;xxx&quot; /&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--&lt;writeHost host=&quot;hostS1&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot;</span><br><span class="hljs-comment">   password=&quot;123456&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- dataNode 配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn101&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;db101&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;user_101&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn102&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;db102&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;user_102&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 分片规则配置 --&gt;</span><br><span class="hljs-comment">&lt;!-- schema name=&quot;user&quot;  配置文件 中的name 要保持一致 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- auto sharding by id (long) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn101,dn102&quot;</span> <span class="hljs-attr">rule</span>=<span class="hljs-string">&quot;auto-sharding-long&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="3-启动mycat"><a href="#3-启动mycat" class="headerlink" title="3.启动mycat"></a>3.启动mycat</h3><blockquote><p>./bin/mycat console – 可以查看mycat的日志信息</p><p>启动报错 ： Caused by: io.mycat.config.util.ConfigException: Illegal table conf : table [ USER ] rule function [ rang-long ] partition size : 3 &gt; table datanode size : 2, please make sure table datanode size = function partition size</p><p>使用的分片算法 是将数据分为三个分片,但是现在配置的mysql数据库只有两个</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># range start-end ,data node index<br># K=<span class="hljs-number">1000</span>,M=<span class="hljs-number">10000.</span><br><span class="hljs-number">0</span>-500M=<span class="hljs-number">0</span><br>500M-1000M=<span class="hljs-number">1</span><br># 1000M-1500M=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="4-测试-mycat"><a href="#4-测试-mycat" class="headerlink" title="4.测试 mycat"></a>4.测试 mycat</h3><blockquote><p>连接mycat 在mycat服务器上进行数据的插入,</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> `<span class="hljs-keyword">user</span>` (id, user_name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, &quot;tho&quot;)<br></code></pre></td></tr></table></figure><p>记录物理保存在  198.101 服务器的mysql上</p><p>根据指定的分片规则 0 - 500w 数据都保存在 101 服务器上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> `<span class="hljs-keyword">user</span>` (id, user_name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6000000</span>, &quot;tho&quot;)<br></code></pre></td></tr></table></figure><p>插入一条 600000w id 的数据 该数据会保存到 102服务器上</p></blockquote><h2 id="2-4、Mycat用户配置"><a href="#2-4、Mycat用户配置" class="headerlink" title="2.4、Mycat用户配置"></a>2.4、Mycat用户配置</h2><h3 id="1-server-xml-配置"><a href="#1-server-xml-配置" class="headerlink" title="1.server.xml 配置"></a>1.server.xml 配置</h3><ul><li>配置MyCat 的用户名，密码，权限，Schema 等</li><li>如同给 mysql 新建用户一样</li><li>客户端连接MyCat 与 连接mysql 无异</li></ul><h3 id="2-直接使用-mysql8-0-cli-连接mycat"><a href="#2-直接使用-mysql8-0-cli-连接mycat" class="headerlink" title="2.直接使用 mysql8.0 cli 连接mycat"></a>2.直接使用 mysql8.0 cli 连接mycat</h3><p><img src="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.assets/image-20211223215410373.png" alt="image-20211223215410373"></p><blockquote><p>因为mysql8.0 加密方式的变化 使用mysql8.0 cli 客户端可能无法直接连接mycat</p><p>mysql8.0 cli 客户端 使用的是新的加密方式 </p><p>使用旧的加密方式</p><p><code>mysql -uroot -p8066 -h127.0.0.1 --default-auth=mysql_native_password </code> 输入密码 连接mycat </p></blockquote><h3 id="3-schema-xml配置"><a href="#3-schema-xml配置" class="headerlink" title="3.schema.xml配置"></a>3.schema.xml配置</h3><ul><li>配置 dataHost(节点主机) ， 包括读host ， 写 host</li><li>配置 dataNode(数据节点) ， 指定到具体的数据库</li><li>配置 schema， 表名，数据节点，分片规则</li></ul><blockquote><ul><li>balance 配置 ： 负载均衡类型 <ul><li>0 不开启读写分离</li><li>1 和 2 读写均分配</li><li>3 读落在 readHost 上</li></ul></li><li>writeType 配置 ：写请求类型 0 落在第一个 writeHost 上 ；1 随机</li><li>sqlMaxLimit ：会拦截sql 自动加上 limit 条件 (sql语句本身有limit mycat的 limit 便不会再生效)</li><li>checkSQLschema：是否去掉 SQL 中的 Schema</li><li>table 标签：定义表<ul><li>name属性：定义逻辑表的表名</li><li>dataNode属性：定义逻辑表的数据节点</li></ul></li><li>rule属性：定义分片表的分配规则，必须与rule.xml 中的tableRule对应</li><li>ruleRequired属性：是否绑定分配规则，如果为 true 但是没有绑定分片规则,会报错</li></ul></blockquote><h2 id="2-5、验证MyCat-配置"><a href="#2-5、验证MyCat-配置" class="headerlink" title="2.5、验证MyCat 配置"></a>2.5、验证MyCat 配置</h2><p>使用命令 <code>./bin/mycat start</code> 后台启动 mycat</p><blockquote><p>使用 mycat 9066 端口可以 不停机查看 更新mycat中的配置</p></blockquote><h2 id="2-6、配置读写分离"><a href="#2-6、配置读写分离" class="headerlink" title="2.6、配置读写分离"></a>2.6、配置读写分离</h2><p>schema.xml 配置文件修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;M1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.198.101:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- can have multi read hosts --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;S1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.198.100:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br></code></pre></td></tr></table></figure><p>198.100 服务器配置好 mysql 服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">连接mycat的管理端口 <span class="hljs-number">9066</span> 使用 `show @<span class="hljs-meta">@help</span>;` 查看所有命令<br>  使用 修改了 schema.xml 中 数据源 相关的内容,需要使用命令 reload @<span class="hljs-meta">@config_all</span>; 来使配置生效<br></code></pre></td></tr></table></figure><h2 id="2-7、Mysql主从配置"><a href="#2-7、Mysql主从配置" class="headerlink" title="2.7、Mysql主从配置"></a>2.7、Mysql主从配置</h2><ul><li>主配置 log-bin  指定文件的名字</li><li>主配置 server-id 默认为1</li><li>从配置 server-id 与主不能重复</li></ul><h3 id="1-主从配置文件配置"><a href="#1-主从配置文件配置" class="headerlink" title="1.主从配置文件配置"></a>1.主从配置文件配置</h3><blockquote><p>主mysql 配置文件 my.cnf 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"># 配置mysql主从<br>log-bin=tho_mysql<br>server-id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p> 从mysql 配置文件 my.cnf 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">server-id=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>重启 主从数据库</p></blockquote><h3 id="2-创建备份用账号"><a href="#2-创建备份用账号" class="headerlink" title="2.创建备份用账号"></a>2.创建备份用账号</h3><blockquote><p>主数据库创建备份账号并授权 REPLICATION SLAVE </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>; <br>(两个数据库都是mysql8<span class="hljs-number">.0</span> 不需要考虑加密方式的问题,两个数据库都使用mysql8<span class="hljs-number">.0</span>默认的加密方式)<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> flush privileges;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br></code></pre></td></tr></table></figure><blockquote><p>主 进行锁表 </p><p>FLUSH TABLES WITH READ LOCK;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> flush tables <span class="hljs-keyword">with</span> read lock;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><blockquote><p>主数据库 找到 log-bin 的位置 </p><p>show master status;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> tho_mysql<span class="hljs-number">.000001</span> <span class="hljs-operator">|</span>      <span class="hljs-number">739</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><blockquote><p>主 备份数据 </p><p>mysqldump –all-databases –master-data &gt; dbdump.db</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">在执行mysqldump命令时候报如下错误：<br>[root<span class="hljs-variable">@localhost</span> <span class="hljs-operator">~</span>]#  mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-comment">--all-databases&gt; all.sql   </span><br><br>mysqldump: Got error: <span class="hljs-number">2002</span>: Can<span class="hljs-string">&#x27;t connect to local MySQL server through socket &#x27;</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>mysql.sock<span class="hljs-string">&#x27; (2) when trying to connect</span><br><span class="hljs-string"></span><br><span class="hljs-string">找到正确的套接字的路径： </span><br><span class="hljs-string"></span><br><span class="hljs-string">[root@centos_7_100 mycat]# netstat -ln | grep mysql    </span><br><span class="hljs-string">unix  2      [ ACC ]     STREAM     LISTENING     29653    /var/lib/mysql/mysql.sock</span><br><span class="hljs-string">[root@centos_7_100 mycat]# </span><br><span class="hljs-string">[root@centos_7_100 mycat]# mysqldump --socket=/var/lib/mysql/mysql.sock --all-databases --master-data &gt; dbdump.db -uroot -p</span><br></code></pre></td></tr></table></figure><blockquote><p>从 数据库 拷贝主数据库的备份文件</p><p>scp <a href="mailto:&#114;&#111;&#x6f;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#x31;&#x39;&#x38;&#x2e;&#x31;&#x30;&#x30;">&#114;&#111;&#x6f;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#x31;&#x39;&#x38;&#x2e;&#x31;&#x30;&#x30;</a>:~/dbdump.db .</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 备份到从数据库</span><br>[root<span class="hljs-meta">@centos_7_101</span> ~]# mysql &lt; dbdump.db -uroot -p<br>Enter password: <br><br></code></pre></td></tr></table></figure><blockquote><p>放开锁表 语句</p><p>mysql&gt; unlock tables;<br>Query OK, 0 rows affected (0.01 sec)</p></blockquote><h3 id="3-配置主从"><a href="#3-配置主从" class="headerlink" title="3.配置主从"></a>3.配置主从</h3><blockquote><p>从库配置主库内容</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">change master <span class="hljs-keyword">to</span><br>master_host<span class="hljs-operator">=</span><span class="hljs-string">&#x27;192.168.198.100&#x27;</span>,<br>master_user<span class="hljs-operator">=</span><span class="hljs-string">&#x27;repl&#x27;</span>,<br>master_password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>,<br>master_log_file<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tho_mysql.000001&#x27;</span>,<br>master_log_pos<span class="hljs-operator">=</span><span class="hljs-number">739</span>;<br></code></pre></td></tr></table></figure><blockquote><p>从库 执行  start slave 开启主从同步</p><p>从库查看主从信息  show slave status; </p></blockquote><h2 id="2-8、mycat常用分片规则"><a href="#2-8、mycat常用分片规则" class="headerlink" title="2.8、mycat常用分片规则"></a>2.8、mycat常用分片规则</h2><h3 id="1-枚举分片"><a href="#1-枚举分片" class="headerlink" title="1.枚举分片"></a>1.枚举分片</h3><blockquote><p>通过配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定的场景，比如有些业务需要按照省市区来做保存，而全国的省市区是固定的，这类业务使用本条规则</p></blockquote><h3 id="2-取模分片"><a href="#2-取模分片" class="headerlink" title="2.取模分片"></a>2.取模分片</h3><blockquote><p>根据数据库某字段进行取模,按照取模的结果决定放到哪个数据库</p><p>后续扩展数据库,要按照当前数据库个数的n次方进行扩展</p></blockquote><h2 id="2-9、Mycat全局表"><a href="#2-9、Mycat全局表" class="headerlink" title="2.9、Mycat全局表"></a>2.9、Mycat全局表</h2><blockquote><p>数据表的数据量较小(例如字典表等等),可以在每个分片数据库中都存放一份,这样不需要多次的联表查询</p><p>==type属性：global为全局表==，不指定为分片表</p></blockquote><h2 id="2-10、Mycat子表"><a href="#2-10、Mycat子表" class="headerlink" title="2.10、Mycat子表"></a>2.10、Mycat子表</h2><blockquote><p>order(订单表) orderItem(订单明细表) 两表分库分表时最好放在同一个数据库中，减少跨库关联操作</p></blockquote><ul><li>childTable标签，定义分片子表</li><li>name属性，子表名称</li><li>joinKey属性，标志子表中的列，用于与父表做关联(orderId)</li><li>parentKey标签，标志父表中的列，与joinKey对应</li><li>primaryKey属性，子表主键，同table标签</li><li>needAddLimit属性，同table标签</li></ul><blockquote><p>schema.xml 配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 全局表配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;province&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn101,dn102&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;global&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 子表配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn101,dn102&quot;</span> <span class="hljs-attr">rule</span>=<span class="hljs-string">&quot;auto-sharding-long&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">childTable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order_item&quot;</span> <span class="hljs-attr">joinKey</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">parentKey</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、Mycat高可用"><a href="#三、Mycat高可用" class="headerlink" title="三、Mycat高可用"></a>三、Mycat高可用</h1><h2 id="3-1、Mycat-HA-原理"><a href="#3-1、Mycat-HA-原理" class="headerlink" title="3.1、Mycat-HA-原理"></a>3.1、Mycat-HA-原理</h2><blockquote><p>避免Mycat成为系统中的单点</p></blockquote><p>架构图</p><p><img src="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.assets/image-20211229125856871.png" alt="image-20211229125856871"></p><h2 id="3-2、Mycat-Haproxy"><a href="#3-2、Mycat-Haproxy" class="headerlink" title="3.2、Mycat-Haproxy"></a>3.2、Mycat-Haproxy</h2><p>192.168.198.100 (mysql服务，mycat服务，HAproxy)</p><p>192.168.198.101 (mysql服务，mycat服务)</p><p>192.168.198.102 (mysql服务，HaProxy服务)</p><blockquote><p>其中 100 和 101 两台主机是主从模式</p></blockquote><h3 id="1-安装HaProxy"><a href="#1-安装HaProxy" class="headerlink" title="1.安装HaProxy"></a>1.安装HaProxy</h3><blockquote><p>使用 yum 命令方式安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_102 ~]# yum search haproxy<br>已加载插件：fastestmirror<br>Loading mirror speeds from cached hostfile<br> * base: mirrors.aliyun.com<br> * extras: mirrors.aliyun.com<br> * updates: mirrors.aliyun.com<br>=========================================================== N/S matched: haproxy ============================================================<br>pcp-pmda-haproxy.x86_64 : Performance Co-Pilot (PCP) metrics for HAProxy<br>haproxy.x86_64 : TCP/HTTP proxy and load balancer for high availability environments<br><br>  名称和简介匹配 only，使用“search all”试试。<br><span class="hljs-meta">#</span><span class="bash"> haproxy比nginx支持的协议更多，nginx只支持http协议</span><br><span class="hljs-meta">#</span><span class="bash"> 安装haproxy</span><br>[root@centos_7_102 ~]# yum -y install haproxy.x86_64<br></code></pre></td></tr></table></figure><blockquote><p>haproxy 配置文件所在目录 /etc/haproxy/haproxy.cfg</p></blockquote><ul><li> 修改配置文件,通过tcp连接mycat </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java">#---------------------------------------------------------------------<br># Example configuration <span class="hljs-keyword">for</span> a possible web application.  See the<br># full configuration options online.<br>#<br>#   http:<span class="hljs-comment">//haproxy.1wt.eu/download/1.4/doc/configuration.txt</span><br>#<br>#---------------------------------------------------------------------<br><br>#---------------------------------------------------------------------<br># Global settings<br>#---------------------------------------------------------------------<br>global<br>    # to have these messages end up in /<span class="hljs-keyword">var</span>/log/haproxy.log you will<br>    # need to:<br>    #<br>    # <span class="hljs-number">1</span>) configure syslog to accept network log events.  This is done<br>    #    by adding the <span class="hljs-string">&#x27;-r&#x27;</span> option to the SYSLOGD_OPTIONS in<br>    #    /etc/sysconfig/syslog<br>    #<br>    # <span class="hljs-number">2</span>) configure local2 events to go to the /<span class="hljs-keyword">var</span>/log/haproxy.log<br>    #   file. A line like the following can be added to<br>    #   /etc/sysconfig/syslog<br>    #<br>    #    local2.*                       /<span class="hljs-keyword">var</span>/log/haproxy.log<br>    #<br>    log         <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> local2<br><br>    chroot      /<span class="hljs-keyword">var</span>/lib/haproxy<br>    pidfile     /<span class="hljs-keyword">var</span>/run/haproxy.pid<br>    maxconn     <span class="hljs-number">4000</span><br>    user        haproxy<br>    group       haproxy<br>    daemon<br><br>    # turn on stats unix socket<br>    stats socket /<span class="hljs-keyword">var</span>/lib/haproxy/stats<br><br>#---------------------------------------------------------------------<br># common defaults that all the <span class="hljs-string">&#x27;listen&#x27;</span> and <span class="hljs-string">&#x27;backend&#x27;</span> sections will<br># use <span class="hljs-keyword">if</span> not designated in their block<br>#---------------------------------------------------------------------<br>defaults<br>    mode                    tcp<br>    log                     global<br>    option                  tcplog<br>    option                  dontlognull<br>    # option http-server-close<br>    # option forwardfor       except <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">8</span><br>    option                  redispatch<br>    retries                 <span class="hljs-number">3</span><br>    timeout http-request    10s<br>    timeout queue           1m<br>    timeout connect         10s<br>    timeout client          1m<br>    timeout server          1m<br>    timeout http-keep-alive 10s<br>    timeout check           10s<br>    maxconn                 <span class="hljs-number">3000</span><br><br>#---------------------------------------------------------------------<br># main frontend which proxys to the backends<br>#---------------------------------------------------------------------<br>frontend  main *:<span class="hljs-number">5000</span><br>    # acl url_static       path_beg       -i /<span class="hljs-keyword">static</span> /images /javascript /stylesheets<br>    # acl url_static       path_end       -i .jpg .gif .png .css .js<br><br>    # use_backend <span class="hljs-keyword">static</span>          <span class="hljs-keyword">if</span> url_static<br>    default_backend             app<br><br>#---------------------------------------------------------------------<br># <span class="hljs-keyword">static</span> backend <span class="hljs-keyword">for</span> serving up images, stylesheets and such<br>#---------------------------------------------------------------------<br>backend <span class="hljs-keyword">static</span><br>    balance     roundrobin<br>    server      <span class="hljs-keyword">static</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">4331</span> check<br><br>#---------------------------------------------------------------------<br># round robin balancing between the various backends<br>#---------------------------------------------------------------------<br>backend app<br>    balance     roundrobin<br>    server  app1 <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span>:<span class="hljs-number">8066</span> check<br>    server  app2 <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.101</span>:<span class="hljs-number">8066</span> check<br>    # server  app3 <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">5003</span> check<br>    # server  app4 <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">5004</span> check<br><br><br></code></pre></td></tr></table></figure><h3 id="2-启动HAProxy"><a href="#2-启动HAProxy" class="headerlink" title="2.启动HAProxy"></a>2.启动HAProxy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_102 ~]# haproxy -f /etc/haproxy/haproxy.cfg <br></code></pre></td></tr></table></figure><ul><li>使用 navicat 测试 haproxy  5000 端口 (需要输入该主机上mycat的密码)</li></ul><p>这样修改 haproxy 配置文件就可以消除警告信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs xml">#---------------------------------------------------------------------<br># Example configuration for a possible web application.  See the<br># full configuration options online.<br>#<br>#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt<br>#<br>#---------------------------------------------------------------------<br><br>#---------------------------------------------------------------------<br># Global settings<br>#---------------------------------------------------------------------<br>global<br>    # to have these messages end up in /var/log/haproxy.log you will<br>    # need to:<br>    #<br>    # 1) configure syslog to accept network log events.  This is done<br>    #    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in<br>    #    /etc/sysconfig/syslog<br>    #<br>    # 2) configure local2 events to go to the /var/log/haproxy.log<br>    #   file. A line like the following can be added to<br>    #   /etc/sysconfig/syslog<br>    #<br>    #    local2.*                       /var/log/haproxy.log<br>    #<br>    log         127.0.0.1 local2<br><br>    chroot      /var/lib/haproxy<br>    pidfile     /var/run/haproxy.pid<br>    maxconn     4000<br>    user        haproxy<br>    group       haproxy<br>    daemon<br><br>    # turn on stats unix socket<br>    stats socket /var/lib/haproxy/stats<br><br>#---------------------------------------------------------------------<br># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will<br># use if not designated in their block<br>#---------------------------------------------------------------------<br>defaults<br>    mode                    tcp<br>    log                     global<br>    option                  tcplog<br>    option                  dontlognull<br>    # option http-server-close<br>    # option forwardfor       except 127.0.0.0/8<br>    option                  redispatch<br>    retries                 3<br>    timeout http-request    10s<br>    timeout queue           1m<br>    timeout connect         10s<br>    timeout client          1m<br>    timeout server          1m<br>    timeout http-keep-alive 10s<br>    timeout check           10s<br>    maxconn                 3000<br><br>#---------------------------------------------------------------------<br># main frontend which proxys to the backends<br>#---------------------------------------------------------------------<br>frontend  main *:5000<br>    # acl url_static       path_beg       -i /static /images /javascript /stylesheets<br>    # acl url_static       path_end       -i .jpg .gif .png .css .js<br><br>    # use_backend static          if url_static<br>    default_backend             app<br><br>#---------------------------------------------------------------------<br># static backend for serving up images, stylesheets and such<br>#---------------------------------------------------------------------<br>backend static<br>    balance     roundrobin<br>    server      static 127.0.0.1:4331 check<br><br>#---------------------------------------------------------------------<br># round robin balancing between the various backends<br>#---------------------------------------------------------------------<br>backend app<br>    balance     roundrobin<br>    server  app1 192.168.198.100:8066 check<br>    server  app2 192.168.198.101:8066 check<br>    # server  app3 127.0.0.1:5003 check<br>    # server  app4 127.0.0.1:5004 check<br><br><br></code></pre></td></tr></table></figure><h2 id="3-3、keepAlived环境配置"><a href="#3-3、keepAlived环境配置" class="headerlink" title="3.3、keepAlived环境配置"></a>3.3、keepAlived环境配置</h2><h3 id="1-安装keepAlived"><a href="#1-安装keepAlived" class="headerlink" title="1.安装keepAlived"></a>1.安装keepAlived</h3><blockquote><p>通过 yum 方式安装 keepAlived</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum search keepalived<br>[root@centos_7_100 mycat]# yum install -y keepalived.x86_64<br></code></pre></td></tr></table></figure><h3 id="2-keepAlived配置文件"><a href="#2-keepAlived配置文件" class="headerlink" title="2.keepAlived配置文件"></a>2.keepAlived配置文件</h3><blockquote><p>192.168.198.100   keepAlived 配置文件修改 (主节点)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>     test<span class="hljs-meta">@qq</span>.com<br>   &#125;<br>   # notification_email_from Alexandre.Cassen<span class="hljs-meta">@firewall</span>.loc<br>   # smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   # smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id node1<br>   # vrrp_skip_check_adv_addr<br>   # vrrp_strict<br>   # vrrp_garp_interval <span class="hljs-number">0</span><br>   # vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ens33</span></span><br><span class="hljs-class">    <span class="hljs-title">virtual_router_id</span> 51</span><br><span class="hljs-class">    <span class="hljs-title">priority</span> 100</span><br><span class="hljs-class">    <span class="hljs-title">advert_int</span> 1</span><br><span class="hljs-class">    <span class="hljs-title">authentication</span> </span>&#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span><br>    &#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span> <span class="hljs-number">6000</span> &#123;<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span> <span class="hljs-number">5000</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        TCP_CHECK &#123;<br>            connect_port <span class="hljs-number">5000</span><br>connect_timeout <span class="hljs-number">10000</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>192.168.198.101  keepAlived 配置文件修改 (备节点)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>     test<span class="hljs-meta">@qq</span>.com<br>   &#125;<br>   # notification_email_from Alexandre.Cassen<span class="hljs-meta">@firewall</span>.loc<br>   # smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   # smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id node2<br>   # vrrp_skip_check_adv_addr<br>   # vrrp_strict<br>   # vrrp_garp_interval <span class="hljs-number">0</span><br>   # vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ens33</span></span><br><span class="hljs-class">    <span class="hljs-title">virtual_router_id</span> 51</span><br><span class="hljs-class">    <span class="hljs-title">priority</span> 99</span><br><span class="hljs-class">    <span class="hljs-title">advert_int</span> 1</span><br><span class="hljs-class">    <span class="hljs-title">authentication</span> </span>&#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span><br>    &#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span> <span class="hljs-number">6000</span> &#123;<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.101</span> <span class="hljs-number">5000</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        TCP_CHECK &#123;<br>            connect_port <span class="hljs-number">5000</span><br>connect_timeout <span class="hljs-number">10000</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-启动keepAlived"><a href="#3-启动keepAlived" class="headerlink" title="3.启动keepAlived"></a>3.启动keepAlived</h3><blockquote><p>[root@centos_7_100 mycat]# keepalived -f /etc/keepalived/keepalived.conf </p></blockquote><h3 id="4-小问题"><a href="#4-小问题" class="headerlink" title="4.小问题"></a>4.小问题</h3><blockquote><p>这样配置完 keepAlived 在其中一台keepAlived 宕机的情况下会自动切换,但是 keepAlived 连接的服务宕机,keepAlived不会进行切换,会一直报错</p></blockquote><ul><li><p>解决办法：写一个脚本，后续连接的服务宕机之后,关掉当前的keepAlived服务，让keepAlived服务被动切换</p></li><li><p>需要使用 killall命令 该命令不存在则用yum 进行安装即可</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 mycat]# killall -0 haproxy<br>-bash: killall: 未找到命令<br>[root@centos_7_100 mycat]# yum search killall<br>已加载插件：fastestmirror<br>Loading mirror speeds from cached hostfile<br> * base: mirrors.aliyun.com<br> * extras: mirrors.aliyun.com<br> * updates: mirrors.aliyun.com<br>========================================================================= 匹配：killall =========================================================================<br>psmisc.x86_64 : Utilities for managing processes on your system<br>[root@centos_7_100 mycat]# yum install -y psmisc.x86_64<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 mycat]# killall -0 haproxy<br>[root@centos_7_100 mycat]# echo $?<br>0<br><span class="hljs-meta">#</span><span class="bash"> killall 命令只是用来探测相关服务,不会终止掉相关服务</span><br></code></pre></td></tr></table></figure><h3 id="5-加入检测haproxy状态的脚本"><a href="#5-加入检测haproxy状态的脚本" class="headerlink" title="5.加入检测haproxy状态的脚本"></a>5.加入检测haproxy状态的脚本</h3><p>keepAlived配置文件 /etc/keepalived/keepalived.conf </p><p>192.168.198.100 keepAlived 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>     test<span class="hljs-meta">@qq</span>.com<br>   &#125;<br>   # notification_email_from Alexandre.Cassen<span class="hljs-meta">@firewall</span>.loc<br>   # smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   # smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id node1<br>   # vrrp_skip_check_adv_addr<br>   # vrrp_strict<br>   # vrrp_garp_interval <span class="hljs-number">0</span><br>   # vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br><br>vrrp_script chk_haproxy &#123;<br>script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span><br>interval  <span class="hljs-number">2</span><br>&#125;<br><br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ens33</span></span><br><span class="hljs-class">    <span class="hljs-title">virtual_router_id</span> 51</span><br><span class="hljs-class">    <span class="hljs-title">priority</span> 100</span><br><span class="hljs-class">    <span class="hljs-title">advert_int</span> 1</span><br><span class="hljs-class">    <span class="hljs-title">authentication</span> </span>&#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span><br>    &#125;<br>track_script &#123;<br>chk_haproxy<br>&#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span> <span class="hljs-number">6000</span> &#123;<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span> <span class="hljs-number">5000</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>keepAlived配置文件 /etc/keepalived/keepalived.conf </p><p>192.168.198.101 keepAlived 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>     test<span class="hljs-meta">@qq</span>.com<br>   &#125;<br>   # notification_email_from Alexandre.Cassen<span class="hljs-meta">@firewall</span>.loc<br>   # smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   # smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id node2<br>   # vrrp_skip_check_adv_addr<br>   # vrrp_strict<br>   # vrrp_garp_interval <span class="hljs-number">0</span><br>   # vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br>vrrp_script chk_haproxy &#123;<br>script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span><br>interval  <span class="hljs-number">2</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ens33</span></span><br><span class="hljs-class">    <span class="hljs-title">virtual_router_id</span> 51</span><br><span class="hljs-class">    <span class="hljs-title">priority</span> 99</span><br><span class="hljs-class">    <span class="hljs-title">advert_int</span> 1</span><br><span class="hljs-class">    <span class="hljs-title">authentication</span> </span>&#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>  virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span><br>    &#125;<br>    track_script &#123;<br>chk_haproxy<br>&#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.99</span> <span class="hljs-number">6000</span> &#123;<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.101</span> <span class="hljs-number">5000</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="四、Springboot整合Mycat"><a href="#四、Springboot整合Mycat" class="headerlink" title="四、Springboot整合Mycat"></a>四、Springboot整合Mycat</h1><h2 id="4-1、基本环境"><a href="#4-1、基本环境" class="headerlink" title="4.1、基本环境"></a>4.1、基本环境</h2><p>192.168.198.100    192.168.198.101 两台服务器是主从关系，100 是主节点 101 是从节点</p><blockquote><p>对数据库进行分库分表</p><p>只拆分订单相关的三张表 order order_items order_status</p></blockquote><h2 id="4-2、分片规则"><a href="#4-2、分片规则" class="headerlink" title="4.2、分片规则"></a>4.2、分片规则</h2><blockquote><p>分片字段要选择 userId 这样一个用户的订单会进入到一个节点，不会分布到多个节点</p><p>auto-sharding-long 只能用户整型变量</p></blockquote><p>一致性Hash</p><p><img src="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.assets/image-20220101114327186.png" alt="image-20220101114327186"></p><blockquote><p>在 rule.xml 配置分片选择的字段</p><tableRule name="sharding-by-murmur">        <rule>            <columns>user_id</columns>            <algorithm>murmur</algorithm>        </rule>    </tableRule><p><function name="murmur"        class="io.mycat.route.function.PartitionByMurmurHash"><br>        <property name="seed">0</property><!-- 默认是0 --><br>        <property name="count">2</property><!-- 要分片的数据库节点数量，必须指定，否则没法分片 --><br>        <property name="virtualBucketTimes">160</property><!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 --><br>        <!-- <property name="weightMapFile">weightMapFile</property> 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --><br>        <!-- <property name="bucketMapPath">/etc/mycat/bucketMapPath</property>             用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --><br>    </function></p></blockquote><blockquote><p>mycat 中 作为选择数据库分片的字段不能进行更新</p><p>有子表配置时，先插入主表，才能进行子表的插入</p></blockquote><h1 id="五、Sharding-Jdbc使用"><a href="#五、Sharding-Jdbc使用" class="headerlink" title="五、Sharding-Jdbc使用"></a>五、Sharding-Jdbc使用</h1><h2 id="5-0、使用Mybatis-generator"><a href="#5-0、使用Mybatis-generator" class="headerlink" title="5.0、使用Mybatis-generator"></a>5.0、使用Mybatis-generator</h2><h3 id="1、pom-xml-中加入配置"><a href="#1、pom-xml-中加入配置" class="headerlink" title="1、pom.xml 中加入配置"></a>1、pom.xml 中加入配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、引入配置文件"><a href="#2、引入配置文件" class="headerlink" title="2、引入配置文件"></a>2、引入配置文件</h3><blockquote><p>generatorConfig.xml</p><p>修改配置</p><ul><li><p>connectionURL=”jdbc:mysql://192.168.198.101:3306/shard_order?serverTimezone=Asia/Shanghai&amp;useSSL=false”</p></li><li><javaModelGenerator targetPackage="com.tho.shardingjdbcdemo.model" targetProject="src\main\java"></li><li><sqlMapGenerator targetPackage="mybatis"  targetProject="src\main\resources"></li><li><javaClientGenerator type="XMLMAPPER" targetPackage="com.tho.shardingjdbcdemo.dao"  targetProject="src\main\java"></li><li><p>```xml</p>  <table schema="shard_order" tableName="t_order_1" domainObjectName="Order" ></table>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>```xml<br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MysqlTables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.198.101:3306/shard_order?serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span> &gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.tho.shardingjdbcdemo.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src\main\java&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mybatis&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src\main\resources&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.tho.shardingjdbcdemo.dao&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src\main\java&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">&quot;shard_order&quot;</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_order_1&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Order&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5-1、sharding-jdbc简介"><a href="#5-1、sharding-jdbc简介" class="headerlink" title="5.1、sharding-jdbc简介"></a>5.1、sharding-jdbc简介</h2><ul><li>Sharing-Jdbc 是一个客户端代理模式,不需要单独启动服务，直接使用 jar 包即可</li><li>开源 分布式关系型数据库中间件</li><li>目前已经进入Apache 孵化器</li><li>定位为轻量级java框架，以jar包提供服务</li><li>可以理解为增强版 jdbc 驱动</li><li>完全兼容各种 ORM 框架</li></ul><p><img src="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.assets/image-20220101152521852.png" alt="image-20220101152521852"></p><blockquote><p>提供了四种配置方式</p><ul><li>Java API ，Yaml，SpringBoot 和 Spring 命名空间</li></ul></blockquote><blockquote><p>与 Mycat 的区别</p><ul><li>Mycat 是服务端代理 Sharding-Jdbc 是客户端代理</li><li>Mycat 不支持同一库内水平切分，Sharding-Jdbc 支持</li></ul></blockquote><h2 id="5-2、Sharing-Jdbc分片表"><a href="#5-2、Sharing-Jdbc分片表" class="headerlink" title="5.2、Sharing-Jdbc分片表"></a>5.2、Sharing-Jdbc分片表</h2><blockquote><p>环境配置 两个数据库 </p><p>数据库1 (两个表) </p><ul><li>t_order_1 </li><li>t_order_2</li></ul><p>数据库2 (两个表)</p><ul><li>t_order_1</li><li>t_order_2</li></ul><p>根据 userId 区分不同数据库 (奇偶区分)</p><p>根据 id 区分不同表 (奇偶区分)</p></blockquote><h2 id="5-3、SpringBoot整合ShardingJdbc"><a href="#5-3、SpringBoot整合ShardingJdbc" class="headerlink" title="5.3、SpringBoot整合ShardingJdbc"></a>5.3、SpringBoot整合ShardingJdbc</h2><h3 id="1、maven依赖"><a href="#1、maven依赖" class="headerlink" title="1、maven依赖"></a>1、maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/sharding-jdbc-spring-boot-starter --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-RC2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、配置文件配置"><a href="#2、配置文件配置" class="headerlink" title="2、配置文件配置"></a>2、配置文件配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置真实数据源</span><br><span class="hljs-meta">spring.shardingsphere.datasource.names</span>=<span class="hljs-string">ds1,ds2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 1 个数据源</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds1.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds1.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds1.jdbcUrl</span>=<span class="hljs-string">jdbc:mysql://192.168.198.101:3306/shard_order</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds1.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds1.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 2 个数据源</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds2.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds2.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds2.jdbcUrl</span>=<span class="hljs-string">jdbc:mysql://192.168.198.102:3306/sharding-order</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds2.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.shardingsphere.datasource.ds2.password</span>=<span class="hljs-string">123456</span><br><br><span class="hljs-meta">spring.shardingsphere.sharding.tables.t_order.actual-data-nodes</span>=<span class="hljs-string">ds$-&gt;&#123;1..2&#125;.t_order_$-&gt;&#123;1..2&#125;</span><br><span class="hljs-meta">spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column</span>=<span class="hljs-string">user_id</span><br><span class="hljs-meta">spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression</span>=<span class="hljs-string">ds$-&gt;&#123;user_id % 2 + 1&#125; # 根据奇偶选择分片时注意数据库和表的名称</span><br><span class="hljs-meta">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column</span>=<span class="hljs-string">id</span><br><span class="hljs-meta">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression</span>=<span class="hljs-string">t_order_$-&gt;&#123;id % 2 + 1&#125;</span><br><br><span class="hljs-meta">mybatis.mapper-locations</span>=<span class="hljs-string">/mybatis/*.xml</span><br><br><br></code></pre></td></tr></table></figure><h3 id="3、mapper-文件要修改，要改成逻辑表的名称"><a href="#3、mapper-文件要修改，要改成逻辑表的名称" class="headerlink" title="3、mapper 文件要修改，要改成逻辑表的名称"></a>3、mapper 文件要修改，要改成逻辑表的名称</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;countByExample&quot;</span> parameterType=<span class="hljs-string">&quot;com.tho.shardingjdbcdemo.model.OrderExample&quot;</span> resultType=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;<br> <br>  <span class="hljs-comment">// 本来是 select count(*) from t_order_1 (由mybatis-generator 生成的mapper) </span><br>  <span class="hljs-function">select <span class="hljs-title">count</span><span class="hljs-params">(*)</span> from t_order</span><br><span class="hljs-function">  &lt;<span class="hljs-keyword">if</span> test</span>=<span class="hljs-string">&quot;_parameter != null&quot;</span>&gt;<br>    &lt;include refid=<span class="hljs-string">&quot;Example_Where_Clause&quot;</span> /&gt;<br>  &lt;/<span class="hljs-keyword">if</span>&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure></blockquote><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.shardingjdbcdemo;<br><br><span class="hljs-keyword">import</span> com.tho.shardingjdbcdemo.dao.OrderMapper;<br><span class="hljs-keyword">import</span> com.tho.shardingjdbcdemo.model.Order;<br><span class="hljs-keyword">import</span> com.tho.shardingjdbcdemo.model.OrderExample;<br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = ShardingJdbcDemoApplication.class)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShardingJdbcDemoApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shardingJdbcInsertTest</span><span class="hljs-params">()</span> </span>&#123;<br>        Order order = <span class="hljs-keyword">new</span> Order();<br>        order.setId(<span class="hljs-number">2</span>);<br>        order.setUserId(<span class="hljs-number">1</span>);<br>        order.setOrderAmount(<span class="hljs-number">2L</span>);<br>        order.setOrderStatus(<span class="hljs-number">2</span>);<br><br>        orderMapper.insert(order);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shardingJdbcQueryTest</span><span class="hljs-params">()</span> </span>&#123;<br>        OrderExample orderExample = <span class="hljs-keyword">new</span> OrderExample();<br>        OrderExample.Criteria criteria = orderExample.createCriteria().andIdEqualTo(<span class="hljs-number">2</span>).andUserIdEqualTo(<span class="hljs-number">1</span>);<br><br>        List&lt;Order&gt; orders = orderMapper.selectByExample(orderExample);<br>        orders.forEach(o -&gt; System.out.println(o.getId() +  <span class="hljs-string">&quot;---&quot;</span>+ o.getUserId()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、mybatis-generator生成的通用mapper"><a href="#5、mybatis-generator生成的通用mapper" class="headerlink" title="5、mybatis-generator生成的通用mapper"></a>5、mybatis-generator生成的通用mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参数是 对应类的 Example 类 不是 Criteria 类</span><br><span class="hljs-function">List&lt;Order&gt; <span class="hljs-title">selectByExample</span><span class="hljs-params">(OrderExample example)</span></span>; <br></code></pre></td></tr></table></figure><h2 id="5-4、ShardingJdbc全局表"><a href="#5-4、ShardingJdbc全局表" class="headerlink" title="5.4、ShardingJdbc全局表"></a>5.4、ShardingJdbc全局表</h2><blockquote><p>环境准备</p><ul><li>各个数据库分片建立 全局表 </li><li>配置文件修改 加入下面一行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.shardingsphere.sharding.broadcast-tables=area<br></code></pre></td></tr></table></figure></blockquote><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shardingJdbcGlobalTest</span><span class="hljs-params">()</span> </span>&#123;<br>    Area area = <span class="hljs-keyword">new</span> Area();<br>    area.setId(<span class="hljs-number">1</span>);<br>    area.setName(<span class="hljs-string">&quot;北京&quot;</span>);<br>    areaMapper.insert(area);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>启动测试方法，两张表都加入了 插入的数据</p></blockquote><h2 id="5-5、ShardingJdbc子表"><a href="#5-5、ShardingJdbc子表" class="headerlink" title="5.5、ShardingJdbc子表"></a>5.5、ShardingJdbc子表</h2><h2 id="5-6、ShardingJdbc-读写分离"><a href="#5-6、ShardingJdbc-读写分离" class="headerlink" title="5.6、ShardingJdbc 读写分离"></a>5.6、ShardingJdbc 读写分离</h2>]]></content>
    
    
    <categories>
      
      <category>分库分表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分库分表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁</title>
    <link href="/2021/12/26/Zookeeper/"/>
    <url>/2021/12/26/Zookeeper/</url>
    
    <content type="html"><![CDATA[<p>SpringCloud基础组件</p><p>分布式锁相关</p><span id="more"></span><h1 id="一、分布式锁"><a href="#一、分布式锁" class="headerlink" title="一、分布式锁"></a>一、分布式锁</h1><h2 id="2-1、超卖问题"><a href="#2-1、超卖问题" class="headerlink" title="2.1、超卖问题"></a>2.1、超卖问题</h2><h3 id="1-超卖现象一"><a href="#1-超卖现象一" class="headerlink" title="1.超卖现象一"></a>1.超卖现象一</h3><p>==某商品库存10件，结果卖出了15件==</p><blockquote><p>超卖现象:解决办法</p><ul><li>扣减库存不在程序中进行,而是通过数据库</li><li>向数据库传递库存增量，扣减1个库存，增量为 -1</li><li>在数据库 update 语句计算库存，通过update 行锁解决并发</li></ul></blockquote><blockquote><p>不使用java语句进行商品数量的扣减,而是使用sql的更新语句来进行库存的扣减</p><ul><li>计算好库存,更新物品库存 (会产生超卖问题)</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span>update id<span class="hljs-operator">=</span>&quot;updateProductCount&quot;<span class="hljs-operator">&gt;</span><br>      update product<br>      <span class="hljs-keyword">set</span> count <span class="hljs-operator">=</span> count <span class="hljs-operator">-</span> #&#123;purchaseProductNum,jdbcType<span class="hljs-operator">=</span><span class="hljs-type">INTEGER</span>&#125;,<br>      update_user <span class="hljs-operator">=</span> #&#123;updateUser,jdbcType<span class="hljs-operator">=</span><span class="hljs-type">VARCHAR</span>&#125;,<br>       update_time <span class="hljs-operator">=</span> #&#123;updateTime,jdbcType<span class="hljs-operator">=</span><span class="hljs-type">TIME</span>&#125;<br>      <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> #&#123;id,jdbcType<span class="hljs-operator">=</span><span class="hljs-type">INTEGER</span>&#125;<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>update<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>最终问题:商品库存可能成为负值</p></blockquote><h3 id="2-超卖现象二"><a href="#2-超卖现象二" class="headerlink" title="2.超卖现象二"></a>2.超卖现象二</h3><p>==商品库存减为了负数==</p><blockquote><p>产生原因：并发校验库存,造成库存充足的假想,update更新库存,导致库存成为负数</p></blockquote><blockquote><p>解决办法一：更新了库存之后,进行库存的校验,如果库存为负数,抛出异常,回滚事务,放弃此线程本次操作</p><p>解决办法二：校验库存,扣减库存统一加锁,使之成为原子性操作,并发时,线程只有获得锁才能校验,扣减库存,扣减库存后释放锁，确保库存不会扣除负数</p></blockquote><h2 id="2-2、使用锁解决超卖现象"><a href="#2-2、使用锁解决超卖现象" class="headerlink" title="2.2、使用锁解决超卖现象"></a>2.2、使用锁解决超卖现象</h2><h3 id="1-使用Synchronized锁"><a href="#1-使用Synchronized锁" class="headerlink" title="1.使用Synchronized锁"></a>1.使用Synchronized锁</h3><blockquote><p>方式一：给方法加上Synchronized 关键字</p><p>方式二：使用Synchronized 代码块</p></blockquote><h4 id="方式一-Synchronized-关键字"><a href="#方式一-Synchronized-关键字" class="headerlink" title="方式一:Synchronized 关键字"></a>方式一:Synchronized 关键字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Integer <span class="hljs-title">createOrder</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>问题：库存只有1个，最后却生成了两笔订单,最终商品库存变为-1</p><p>@Transactional 注解,第一个线程执行完商品的库存扣减,事务没有提交,数据库没有更新,紧接着第二个线程进来,查询商品库存,仍旧是1,还可以生成订单,最后两个库存扣减sql作为同一个事务,进行提交,商品库存减为负数</p></blockquote><h4 id="方式一-解决办法"><a href="#方式一-解决办法" class="headerlink" title="方式一:解决办法"></a>方式一:解决办法</h4><blockquote><p>使用synchronized锁包裹事务,只有当事务提交之后,锁才会释放,交给下一个线程来执行方法中的内容</p><p>成功解决问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> PlatformTransactionManager platformTransactionManager;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TransactionDefinition transactionDefinition;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Integer <span class="hljs-title">createOrder</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>  Product product = <span class="hljs-keyword">null</span>;<br>  <span class="hljs-comment">// 定义一个事务</span><br>        TransactionStatus transaction = platformTransactionManager.getTransaction(transactionDefinition);<br>        <span class="hljs-comment">// 具体的业务流程</span><br>  product = productMapper.selectByPrimaryKey(purchaseProductId);<br>            <span class="hljs-keyword">if</span> (product==<span class="hljs-keyword">null</span>)&#123;<br>              <span class="hljs-comment">// 事务回滚</span><br>                platformTransactionManager.rollback(transaction);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;购买商品：&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;不存在&quot;</span>);<br>            &#125;<br>  <span class="hljs-comment">//校验库存</span><br>        <span class="hljs-keyword">if</span> (purchaseProductNum &gt; currentCount)&#123;<br>          <span class="hljs-comment">// 事务的回滚</span><br>            platformTransactionManager.rollback(transaction);<br>             <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;商品&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;仅剩&quot;</span>+currentCount+<span class="hljs-string">&quot;件，无法购买&quot;</span>);<br>        &#125;<br>  <span class="hljs-comment">// 提交事务</span><br>        platformTransactionManager.commit(transaction);<br>        <span class="hljs-keyword">return</span> order.getId();<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="方式二：Synchronized块"><a href="#方式二：Synchronized块" class="headerlink" title="方式二：Synchronized块"></a>方式二：Synchronized块</h4><blockquote><p>对象锁：每一个对象有一个其自身的对象锁</p><p>类锁：只有一个，该类实例化的所有对象共有一个类锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一种写法(对象锁)</span><br><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            <br>&#125;<br><span class="hljs-comment">// 放在方法内部,该类由spring创建,单例模式,获得了该对象的锁才能执行其中的方法</span><br><br><span class="hljs-comment">// 第二种写法(对象锁)</span><br>Object object = <span class="hljs-keyword">new</span> Object();<br><span class="hljs-keyword">synchronized</span> (object) &#123;<br><br>&#125;<br><br><span class="hljs-comment">// 第三种写法(类锁)</span><br><span class="hljs-comment">// 避免事务的嵌套</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>          <span class="hljs-comment">// 创建事务</span><br>            TransactionStatus transaction1 = platformTransactionManager.getTransaction(transactionDefinition);<br>            product = productMapper.selectByPrimaryKey(purchaseProductId);<br>            <span class="hljs-keyword">if</span> (product==<span class="hljs-keyword">null</span>)&#123;<br>                platformTransactionManager.rollback(transaction1);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;购买商品：&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;不存在&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//商品当前库存</span><br>            Integer currentCount = product.getCount();<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;库存数：&quot;</span>+currentCount);<br>            <span class="hljs-comment">//校验库存</span><br>            <span class="hljs-keyword">if</span> (purchaseProductNum &gt; currentCount)&#123;<br>                platformTransactionManager.rollback(transaction1);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;商品&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;仅剩&quot;</span>+currentCount+<span class="hljs-string">&quot;件，无法购买&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 使用数据库的update行锁解决超卖问题</span><br>            productMapper.updateProductCount(purchaseProductNum,<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-keyword">new</span> Date(),product.getId());<br>            platformTransactionManager.commit(transaction1);<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="2-使用ReentrantLock锁"><a href="#2-使用ReentrantLock锁" class="headerlink" title="2.使用ReentrantLock锁"></a>2.使用ReentrantLock锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">createOrder</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Product product = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">// 加锁操作 , 当代码中有异常抛出时,要释放锁,否则异常抛出后,程序执行结束,但是锁还没有被释放,会导致之后的线程永远也拿不到锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            TransactionStatus transaction1 = platformTransactionManager.getTransaction(transactionDefinition);<br>            product = productMapper.selectByPrimaryKey(purchaseProductId);<br>            <span class="hljs-keyword">if</span> (product==<span class="hljs-keyword">null</span>)&#123;<br>                platformTransactionManager.rollback(transaction1);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;购买商品：&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;不存在&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//商品当前库存</span><br>            Integer currentCount = product.getCount();<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;库存数：&quot;</span>+currentCount);<br>            <span class="hljs-comment">//校验库存</span><br>            <span class="hljs-keyword">if</span> (purchaseProductNum &gt; currentCount)&#123;<br>                platformTransactionManager.rollback(transaction1);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;商品&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;仅剩&quot;</span>+currentCount+<span class="hljs-string">&quot;件，无法购买&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 使用数据库的update行锁解决超卖问题</span><br>            productMapper.updateProductCount(purchaseProductNum,<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-keyword">new</span> Date(),product.getId());<br>            platformTransactionManager.commit(transaction1);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">// 解锁</span><br>            lock.unlock();<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、单体应用锁局限性"><a href="#2-3、单体应用锁局限性" class="headerlink" title="2.3、单体应用锁局限性"></a>2.3、单体应用锁局限性</h2><p>通过之前的并发编程的学习，对JAVA中的锁有了深刻的理解。前面内容中讲到的锁都是有JDK官方提供的锁的解决方案，也就是说这些锁只能在一个JVM进程内有效，我们把这种锁叫做<strong>单体应用锁</strong></p><blockquote><p>如上图所示，在整个系统架构中，存在两个Tomcat，每个Tomcat是一个JVM。在进行秒杀业务的时候，由于大家都在抢购秒杀商品，大量的请求同时到达系统，通过Nginx分发到两个Tomcat上。我们通过一个极端的案例场景，可以更好地理解单体应用锁的局限性。假如，秒杀商品的数量只有1个，这时，这些大量的请求当中，只有一个请求可以成功的抢到这个商品，这就需要在扣减库存的方法上加锁，扣减库存的动作只能一个一个去执行，而不能同时去执行，如果同时执行，这1个商品可能同时被多个人抢到，从而产生超卖现象。加锁之后，扣减库存的动作一个一个去执行，凡是将库存扣减为负数的，都抛出异常，提示该用户没有抢到商品。通过加锁看似解决了秒杀的问题，但是事实上真                    的是这样吗？</p><p>我们看到系统中存在两个Tomcat，我们加的锁是JDK提供的锁，这种锁只能在一个JVM下起作用，也就是在一个Tomcat内是没有问题的。当存在两个或两个以上的Tomcat时，大量的并发请求分散到不同的Tomcat上，在每一个Tomcat中都可以防止并发的产生，但是在多个Tomcat之间，每个Tomcat中获得锁的这个请求，又产生了并发，从而产生超卖现象。这也就是<strong>单体应用锁的局限性，它只能在一个JVM内加锁，而不能从这个应用层面去加锁。</strong></p><p>那么这个问题如何解决呢？这就需要使用分布式锁了，在整个应用层面去加锁。什么是分布式锁呢？我们怎么去使用分布式锁呢？</p></blockquote><h3 id="1-分布式锁"><a href="#1-分布式锁" class="headerlink" title="1.分布式锁"></a>1.分布式锁</h3><blockquote><p>在说分布式锁之前，我们看一看单体应用锁的特点，单体应用锁是在一个JVM进程内有效，无法跨JVM、跨进程。那么分布式锁的定义就出来了，分布式锁就是可以跨越多个JVM、跨越多个进程的锁，这种锁就叫做分布式锁。</p></blockquote><p><img src="Zookeeper.assets/image-20211214163728776.png" alt="image-20211214163728776"></p><blockquote><p>在上图中，由于Tomcat是由Java启动的，所以每个Tomcat可以看成一个JVM，JVM内部的锁是无法跨越多个进程的。所以，我们要实现分布式锁，我们只能在这些JVM之外去寻找，通过其他的组件来实现分布式锁。系统的架构如图所示</p></blockquote><p><img src="Zookeeper.assets/image-20211214163747172.png" alt="image-20211214163747172"></p><blockquote><p>两个Tomcat通过第三方的组件实现跨JVM、跨进程的分布式锁。这就是分布式锁的解决思路，找到所有JVM可以共同访问的第三方组件，通过第三方组件实现分布式锁。</p></blockquote><h3 id="2-分布式锁解决方案"><a href="#2-分布式锁解决方案" class="headerlink" title="2.分布式锁解决方案"></a>2.分布式锁解决方案</h3><p>分布式锁都是通过第三方组件来实现的，目前比较流行的分布式锁的解决方案有：</p><ul><li>数据库，通过数据库可以实现分布式锁，但是在高并发的情况下对数据库压力较大，所以很少使用。</li><li>Redis，借助Redis也可以实现分布式锁，而且Redis的Java客户端种类很多，使用的方法也不尽相同。</li><li>Zookeeper，Zookeeper也可以实现分布式锁，同样Zookeeper也存在多个Java客户端，使用方法也不相同。</li></ul><h2 id="2-4、基于数据库实现分布式锁"><a href="#2-4、基于数据库实现分布式锁" class="headerlink" title="2.4、基于数据库实现分布式锁"></a>2.4、基于数据库实现分布式锁</h2><h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h3><ul><li>多个线程,多个进程访问共同组件数据库</li><li>通过select … for update 访问同一条数据</li><li>for update 锁定某一行数据,其它线程只能等待</li></ul><blockquote><p>两线程同时对一行数据加锁,两线程会争抢锁,抢到了锁的线程才能执行下去</p></blockquote><h3 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="2.优缺点"></a>2.优缺点</h3><ul><li>优点：简单方便,易于理解，易于操作</li><li>缺点：并发量大时，对数据库压力较大</li><li>建议：作为锁的数据库和业务数据库分开</li></ul><h2 id="2-5、基于Redis的Setnx实现分布式锁"><a href="#2-5、基于Redis的Setnx实现分布式锁" class="headerlink" title="2.5、基于Redis的Setnx实现分布式锁"></a>2.5、基于Redis的Setnx实现分布式锁</h2><h3 id="1-实现原理"><a href="#1-实现原理" class="headerlink" title="1.实现原理"></a>1.实现原理</h3><blockquote><ul><li>Redis是单线程执行,即使多线程的请求,最终还是单线程顺序执行,借助Redis这个特性,其相关语句的操作都是原子性的</li><li>利用NX的原子性,多个线程并发时，只有一个线程可以设置成功</li><li>设置成功即获得锁，可以执行后续的业务处理</li><li>如果出现了异常，过了锁的有效期，锁自动释放</li></ul></blockquote><ul><li>获取锁的Redis命令</li><li>SET resource_name my_random_value NX PX 30000<ul><li>resource_name ： 资源名称，可根据不同的业务区分不同的锁</li><li>my_random_value: 随机值,每个线程的随机值都不相同，用于释放锁时的校验</li><li>NX ： key不存时设置成功,key存在则设置失败</li><li>PX：自动失效时间,出现异常情况，锁可以过期失效(也就是自动释放锁)</li></ul></li></ul><h3 id="2-释放锁"><a href="#2-释放锁" class="headerlink" title="2.释放锁"></a>2.释放锁</h3><blockquote><ul><li>使用redis的delete命令</li><li>释放锁校验之前设置的随机数,相同才能释放</li><li>释放锁的LUA脚本</li></ul></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&quot;get&quot;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&quot;del&quot;</span>, KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><img src="Zookeeper.assets/image-20211214221713182.png" alt="image-20211214221713182"></p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@RequestMapping(&quot;redisLock&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">redisLock</span><span class="hljs-params">()</span> </span>&#123;<br>    log.info(<span class="hljs-string">&quot;我进入了方法&quot;</span>);<br>    String key = <span class="hljs-string">&quot;redisKey&quot;</span>;<br>    String value = UUID.randomUUID().toString();<br>    RedisCallback&lt;Boolean&gt; redisCallback = connection -&gt; &#123;<br>        <span class="hljs-comment">// 设置NX</span><br>        RedisStringCommands.SetOption setOption = RedisStringCommands.SetOption.ifAbsent();<br>        <span class="hljs-comment">// 过期时间</span><br>        Expiration expiration = Expiration.seconds(<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">// 序列化key</span><br>        <span class="hljs-keyword">byte</span>[] redisKey = redisTemplate.getKeySerializer().serialize(key);<br>        <span class="hljs-comment">// 序列化value</span><br>        <span class="hljs-keyword">byte</span>[] redisValue = redisTemplate.getValueSerializer().serialize(value);<br>        <span class="hljs-comment">// 执行setNx操作</span><br>        Boolean result = connection.set(redisKey, redisValue, expiration, setOption);<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;;<br>    Boolean lock = (Boolean) redisTemplate.execute(redisCallback);<br>    <span class="hljs-keyword">if</span> (lock) &#123;<br>        log.info(<span class="hljs-string">&quot;我获得了锁&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行业务代码</span><br>          <br>          <br>            Thread.sleep(<span class="hljs-number">15000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放redis分布式锁</span><br>            String script = <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;, KEYS[1]) == ARGV[1] then\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  return redis.call(\&quot;del\&quot;, KEYS[1])\n&quot;</span> +<br>                    <span class="hljs-string">&quot;else\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  return 0\n&quot;</span> +<br>                    <span class="hljs-string">&quot;end&quot;</span>;<br>            RedisScript&lt;Boolean&gt; redisScript = RedisScript.of(script, Boolean.class);<br>            List&lt;String&gt; keys = Arrays.asList(key);<br>            Boolean result = (Boolean)redisTemplate.execute(redisScript, keys, value);<br>            log.info(<span class="hljs-string">&quot;释放锁的结果&quot;</span> + result);<br>        &#125;<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;方法执行完成&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;方法执行完成&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6、分布式锁解决定时任务重复问题"><a href="#2-6、分布式锁解决定时任务重复问题" class="headerlink" title="2.6、分布式锁解决定时任务重复问题"></a>2.6、分布式锁解决定时任务重复问题</h2><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><blockquote><p>定时任务执行之前先获取分布式锁,获得了分布式锁的任务才会执行定时任务</p></blockquote><h3 id="2、Redis分布式锁封装"><a href="#2、Redis分布式锁封装" class="headerlink" title="2、Redis分布式锁封装"></a>2、Redis分布式锁封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.distributelock.lock;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisStringCommands;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisCallback;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.RedisScript;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.types.Expiration;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AutoCloseable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-keyword">private</span> String value;<br>    <span class="hljs-comment">//单位：秒</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> expireTime;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedisLock</span><span class="hljs-params">(RedisTemplate redisTemplate,String key,<span class="hljs-keyword">int</span> expireTime)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>        <span class="hljs-keyword">this</span>.key = key;<br>        <span class="hljs-keyword">this</span>.expireTime=expireTime;<br>        <span class="hljs-keyword">this</span>.value = UUID.randomUUID().toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取分布式锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">getLock</span><span class="hljs-params">()</span></span>&#123;<br>        RedisCallback&lt;Boolean&gt; redisCallback = connection -&gt; &#123;<br>            <span class="hljs-comment">//设置NX</span><br>            RedisStringCommands.SetOption setOption = RedisStringCommands.SetOption.ifAbsent();<br>            <span class="hljs-comment">//设置过期时间</span><br>            Expiration expiration = Expiration.seconds(expireTime);<br>            <span class="hljs-comment">//序列化key</span><br>            <span class="hljs-keyword">byte</span>[] redisKey = redisTemplate.getKeySerializer().serialize(key);<br>            <span class="hljs-comment">//序列化value</span><br>            <span class="hljs-keyword">byte</span>[] redisValue = redisTemplate.getValueSerializer().serialize(value);<br>            <span class="hljs-comment">//执行setnx操作</span><br>            Boolean result = connection.set(redisKey, redisValue, expiration, setOption);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;;<br><br>        <span class="hljs-comment">//获取分布式锁</span><br>        Boolean lock = (Boolean)redisTemplate.execute(redisCallback);<br>        <span class="hljs-keyword">return</span> lock;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">unLock</span><span class="hljs-params">()</span> </span>&#123;<br>        String script = <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] then\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>                <span class="hljs-string">&quot;else\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>                <span class="hljs-string">&quot;end&quot;</span>;<br>        RedisScript&lt;Boolean&gt; redisScript = RedisScript.of(script,Boolean.class);<br>        List&lt;String&gt; keys = Arrays.asList(key);<br><br>        Boolean result = (Boolean)redisTemplate.execute(redisScript, keys, value);<br>        log.info(<span class="hljs-string">&quot;释放锁的结果：&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        unLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、Zookeeper分布式锁"><a href="#二、Zookeeper分布式锁" class="headerlink" title="二、Zookeeper分布式锁"></a>二、Zookeeper分布式锁</h1><h2 id="1、zookeeper基本概念"><a href="#1、zookeeper基本概念" class="headerlink" title="1、zookeeper基本概念"></a>1、zookeeper基本概念</h2><blockquote><p>基于 Zookeeper 的瞬时节点实现分布式锁</p></blockquote><p>==数据结构==</p><blockquote><p>zookeeper数据结构</p><p>一棵树 根节点 子节点</p></blockquote><p><img src="Zookeeper.assets/image-20211219171825749.png" alt="image-20211219171825749"></p><h2 id="2、Zookeeper环境搭建"><a href="#2、Zookeeper环境搭建" class="headerlink" title="2、Zookeeper环境搭建"></a>2、Zookeeper环境搭建</h2><p>后台端口改为了 63010</p><h3 id="1-1、下载zookeeper软件包"><a href="#1-1、下载zookeeper软件包" class="headerlink" title="1.1、下载zookeeper软件包"></a>1.1、下载zookeeper软件包</h3><p><a href="https://downloads.apache.org/zookeeper/zookeeper-3.6.3/">https://downloads.apache.org/zookeeper/zookeeper-3.6.3/</a></p><ul><li>这⾥使⽤的是 3.6.3 版，下载的是 apache-zookeeper-3.6.3-bin.tar.gz 压缩包，并将其放在 了 /root/workspace/software ⽬录下</li></ul><h3 id="1-2、解压并安装"><a href="#1-2、解压并安装" class="headerlink" title="1.2、解压并安装"></a>1.2、解压并安装</h3><ol><li> /usr/local/ 下创建 zookeeper ⽂件夹并进⼊</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 ~]# cd /usr/local<br>[root@centos_7_100 local]# mkdir zookeeper<br>[root@centos_7_100 local]# cd zookeeper<br><br></code></pre></td></tr></table></figure><ol start="2"><li>将 ZooKeeper 安装包解压到 /usr/local/zookeeper 中即可</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 zookeeper]# tar -zxvf /root/workspace/software/apache-zookeeper-3.6.3-bin.tar.gz -C ./<br><br></code></pre></td></tr></table></figure><p>解压完之后， /usr/local/zookeerper ⽬录中会出现⼀个 apache-zookeeper-3.6.1-bin 的⽬录</p><h3 id="1-3、创建DATA⽬录"><a href="#1-3、创建DATA⽬录" class="headerlink" title="1.3、创建DATA⽬录"></a>1.3、创建DATA⽬录</h3><p>直接在 /usr/local/zookeeper/apache-zookeeper-3.6.1-bin ⽬录中创建⼀个 data ⽬录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 zookeeper]# ll<br>总用量 0<br>drwxr-xr-x. 6 root root 133 12月  7 12:51 apache-zookeeper-3.6.3-bin<br>[root@centos_7_100 zookeeper]# cd apache-zookeeper-3.6.3-bin/<br>[root@centos_7_100 apache-zookeeper-3.6.3-bin]# ll<br>总用量 36<br>drwxr-xr-x. 2 esuser esuser  4096 4月   9 2021 bin<br>drwxr-xr-x. 2 esuser esuser    77 4月   9 2021 conf<br>drwxr-xr-x. 5 esuser esuser  4096 4月   9 2021 docs<br>drwxr-xr-x. 2 root   root    4096 12月  7 12:51 lib<br>-rw-r--r--. 1 esuser esuser 11358 4月   9 2021 LICENSE.txt<br>-rw-r--r--. 1 esuser esuser   432 4月   9 2021 NOTICE.txt<br>-rw-r--r--. 1 esuser esuser  1963 4月   9 2021 README.md<br>-rw-r--r--. 1 esuser esuser  3166 4月   9 2021 README_packaging.md<br>[root@centos_7_100 apache-zookeeper-3.6.3-bin]# mkdir data<br>[root@centos_7_100 apache-zookeeper-3.6.3-bin]# <br><br></code></pre></td></tr></table></figure><p>等下该 data ⽬录地址要配到 ZooKeeper 的配置⽂件中</p><h3 id="1-4、创建配置⽂件并修改"><a href="#1-4、创建配置⽂件并修改" class="headerlink" title="1.4、创建配置⽂件并修改"></a>1.4、创建配置⽂件并修改</h3><p>进⼊到 zookeeper 的 conf ⽬录，复制 zoo_sample.cfg 得到 zoo.cfg ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 apache-zookeeper-3.6.3-bin]# cd conf/<br>[root@centos_7_100 conf]# ll<br>总用量 12<br>-rw-r--r--. 1 esuser esuser  535 4月   9 2021 configuration.xsl<br>-rw-r--r--. 1 esuser esuser 3435 4月   9 2021 log4j.properties<br>-rw-r--r--. 1 esuser esuser 1148 4月   9 2021 zoo_sample.cfg<br>[root@centos_7_100 conf]# cp zoo_sample.cfg zoo.cfg<br>[root@centos_7_100 conf]# ll<br>总用量 16<br>-rw-r--r--. 1 esuser esuser  535 4月   9 2021 configuration.xsl<br>-rw-r--r--. 1 esuser esuser 3435 4月   9 2021 log4j.properties<br>-rw-r--r--. 1 root   root   1148 12月  7 12:53 zoo.cfg<br>-rw-r--r--. 1 esuser esuser 1148 4月   9 2021 zoo_sample.cfg<br></code></pre></td></tr></table></figure><p>修改配置⽂件 zoo.cfg ，将其中的 dataDir 修改为上⾯刚创建的 data ⽬录，其他选项可以按需配置</p><p>修改内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dataDir=/usr/local/zookeeper/apache-zookeeper-<span class="hljs-number">3.6</span><span class="hljs-number">.3</span>-bin/data<br></code></pre></td></tr></table></figure><h3 id="1-5、启动Zookeeper"><a href="#1-5、启动Zookeeper" class="headerlink" title="1.5、启动Zookeeper"></a>1.5、启动Zookeeper</h3><p>回退到 /usr/local/zookeeper/apache-zookeeper-3.6.3-bin 目录 </p><ul><li>执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 apache-zookeeper-3.6.3-bin]# ./bin/zkServer.sh start<br></code></pre></td></tr></table></figure><p>启动后可以通过如下命令来检查启动后的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 apache-zookeeper-3.6.3-bin]# ./bin/zkServer.sh status<br>ZooKeeper JMX enabled by default<br>Using config: /usr/local/zookeeper/apache-zookeeper-3.6.3-bin/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost. Client SSL: false.<br>Mode: standalone<br></code></pre></td></tr></table></figure><h3 id="1-6、启动可能会报错"><a href="#1-6、启动可能会报错" class="headerlink" title="1.6、启动可能会报错"></a>1.6、启动可能会报错</h3><p>/usr/local/zookeeper/apache-zookeeper-3.6.3-bin/logs目录下的</p><p>zookeeper-root-server-centos_7_100.out 可以查看zookeeper启动的详细信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Problem starting AdminServer on address <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>, port <span class="hljs-number">8080</span> and command URL /commands<br></code></pre></td></tr></table></figure><p>上面这个报错可能是8080端口被占用了,</p><p> 可在<code>zoo.cfg</code>中配置<code>admin.serverPort=8088</code>修改端口。</p><h3 id="1-7、配置环境变量"><a href="#1-7、配置环境变量" class="headerlink" title="1.7、配置环境变量"></a>1.7、配置环境变量</h3><p>编辑配置⽂件：/etc路径下 的 profile文件</p><p>在文件尾部加入部加⼊ ZooKeeper 的 bin 路径配置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export ZOOKEEPER_HOME=/usr/local/zookeeper/apache-zookeeper-3.6.1-bin<br>export PATH=$PATH:$ZOOKEEPER_HOME/bin<br></code></pre></td></tr></table></figure><p>最后执行 <code>source /etc/profile</code> 使环境变量生效即可</p><h3 id="1-8、设置开机⾃启"><a href="#1-8、设置开机⾃启" class="headerlink" title="1.8、设置开机⾃启"></a>1.8、设置开机⾃启</h3><p>⾸先进⼊ /etc/rc.d/init.d ⽬录，创建⼀个名为 zookeeper 的⽂件，并赋予执⾏权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 ~]# cd /etc/rc.d/init.d<br>[root@centos_7_100 init.d]# ll<br>总用量 56<br>-rwxr-xr-x. 1 root root   961 12月  3 10:17 fdfs_storaged<br>-rwxr-xr-x. 1 root root   963 12月  3 10:17 fdfs_trackerd<br>-rw-r--r--. 1 root root 18281 5月  22 2020 functions<br>-rwxr-xr-x. 1 root root  4569 5月  22 2020 netconsole<br>-rwxr-xr-x. 1 root root  7928 5月  22 2020 network<br>-rw-r--r--. 1 root root  1160 10月  2 2020 README<br>-rwxr-xr-x. 1 root root  1422 11月 14 20:38 redis_init_script<br>-rwxr-xr-x. 1 root root   817 11月 13 12:18 tomcat<br>[root@centos_7_100 init.d]# touch zookeeper<br>[root@centos_7_100 init.d]# chmod +x zookeeper <br></code></pre></td></tr></table></figure><p>接下来编辑 zookeeper ⽂件，并在其中加⼊如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">chkconfig:- 20 90</span><br><span class="hljs-meta">#</span><span class="bash">description:zookeeper</span><br><span class="hljs-meta">#</span><span class="bash">processname:zookeeper</span><br>ZOOKEEPER_HOME=/usr/local/zookeeper/apache-zookeeper-3.6.3-bin<br>export JAVA_HOME=/usr/local/java/jdk1.8.0_221 # 此处根据你的实际情况更换对<br>应<br>case $1 in<br> start) su root $ZOOKEEPER_HOME/bin/zkServer.sh start;;<br> stop) su root $ZOOKEEPER_HOME/bin/zkServer.sh stop;;<br> status) su root $ZOOKEEPER_HOME/bin/zkServer.sh status;;<br> restart) su root $ZOOKEEPER_HOME/bin/zkServer.sh restart;;<br> *) echo &quot;require start|stop|status|restart&quot; ;;<br>esac<br></code></pre></td></tr></table></figure><p>最后加⼊开机启动即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 init.d]# chkconfig --add zookeeper <br>[root@centos_7_100 init.d]# chkconfig zookeeper on <br></code></pre></td></tr></table></figure><h3 id="1-9、zookeeper-cli客户端"><a href="#1-9、zookeeper-cli客户端" class="headerlink" title="1.9、zookeeper cli客户端"></a>1.9、zookeeper cli客户端</h3><h2 id="3、Zookeeper分布式锁原理"><a href="#3、Zookeeper分布式锁原理" class="headerlink" title="3、Zookeeper分布式锁原理"></a>3、Zookeeper分布式锁原理</h2><h3 id="3-1、实现原理"><a href="#3-1、实现原理" class="headerlink" title="3.1、实现原理"></a>3.1、实现原理</h3><blockquote><ul><li>利用Zookeeper的瞬时有序节点的特性</li><li>多线程并发创建瞬时节点时,得到有序的序列</li><li>序号最小的线程获得锁</li><li>其它的线程监听自己序号的前一个序号</li></ul></blockquote><h3 id="3-2、Zookeeper的观察器"><a href="#3-2、Zookeeper的观察器" class="headerlink" title="3.2、Zookeeper的观察器"></a>3.2、Zookeeper的观察器</h3><blockquote><p>可设置观察器的3个方法：getData(); , getChildren(); , exists();</p><p>观察器只能监控一次,再监控需重新设置</p></blockquote><h2 id="4、Maven依赖"><a href="#4、Maven依赖" class="headerlink" title="4、Maven依赖"></a>4、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、代码实现"><a href="#5、代码实现" class="headerlink" title="5、代码实现"></a>5、代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.distributezklock.lock;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.*;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.data.Stat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Date</span> 2021/12/21 10:54</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> null</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Return</span> null</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Description</span>: Zookeeper 分布式锁</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ZkLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AutoCloseable</span>, <span class="hljs-title">Watcher</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ZooKeeper zooKeeper;<br>    <span class="hljs-keyword">private</span> String znode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ZkLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.zooKeeper = <span class="hljs-keyword">new</span> ZooKeeper(<span class="hljs-string">&quot;192.168.198.100:2181&quot;</span>,<br>                <span class="hljs-number">10000</span>,<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">getLock</span><span class="hljs-params">(String businessCode)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建业务 根节点</span><br>            Stat stat = zooKeeper.exists(<span class="hljs-string">&quot;/&quot;</span> + businessCode, <span class="hljs-keyword">false</span>);<br>            <span class="hljs-comment">// 创建持久节点</span><br>            <span class="hljs-keyword">if</span> (stat == <span class="hljs-keyword">null</span>)&#123;<br>                zooKeeper.create(<span class="hljs-string">&quot;/&quot;</span> + businessCode,businessCode.getBytes(),<br>                        ZooDefs.Ids.OPEN_ACL_UNSAFE,<br>                        CreateMode.PERSISTENT);<br>            &#125;<br><br>            <span class="hljs-comment">//创建瞬时有序节点  /order/order_00000001</span><br>            znode = zooKeeper.create(<span class="hljs-string">&quot;/&quot;</span> + businessCode + <span class="hljs-string">&quot;/&quot;</span> + businessCode + <span class="hljs-string">&quot;_&quot;</span>, businessCode.getBytes(),<br>                    ZooDefs.Ids.OPEN_ACL_UNSAFE,<br>                    CreateMode.EPHEMERAL_SEQUENTIAL);<br><br>            <span class="hljs-comment">//获取业务节点下 所有的子节点</span><br>            List&lt;String&gt; childrenNodes = zooKeeper.getChildren(<span class="hljs-string">&quot;/&quot;</span> + businessCode, <span class="hljs-keyword">false</span>);<br>            <span class="hljs-comment">//子节点排序</span><br>            Collections.sort(childrenNodes);<br>            <span class="hljs-comment">//获取序号最小的（第一个）子节点</span><br>            String firstNode = childrenNodes.get(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//如果创建的节点是第一个子节点，则获得锁</span><br>            <span class="hljs-keyword">if</span> (znode.endsWith(firstNode))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-comment">//不是第一个子节点，则监听前一个节点</span><br>            String lastNode = firstNode;<br>            <span class="hljs-keyword">for</span> (String node:childrenNodes)&#123;<br>                <span class="hljs-keyword">if</span> (znode.endsWith(node))&#123;<br>                    zooKeeper.exists(<span class="hljs-string">&quot;/&quot;</span>+businessCode+<span class="hljs-string">&quot;/&quot;</span>+lastNode,<span class="hljs-keyword">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    lastNode = node;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;<br>                wait();<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        zooKeeper.delete(znode,-<span class="hljs-number">1</span>);<br>        zooKeeper.close();<br>        log.info(<span class="hljs-string">&quot;我已经释放了锁！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(WatchedEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.getType() == Event.EventType.NodeDeleted)&#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;<br>                notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、单元测试"><a href="#6、单元测试" class="headerlink" title="6、单元测试"></a>6、单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testZkLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    ZkLock zkLock = <span class="hljs-keyword">new</span> ZkLock();<br>    <span class="hljs-keyword">boolean</span> lock = zkLock.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br>    log.info(<span class="hljs-string">&quot;获得锁的结果：&quot;</span>+lock);<br><br>    zkLock.close();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、Curator分布式锁"><a href="#三、Curator分布式锁" class="headerlink" title="三、Curator分布式锁"></a>三、Curator分布式锁</h1><h2 id="3-1、实现"><a href="#3-1、实现" class="headerlink" title="3.1、实现"></a>3.1、实现</h2><blockquote><ul><li>引入Curator客户端</li><li>Curator已经实现了分布式锁的方法</li><li>直接调用即可</li></ul></blockquote><h2 id="3-2、Maven依赖"><a href="#3-2、Maven依赖" class="headerlink" title="3.2、Maven依赖"></a>3.2、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-3、单元测试"><a href="#3-3、单元测试" class="headerlink" title="3.3、单元测试"></a>3.3、单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCuratorLock</span><span class="hljs-params">()</span></span>&#123;<br>    RetryPolicy retryPolicy = <span class="hljs-keyword">new</span> ExponentialBackoffRetry(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>);<br>    CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="hljs-string">&quot;192.168.198.100:2181&quot;</span>, retryPolicy);<br>    client.start();<br>    InterProcessMutex lock = <span class="hljs-keyword">new</span> InterProcessMutex(client, <span class="hljs-string">&quot;/order&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> ( lock.acquire(<span class="hljs-number">30</span>, TimeUnit.SECONDS) ) &#123;<br>            <span class="hljs-keyword">try</span>  &#123;<br>                log.info(<span class="hljs-string">&quot;我获得了锁！！！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">finally</span>  &#123;<br>                lock.release();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    client.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4、结合controller使用"><a href="#3-4、结合controller使用" class="headerlink" title="3.4、结合controller使用"></a>3.4、结合controller使用</h2><p>生成Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(initMethod=&quot;start&quot;,destroyMethod = &quot;close&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CuratorFramework <span class="hljs-title">getCuratorFramework</span><span class="hljs-params">()</span> </span>&#123;<br>    RetryPolicy retryPolicy = <span class="hljs-keyword">new</span> ExponentialBackoffRetry(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>);<br>    CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="hljs-string">&quot;192.168.198.100:2181&quot;</span>, retryPolicy);<br>    <span class="hljs-keyword">return</span> client;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller 类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CuratorFramework client;<br><span class="hljs-meta">@RequestMapping(&quot;curatorLock&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">curatorLock</span><span class="hljs-params">()</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;我进入了方法！&quot;</span>);<br>        InterProcessMutex lock = <span class="hljs-keyword">new</span> InterProcessMutex(client, <span class="hljs-string">&quot;/order&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span> (lock.acquire(<span class="hljs-number">30</span>, TimeUnit.SECONDS))&#123;<br>                log.info(<span class="hljs-string">&quot;我获得了锁！！&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">10000</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.info(<span class="hljs-string">&quot;我释放了锁！！&quot;</span>);<br>                lock.release();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;方法执行完成！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;方法执行完成！&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="四、Redisson分布式锁"><a href="#四、Redisson分布式锁" class="headerlink" title="四、Redisson分布式锁"></a>四、Redisson分布式锁</h1><h2 id="4-1、使用Redisson"><a href="#4-1、使用Redisson" class="headerlink" title="4.1、使用Redisson"></a>4.1、使用Redisson</h2><ul><li>通过Java Api方式引入Redisson</li><li>Spring项目引入Redisson</li><li>SpringBoot 项目引入Redisson</li></ul><h2 id="4-2、Maven依赖"><a href="#4-2、Maven依赖" class="headerlink" title="4.2、Maven依赖"></a>4.2、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-3、单元测试"><a href="#4-3、单元测试" class="headerlink" title="4.3、单元测试"></a>4.3、单元测试</h2><ul><li>Java Api 方式使用Redisson</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.redissonlock;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.redisson.Redisson;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.config.Config;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedissonLockApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRedissonLock</span><span class="hljs-params">()</span> </span>&#123;<br>        Config config = <span class="hljs-keyword">new</span> Config();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.198.100:6379&quot;</span>);<br>        RedissonClient redisson = Redisson.create(config);<br><br>        RLock rLock = redisson.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            rLock.lock(<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>            log.info(<span class="hljs-string">&quot;我获得了锁！！！&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            log.info(<span class="hljs-string">&quot;我释放了锁！！&quot;</span>);<br>            rLock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4、SpringBoot使用Redisson"><a href="#4-4、SpringBoot使用Redisson" class="headerlink" title="4.4、SpringBoot使用Redisson"></a>4.4、SpringBoot使用Redisson</h2><ul><li>maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.properties 配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.198.100</span><br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.redissonlock.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.redisson.Redisson;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.config.Config;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedissonLockController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redisson;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;redissonLock&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">redissonLock</span><span class="hljs-params">()</span> </span>&#123;<br>        RLock rLock = redisson.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;我进入了方法！！&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            rLock.lock(<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>            log.info(<span class="hljs-string">&quot;我获得了锁！！！&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            log.info(<span class="hljs-string">&quot;我释放了锁！！&quot;</span>);<br>            rLock.unlock();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;方法执行完成！！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;方法执行完成！！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5、Spring使用Redisson"><a href="#4-5、Spring使用Redisson" class="headerlink" title="4.5、Spring使用Redisson"></a>4.5、Spring使用Redisson</h2><ul><li>maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.properties 配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># spring.redis.host=192.168.198.100</span><br></code></pre></td></tr></table></figure><ul><li>redisson.xml 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:redisson</span>=<span class="hljs-string">&quot;http://redisson.org/schema/redisson&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://redisson.org/schema/redisson</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://redisson.org/schema/redisson/redisson.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">redisson:client</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">redisson:single-server</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;redis://192.168.198.100:6379&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">redisson:client</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启动类引入配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.redissonlock;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ImportResource;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// 引入xml文件</span><br><span class="hljs-comment">// @ImportResource(&quot;classpath*:redisson.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedissonLockApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(RedissonLockApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6、controller"><a href="#4-6、controller" class="headerlink" title="4.6、controller"></a>4.6、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.redissonlock.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.redisson.Redisson;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.config.Config;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedissonLockController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redisson;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;redissonLock&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">redissonLock</span><span class="hljs-params">()</span> </span>&#123;<br>        RLock rLock = redisson.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;我进入了方法！！&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            rLock.lock(<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>            log.info(<span class="hljs-string">&quot;我获得了锁！！！&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            log.info(<span class="hljs-string">&quot;我释放了锁！！&quot;</span>);<br>            rLock.unlock();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;方法执行完成！！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;方法执行完成！！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、分布式锁方案选择"><a href="#五、分布式锁方案选择" class="headerlink" title="五、分布式锁方案选择"></a>五、分布式锁方案选择</h1><h2 id="5-1、各种方案优缺点对比"><a href="#5-1、各种方案优缺点对比" class="headerlink" title="5.1、各种方案优缺点对比"></a>5.1、各种方案优缺点对比</h2><p><img src="Zookeeper.assets/image-20211221115756739.png" alt="image-20211221115756739"></p><h2 id="5-2、数据库方式"><a href="#5-2、数据库方式" class="headerlink" title="5.2、数据库方式"></a>5.2、数据库方式</h2><ul><li>建议将分布式锁的数据库和生产的数据库分开,不要给数据库造成太大压力</li></ul><h2 id="5-3、总结"><a href="#5-3、总结" class="headerlink" title="5.3、总结"></a>5.3、总结</h2><ul><li>不建议使用自己编写分布式锁</li><li>推荐 ==Redisson== 和 ==Curator== 实现的分布式锁</li></ul>]]></content>
    
    
    <categories>
      
      <category>分布式相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2021/12/05/RabbitMQ/"/>
    <url>/2021/12/05/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<p>RabbitMQ基本使用</p><span id="more"></span><ul><li><p>分布式消息队列(MQ)认知与提升</p></li><li><p>RabbitMQ实战</p></li><li><p>RabbitMQ可靠性投递基础组件封装</p></li></ul><h1 id="一、MQ基础"><a href="#一、MQ基础" class="headerlink" title="一、MQ基础"></a>一、MQ基础</h1><h2 id="1-1、MQ应用场景"><a href="#1-1、MQ应用场景" class="headerlink" title="1.1、MQ应用场景"></a>1.1、MQ应用场景</h2><blockquote><p>JMS（Java Message Service）规 ava消息服务，它定义了Java中访问消息中间件的接口的规范。在这里注意哦，JMS只是接口，并没有给予实现，实现JMS接口的消息中间件称为 “JMS Provide 的开源 MOM （Message Oriented Middleware，也就是消息中间件）系统包括Apache的ActiveMQ、RocketMQ、Kafka，以及RabbitMQ，可以说他们都 “基本遵 考” JMS规范，都有自己的特点和优势。 </p><ul><li>专业术语 <ul><li>JMS（Java Message Service）：实现JMS 接口的消息中间件； </li><li>Provider（MessageProvider）：消息的生产者； </li><li>Consumer（MessageConsumer）：消息的消费者； </li><li>PTP（Point to Point）：即点对点的消息模型，这也是非常经典的模型； </li><li>Pub / Sub（Publish/Subscribe）：，即发布/订阅的消息模型； </li><li>Queue：队列目标，也就是我们常说的消息队列，一般都是会真正的进行物理存储；</li><li> Topic：主题目标； </li><li>ConnectionFactory：连接工厂，JMS 用它创建连接；</li><li> Connection：JMS 客户端到JMS Provider 的连接；</li><li> Destination：消息的目的地； </li><li>Session：会话，一个发送或接收消息的线程（这里Session可以类比Mybatis的Session</li></ul></li><li>JMS消息格式定义：<ul><li> StreamMessage 原始值的数据流 </li><li>MapMessage 一套名称/值对 </li><li>TextMessage 一个字符串对象</li><li> BytesMessage 一个未解释字节的数据流 </li><li>ObjectMessage 一个序列化的Java对象</li></ul></li></ul></blockquote><ul><li>服务解耦</li><li>销峰填谷</li><li>异步化缓冲</li></ul><blockquote><p>思考点</p><ul><li>生产端可靠性投递</li><li>消费端幂等性</li><li>高可用</li><li>低延迟</li><li>可靠性</li><li>堆积能力</li><li>可扩展性</li></ul></blockquote><h2 id="1-2、主流MQ"><a href="#1-2、主流MQ" class="headerlink" title="1.2、主流MQ"></a>1.2、主流MQ</h2><ul><li>ActiveMQ 阿帕奇   (性能较差)</li><li>RabbitMQ (重点)   (扩展性较差)</li><li>RocketMQ (阿里 -&gt; 阿帕奇)</li><li>Kafka (高吞吐量,数据转储)</li></ul><blockquote><p>如何进行技术选型</p><ul><li>各个MQ的性能,优缺点，相应的业务场景</li><li>集群架构模式，分布式，可扩展性，高可用性，可维护性</li><li>综合成本问题，集群规模，人员成本</li><li>未来的方向，规划，思考</li></ul></blockquote><h2 id="1-3、RabbitMQ集群架构模型与原理"><a href="#1-3、RabbitMQ集群架构模型与原理" class="headerlink" title="1.3、RabbitMQ集群架构模型与原理"></a>1.3、RabbitMQ集群架构模型与原理</h2><p>1.主备模式(master -&gt; slave)</p><p>2.远程模式(配置复杂)</p><p>3.镜像模式(使用最为广泛)</p><p>4.多活模型(类似远程模式)</p><h3 id="1、主备模式"><a href="#1、主备模式" class="headerlink" title="1、主备模式"></a>1、主备模式</h3><ul><li>warren(兔子窝),主备方案 ,主节点挂了,备份节点启用</li></ul><h3 id="2、远程模式"><a href="#2、远程模式" class="headerlink" title="2、远程模式"></a>2、远程模式</h3><ul><li>远距离通信复制，实现双活的一种模式，让两个跨地域的MQ构成集群</li><li>配置复杂</li></ul><h3 id="3、镜像模式"><a href="#3、镜像模式" class="headerlink" title="3、镜像模式"></a>3、镜像模式</h3><ul><li>保证100%数据不丢失</li><li>在实际工作中用的最多，并且实现集群非常简单，一般互联网大厂都会构建这种集群模式</li></ul><blockquote><p>高可用  数据同步  高可靠(奇数个节点)</p><p>无法横向扩展</p><p>多个服务器同步相同数据</p></blockquote><h3 id="4、多活模式"><a href="#4、多活模式" class="headerlink" title="4、多活模式"></a>4、多活模式</h3><ul><li>依赖RabbitMQ的 federation插件</li><li>RabbitMQ部署架构采用双中心(多中心),那么在两套(或者多套)数据中心部署一套RabbitMQ集群，各中心的RabbitMQ服务除了需要为业务提供正常的消息服务外，中心之间还需要实现部分队列消息共享</li></ul><h1 id="二、RabbitMQ"><a href="#二、RabbitMQ" class="headerlink" title="二、RabbitMQ"></a>二、RabbitMQ</h1><h2 id="2-1、基础"><a href="#2-1、基础" class="headerlink" title="2.1、基础"></a>2.1、基础</h2><blockquote><p>RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基 议的。各个互联网大厂都在使用RabbitMQ作为消息中间件，为什么呢，下面我们来一起看看，“她” 都有哪些优点！ </p><ul><li>采用Erlang语言作为底层实现：Erlang有着和原生Socket一样的延迟 </li><li>开源、性能优秀，稳定性保障 </li><li>提供可靠性消息投递模式（confirm）、返回模式（ return ） </li><li>与SpringAMQP完美的整合、API丰富 </li><li>集群模式丰富，表达式配置，HA模式，镜像队列模型</li><li> 保证数据不丢失的前提做到高可靠性、可用性</li></ul></blockquote><ul><li>AMQP核心概念</li><li>RabbitMQ安装与入门</li><li>RabbitMQ核心API</li><li>RabbitMQ高级特性</li><li>RabbitMQ集群架构实操（镜像集群）</li><li>SpringBoot整合</li><li>MQ基础组件封装和实战</li></ul><h2 id="2-2、RabbitMQ环境搭建"><a href="#2-2、RabbitMQ环境搭建" class="headerlink" title="2.2、RabbitMQ环境搭建"></a>2.2、RabbitMQ环境搭建</h2><h3 id="1-首先安装erlang环境"><a href="#1-首先安装erlang环境" class="headerlink" title="1.首先安装erlang环境"></a>1.首先安装erlang环境</h3><p>因为RabbitMQ需要erlang环境的支持，所以必须安装erlang</p><p>要安装的是 erlang-22.3.3-1.el7.x86_64.rpm 先执行以下命令来安装其对应的yum repo</p><p><code>curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash</code></p><p>执行以下命令来正式安装 erlang 环境</p><p><code>yum install erlang-22.3.3-1.el7.x86_64</code></p><p>(如果有提示 重新执行该事务) 执行命令</p><p><code>yum load-transaction /tmp/yum_save_tx.2020-05-14.22-21.n0cwzm.yumtx</code></p><p>测试erlang是否安装成功</p><p><code>erl</code></p><p>出现</p><blockquote><p>[root@centos_7_100 ~]# erl<br>Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1] [hipe]</p><p>Eshell V10.7.1  (abort with ^G)</p><p>说明安装成功</p></blockquote><h3 id="2、安装RabbitMQ"><a href="#2、安装RabbitMQ" class="headerlink" title="2、安装RabbitMQ"></a>2、安装RabbitMQ</h3><p>首先安装其对应的yum repo</p><p><code>curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash</code></p><p>执行命令正式安装RabbitMQ</p><p><code>yum install rabbitmq-server-3.8.3-1.el7.noarch</code></p><h3 id="3、设置RabbitMQ开机启动"><a href="#3、设置RabbitMQ开机启动" class="headerlink" title="3、设置RabbitMQ开机启动"></a>3、设置RabbitMQ开机启动</h3><p>(关闭防火墙或者打开 15672端口)</p><p><code>chkconfig rabbitmq-server on</code></p><p>启动RabbitMQ服务</p><p><code>systemctl start rabbitmq-server.service</code></p><p>开启WEB可视化管理插件</p><p><code>rabbitmq-plugins enable rabbitmq_management</code></p><p>访问可视化管理界⾯</p><p><a href="http://192.168.198.100:15672/">http://192.168.198.100:15672</a></p><p>能看到网页登录入口</p><p>我们可以在后台添加一个用户/密码对</p><p><code>rabbitmqctl add_user tho 123456 </code></p><p><code>rabbitmqctl set_user_tags tho administrator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@centos_7_100</span> ~]# rabbitmqctl add_user tho <span class="hljs-number">123456</span><br>Adding user <span class="hljs-string">&quot;tho&quot;</span> ...<br>[root<span class="hljs-meta">@centos_7_100</span> ~]# <br>[root<span class="hljs-meta">@centos_7_100</span> ~]# rabbitmqctl set_user_tags tho administrator<br>Setting tags <span class="hljs-keyword">for</span> user <span class="hljs-string">&quot;tho&quot;</span> to [administrator] ...<br>[root<span class="hljs-meta">@centos_7_100</span> <span class="hljs-number">8</span>~]# <br></code></pre></td></tr></table></figure><p>之后在网页登录即可</p><h2 id="2-3、RabbitMQ高性能"><a href="#2-3、RabbitMQ高性能" class="headerlink" title="2.3、RabbitMQ高性能"></a>2.3、RabbitMQ高性能</h2><ul><li>Erlang语言用于交换机领域的架构模式</li><li>Erlang有着和原生Socket一样的延迟</li></ul><blockquote><p>AMQP高级消息队列协议</p><ul><li>AMQP协议模型</li></ul></blockquote><p>AMQP核心概念</p><blockquote><ul><li>Server：Broker，接收客户端连接，实现AMQP实体服务</li><li>Connection：连接，应用程序与Broker的网络连接</li><li>Channel：网络信道，所以的操作几乎都在Channel中进行，客户端可以建立多个Channel，每个Channel代表一个会话任务</li><li>Message：消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则是消息体内容</li><li>Virtual Host：虚拟地址，进行逻辑隔离，最上层的消息路由，一个Virtual host里可以有多干个Exchange和Queue，同一个Virtual Host 不能有相同名称的Exchange和Queue</li><li>Exchange：交换机，接收消息，根据路由键转发消息到绑定的队列</li><li>Binding：Exchange和Queue之间的虚拟连接，binding中包括 routing key</li><li>Routing key ： 一个路由规则，虚拟机 可用它来确定如何路由一个特定消息</li><li>Queue：也称为Message Queue：消息队列，保存消息并把它们转发给消费者</li></ul></blockquote><blockquote><p>RabbitMQ整体架构</p><p>producer -&gt; exchange -&gt; queue -&gt; consumer</p></blockquote><h2 id="2-4、如何保证100-投递成功"><a href="#2-4、如何保证100-投递成功" class="headerlink" title="2.4、如何保证100%投递成功"></a>2.4、如何保证100%投递成功</h2><blockquote><p>生产端可靠性投递</p><ul><li>保证消息的成功发出</li><li>保证MQ节点成功接收</li><li>发送端接收到MQ节点(Broker)确认应答</li><li>完善的消息进行补偿机制</li></ul></blockquote><blockquote><p>解决方案</p><ul><li>消息落库，对消息状态进行打标(高并发场景下不太合适)</li><li>消息延迟投递，做二次确认，回调检查(较为常用，减少数据库操作)</li></ul></blockquote><h2 id="2-5、幂等性"><a href="#2-5、幂等性" class="headerlink" title="2.5、幂等性"></a>2.5、幂等性</h2><blockquote><ul><li>借鉴数据库的乐观锁机制、</li><li>执行一条更新库存的sql语句</li><li>update t_reps set count = count - 1, version = version + 1 where version = 1</li></ul></blockquote><blockquote><p>海量订单产生的业务高峰期，如何避免消息的重复消费问题</p><ul><li>消费端实现幂等性，就意味着，我们的消息永远不会消费多次，即使我们收到了多条一样的消息</li></ul></blockquote><blockquote><p>消费端-幂等性保障</p><ul><li>唯一ID + 指纹码 机制，利用数据库主键去重</li><li>利用Redis的原子性去实现</li></ul></blockquote><h3 id="1-唯一id-指纹码-机制"><a href="#1-唯一id-指纹码-机制" class="headerlink" title="1.唯一id + 指纹码 机制"></a>1.唯一id + 指纹码 机制</h3><ul><li>唯一ID + 指纹码机制，利用数据库主键去重</li><li>Select count(1) from t_order where id = 唯一id + 枝纹码</li><li>好处 ： 实现简单</li><li>坏处： 高并发下有数据库写入的性能瓶颈</li><li>解决方案：跟进ID进行分库分表进行算法路由</li></ul><h3 id="2-利用Redis原子特性实现"><a href="#2-利用Redis原子特性实现" class="headerlink" title="2.利用Redis原子特性实现"></a>2.利用Redis原子特性实现</h3><ul><li>利用Redis进行幂等性操作</li></ul><blockquote><p>需要考虑的问题</p><ul><li>是否要进行数据库落库，如果落库的话，数据库和缓存如何做到原子性(一致性)</li><li>如果不进行落库，都存储到缓存中，如何设置定时同步策略</li></ul></blockquote><h2 id="2-6、整合SpringBoot"><a href="#2-6、整合SpringBoot" class="headerlink" title="2.6、整合SpringBoot"></a>2.6、整合SpringBoot</h2><p>1.@RabbitListener注解</p><blockquote><p>消费端监听 @RabbitMQListener</p><p>@QueueBinding @Queue @Exchange</p></blockquote><h3 id="1-生产者"><a href="#1-生产者" class="headerlink" title="1.生产者"></a>1.生产者</h3><h4 id="相关依赖配置"><a href="#相关依赖配置" class="headerlink" title="相关依赖配置"></a>相关依赖配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.tho&lt;/groupId&gt;<br>    &lt;artifactId&gt;RabbitMQ&lt;/artifactId&gt;<br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>&lt;/version&gt;<br>    &lt;modules&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;RabbitMQ-producer&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;/modules&gt;<br>    &lt;!--Springboot 依赖--&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.5</span>.RELEASE&lt;/version&gt;<br>        &lt;relativePath /&gt;<br>    &lt;/parent&gt;<br>    &lt;!--相关配置--&gt;<br>    &lt;properties&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;<span class="hljs-number">1.8</span>&lt;/java.version&gt;<br>    &lt;/properties&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>            &lt;!--使用自定义日志框架 屏蔽自带的日志框架--&gt;<br>            &lt;!--&lt;exclusions&gt;<br>                &lt;exclusion&gt;<br>                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;<br>                &lt;/exclusion&gt;<br>            &lt;/exclusions&gt;--&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br><br>        &lt;/dependency&gt;<br>        &lt;!--Springboot 整合RabbitMQ--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br><br>    &lt;/dependencies&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8001</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><br><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.198.100</span><br><span class="hljs-meta">spring.rabbitmq.username</span>=<span class="hljs-string">tho</span><br><span class="hljs-meta">spring.rabbitmq.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.rabbitmq.virtual-host</span>=<span class="hljs-string">/</span><br><span class="hljs-meta">spring.rabbitmq.connection-timeout</span>=<span class="hljs-string">15000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 启用消息确认模式</span><br><span class="hljs-meta">spring.rabbitmq.publisher-confirms</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 设置return消息模式,注意要和mandatory一起去配合使用</span><br><span class="hljs-comment">## spring.rabbitmq.publisher-returns=true</span><br><span class="hljs-comment">## spring.rabbitmq.template.mandatory=true</span><br><br><span class="hljs-meta">spring.http.encoding.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-meta">spring.jackson.default-property-inclusion</span>=<span class="hljs-string">non_null</span><br></code></pre></td></tr></table></figure><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.component;<br><br><br><span class="hljs-keyword">import</span> org.springframework.amqp.AmqpException;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.messaging.Message;<br><span class="hljs-keyword">import</span> org.springframework.messaging.MessageHeaders;<br><span class="hljs-keyword">import</span> org.springframework.messaging.support.MessageBuilder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/4/20:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> RabbitMQ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: RabbitMQSender</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: RabbitMQ消息发送者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQSender</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 确认消息的回调消息监听，用于确认消息是否被Broker收到</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> RabbitTemplate.ConfirmCallback confirmCallback= <span class="hljs-keyword">new</span> RabbitTemplate.ConfirmCallback()&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> correlationData 作为一个唯一的标识,标记消息是不是对应的返回</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> ack              消息是否落盘成功</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> cause             失败的一些异常信息</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-keyword">boolean</span> ack, String cause)</span> </span>&#123;<br><br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/12/4 20:08</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> message  具体的消息内容</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> properties 额外的附加属性</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 对外发送消息的方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(Object message, Map&lt;String, Object&gt; properties)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 携带附加属性,需符合AMQP协议</span><br>        MessageHeaders mhs = <span class="hljs-keyword">new</span> MessageHeaders(properties);<br>        <span class="hljs-comment">// 构造消息</span><br>        Message&lt;?&gt; msg = MessageBuilder.createMessage(message, mhs);<br>        <span class="hljs-comment">// 采用 spring.rabbitmq.publisher-confirms=true 模式</span><br>        <span class="hljs-comment">// 消息确认模式 需要设定回调事件</span><br>        rabbitTemplate.setConfirmCallback(confirmCallback);<br>        <span class="hljs-comment">// 指定了业务唯一id</span><br>        CorrelationData cd = <span class="hljs-keyword">new</span> CorrelationData(UUID.randomUUID().toString());<br>        MessagePostProcessor mpp = <span class="hljs-keyword">new</span> MessagePostProcessor() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> org.springframework.amqp.core.<span class="hljs-function">Message <span class="hljs-title">postProcessMessage</span><span class="hljs-params">(org.springframework.amqp.core.Message message)</span> <span class="hljs-keyword">throws</span> AmqpException </span>&#123;<br>                System.err.println(<span class="hljs-string">&quot;post to do: +  &quot;</span> + message);<br>                <span class="hljs-keyword">return</span> message;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;exchange-1&quot;</span>, <span class="hljs-string">&quot;springboot.rabbit&quot;</span>,<br>                msg,<br>                mpp,<br>                cd);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-消费者"><a href="#2-消费者" class="headerlink" title="2.消费者"></a>2.消费者</h3><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8002</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><br><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.198.100</span><br><span class="hljs-meta">spring.rabbitmq.username</span>=<span class="hljs-string">tho</span><br><span class="hljs-meta">spring.rabbitmq.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.rabbitmq.virtual-host</span>=<span class="hljs-string">/</span><br><span class="hljs-meta">spring.rabbitmq.connection-timeout</span>=<span class="hljs-string">15000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 消费者消费成功后需要手工进行签收(ack),默认为auto</span><br><span class="hljs-meta">spring.rabbitmq.listener.simple.acknowledge-mode</span>=<span class="hljs-string">manual</span><br><span class="hljs-meta">spring.rabbitmq.listener.simple.concurrency</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.rabbitmq.listener.simple.prefetch</span>=<span class="hljs-string">1</span><br><span class="hljs-meta">spring.rabbitmq.listener.simple.max-concurrency</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 自定义配置</span><br><span class="hljs-comment">## 最好不要在代码里将配置固定,尽量使用配置文件使用$&#123;&#125;来获取参数</span><br><span class="hljs-meta">spring.rabbitmq.listener.order.exchange.name</span>=<span class="hljs-string">exchange-1</span><br><br><span class="hljs-meta">spring.http.encoding.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-meta">spring.jackson.default-property-inclusion</span>=<span class="hljs-string">non_null</span><br></code></pre></td></tr></table></figure><h4 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.consumer.component;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.amqp.support.AmqpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.messaging.Message;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/4/20:27</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> RabbitMQ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: RabbitMQReceiver</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: RabbitMQ消费者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQReceiver</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组合使用监听</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@RabbitListener</span>  <span class="hljs-doctag">@QueueBinding</span> <span class="hljs-doctag">@Queue</span> <span class="hljs-doctag">@Exchange</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(</span><br><span class="hljs-meta">            bindings = @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue(value = &quot;queue-1&quot;, durable = &quot;true&quot;),</span><br><span class="hljs-meta">                    exchange = @Exchange(name = &quot;$&#123;spring.rabbitmq.listener.order.exchange.name&#125;&quot;,</span><br><span class="hljs-meta">                            durable = &quot;true&quot;,</span><br><span class="hljs-meta">                            type = &quot;topic&quot;,</span><br><span class="hljs-meta">                            ignoreDeclarationExceptions = &quot;true&quot;),</span><br><span class="hljs-meta">                    key = &quot;springboot.*&quot;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMessage</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 1.收到消息后进行业务端消费处理</span><br>        System.err.println(<span class="hljs-string">&quot;----------------------&quot;</span>);<br>        System.err.println(<span class="hljs-string">&quot;消费消息&quot;</span> + message.getPayload());<br><br>        <span class="hljs-comment">// 2.处理成功之后,获取 deliveryTag 并进行手工的Ack操作，因为配置文件里配置了手工签收</span><br>        <span class="hljs-comment">// ## 消费者消费成功后需要手工进行签收(ack),默认为auto</span><br>        <span class="hljs-comment">// spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br>        Long deliveryTag = (Long) message.getHeaders().get(AmqpHeaders.DELIVERY_TAG);<br>        channel.basicAck(deliveryTag, <span class="hljs-keyword">false</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-可能会报错"><a href="#3-可能会报错" class="headerlink" title="3.可能会报错"></a>3.可能会报错</h3><blockquote><p>RabbitMQ默认端口是5672</p><p>配置文件输入host时仅需要输入ip地址即可</p><p>配置文件中有关于端口的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.rabbitmq.port=<span class="hljs-number">5672</span><br></code></pre></td></tr></table></figure></blockquote><p>RabbitMQ设置了自己的用户,需要进入控制面板给自己的用户相应的权限</p><blockquote><p>Admin选项</p><p>点击自己设定的用户</p><p>点击 Set permission 设定权限</p></blockquote><h3 id="4-测试整合是否成功"><a href="#4-测试整合是否成功" class="headerlink" title="4.测试整合是否成功"></a>4.测试整合是否成功</h3><h4 id="启动消费者项目"><a href="#启动消费者项目" class="headerlink" title="启动消费者项目"></a>启动消费者项目</h4><ul><li>进入RabbitMQ,可以看到设定了相应的exchange和queue</li><li>Overview 和 Connections 界面也发生了一些变化</li></ul><h4 id="启动生产者的组件-进行测试"><a href="#启动生产者的组件-进行测试" class="headerlink" title="启动生产者的组件,进行测试"></a>启动生产者的组件,进行测试</h4><p>消费者的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.producer;<br><br><span class="hljs-keyword">import</span> com.tho.Application;<br><span class="hljs-keyword">import</span> com.tho.producer.component.RabbitMQSender;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/4/20:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> RabbitMQ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: ApplicationTests</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: RabbitMQ生产者的测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitMQSender rabbitMQSender;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SenderTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br><br>        Map&lt;String, Object&gt; properties = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        properties.put(<span class="hljs-string">&quot;attr1&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>);<br>        properties.put(<span class="hljs-string">&quot;attr2&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>        rabbitMQSender.send(<span class="hljs-string">&quot;hello rabbitMQ&quot;</span>, properties);<br><br>        Thread.sleep(<span class="hljs-number">10000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7、RabbitMQ集群架构模式"><a href="#2-7、RabbitMQ集群架构模式" class="headerlink" title="2.7、RabbitMQ集群架构模式"></a>2.7、RabbitMQ集群架构模式</h2><h3 id="1-主备模式"><a href="#1-主备模式" class="headerlink" title="1.主备模式"></a>1.主备模式</h3><blockquote><p>主从模式 主节点可以读写 从节点只能读</p><p>主备模式 主节点正常提供服务,从节点不提供任何服务(主节点宕机,备用节点提供新的服务)</p></blockquote><ul><li><p>实现RabbitMQ的高可用集群,一般在并发和数据量也不高的情况下,这种模型非常好用且简单。主备模式也称之为Warrent模式</p></li><li><p>一般在并发和数据量不高的情况下使用主备模式,配置简单,维护简单 中小型公司常用 </p></li><li><p>借助Haproxy实现主备模式</p></li></ul><h3 id="2-远程模式"><a href="#2-远程模式" class="headerlink" title="2.远程模式"></a>2.远程模式</h3><ul><li>远程模式可以实现双活的一种模式，简称Shovel模式,Shovel就是我们可以把消息进行不同数据中心的复制工作，我们可以跨地域地让两个mq集群互联</li><li>借助 rabbitmq_shovel 插件实现</li></ul><h3 id="3-镜像模式"><a href="#3-镜像模式" class="headerlink" title="3.镜像模式"></a>3.镜像模式</h3><ul><li>集群最经典的就是Mirror镜像模式,保证100%数据不丢失，在实际工作中也是用的最多的。并且实现集群非常简单</li><li>为了保证RabbitMQ数据的高可靠性方案，对于100%数据可靠性一般是三个节点</li></ul><h1 id="三、RabbitMQ基础组件封装"><a href="#三、RabbitMQ基础组件封装" class="headerlink" title="三、RabbitMQ基础组件封装"></a>三、RabbitMQ基础组件封装</h1><h2 id="3-1、基础组件关键点"><a href="#3-1、基础组件关键点" class="headerlink" title="3.1、基础组件关键点"></a>3.1、基础组件关键点</h2><ul><li>一线大厂MQ组件实现思路和架构设计方案</li><li>基础组件封装设计-迅速消息发送</li><li>基础组件封装设计-确认消息发送</li><li>基础组件封装设计-延迟消息发送</li></ul><blockquote><p>基础组件实现功能点</p><ul><li>迅速，延迟，可靠</li><li>消息异步化，序列化</li><li>连接池化，高性能</li><li>完备的补偿机制</li></ul></blockquote><h2 id="3-2、基础组件模块"><a href="#3-2、基础组件模块" class="headerlink" title="3.2、基础组件模块"></a>3.2、基础组件模块</h2><p>父工程 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>RabbitMQ<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>RabbitMQ-producer<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>RabbitMQ-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Springboot 依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--相关配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fasterxml.uuid.version</span>&gt;</span>3.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">fasterxml.uuid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">org.codehaus.jackson.version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">org.codehaus.jackson.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.0.24<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">elastic-job.version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">elastic-job.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">guava.version</span>&gt;</span>20.0<span class="hljs-tag">&lt;/<span class="hljs-name">guava.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-lang3.version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">commons-lang3.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-collections.version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">commons-collections.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">curator.version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">curator.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.1.26<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span><br><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用自定义日志框架 屏蔽自带的日志框架--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;exclusions&gt;</span><br><span class="hljs-comment">                &lt;exclusion&gt;</span><br><span class="hljs-comment">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="hljs-comment">                &lt;/exclusion&gt;</span><br><span class="hljs-comment">            &lt;/exclusions&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Springboot 整合RabbitMQ--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--对json格式的支持--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.jackson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.uuid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-uuid-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fasterxml.uuid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>RabbitMQ-common ：一些通用模块</li><li>RabbitMQ-api：对外提供接口模块</li><li>RabbitMQ-task：一些定时任务</li><li>RabbitMQ-core-producer：延迟发送等业务实现</li></ul><h2 id="3-3、API模块封装"><a href="#3-3、API模块封装" class="headerlink" title="3.3、API模块封装"></a>3.3、API模块封装</h2><blockquote><p>serialVersionUID IDea自动生成需要在设置里进行设置</p><p><a href="https://blog.csdn.net/hetongun/article/details/81904393">https://blog.csdn.net/hetongun/article/details/81904393</a></p></blockquote><h2 id="3-4、消息的可靠性投递"><a href="#3-4、消息的可靠性投递" class="headerlink" title="3.4、消息的可靠性投递"></a>3.4、消息的可靠性投递</h2><h3 id="1-集成数据源"><a href="#1-集成数据源" class="headerlink" title="1.集成数据源"></a>1.集成数据源</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>RabbitMQ<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>RabbitMQ-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>RabbitMQ-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.41<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>需要的 broker_message 表 消息投递日志表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 表 rabbitmq.broker_message 结构</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `broker_message` (<br>`message_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`message` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">3600</span>),<br>`try_count` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>`status` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>`next_retry` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;2019-07-01 00:00:00&#x27;</span>,<br>`create_time` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1970-07-01 12:26:55&#x27;</span>,<br>`update_time` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;2019-07-01 06:06:55&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`message_id`)<br><br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h2 id="3-5、消息补偿"><a href="#3-5、消息补偿" class="headerlink" title="3.5、消息补偿"></a>3.5、消息补偿</h2><blockquote><p>elastic job 当当网</p><p>分布式定时任务</p></blockquote><h1 id="四、分布式定时任务"><a href="#四、分布式定时任务" class="headerlink" title="四、分布式定时任务"></a>四、分布式定时任务</h1><h2 id="4-1、Elastic-Job"><a href="#4-1、Elastic-Job" class="headerlink" title="4.1、Elastic-Job"></a>4.1、Elastic-Job</h2><ul><li>需要借助zookeeper实现,需要配置好zookeeper环境</li></ul><blockquote><p>可以通过zookeeper来修改elastic-job的相关参数</p><p>利用ealstic-job的后台管理程序进行修改,可以更方便地修改elastic-job</p><p>后台还可以查看定时任务的执行日志记录</p></blockquote><h2 id="4-2、SimpleJob"><a href="#4-2、SimpleJob" class="headerlink" title="4.2、SimpleJob"></a>4.2、SimpleJob</h2><ul><li>最简单的job</li></ul><h2 id="4-3、DataFlowJob"><a href="#4-3、DataFlowJob" class="headerlink" title="4.3、DataFlowJob"></a>4.3、DataFlowJob</h2><ul><li>可以实时抓取数据的Job</li></ul>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式会话</title>
    <link href="/2021/11/30/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D/"/>
    <url>/2021/11/30/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>分布式会话</p><span id="more"></span><h1 id="一、会话"><a href="#一、会话" class="headerlink" title="一、会话"></a>一、会话</h1><h2 id="1-1、会话"><a href="#1-1、会话" class="headerlink" title="1.1、会话"></a>1.1、会话</h2><p>​    会话session代表的是客户端与服务器的一次交互过程,这个过程可以是连续的也可以是时断时续的。对于servlet，一旦用户与服务器端交互，服务器tomcat就会为用户创建一个session，同时前端会有一个jsessionid，每次交互都会携带。如此一来，服务器只要在接到用户请求的时候，就可以拿到jsessionid，并根据这个id在内存中找到对对应的session，当拿到session会话后，就可以操作会话了。会话存活期间，我们就能认为用户一直处于使用着网站的状态，一旦session超时，那就认为用户已经离开了网站，停止交互了。用户的身份信息，也是通过session来判断的，在session中可以保存不同用户的信息</p><h2 id="1-2、无状态会话"><a href="#1-2、无状态会话" class="headerlink" title="1.2、无状态会话"></a>1.2、无状态会话</h2><p>  Http请求是无状态的，用户向服务器发起多个请求，服务器并不知道这多次请求是来自一个用户，这个是无状态的。cookie出现就是为了有状态地记录用户。常见的ios与服务器交互，安卓与服务器交互，前后端分离等待，都是通过http请求来调用接口数据的，每次交互 服务端都不会拿到客户端的状态，但是我们可以通过手段去处理。比如每次用户发起请求的时候，携带一个userid或者user-token，如此一来，就能让服务器根据用户id或用户token来获得相应数据，每个用户的下一次请求都能被识别为来自同一个用户</p><h2 id="1-3、有状态会话"><a href="#1-3、有状态会话" class="headerlink" title="1.3、有状态会话"></a>1.3、有状态会话</h2><p>​    Tomcat的会话就是有状态的。一旦用户和服务器交互，就有会话，会话保存了用户的信息，这样用户就有状态了。服务端会和每个客户端都保持着这样的一层关系，这个由容器来管理，这个session会话是保存到内存空间的，如此一来，就能通过会话知道是谁了。tomcat会话的出现也是为了让http请求变地有状态。如果每个用户不再和服务端交互，那么会话就会因超时而消失，结束了他的生命周期，如此一来，每个用户其实都会有一个会话被维护，这就是有状态的会话</p><p>​    注：Tomcat会话可以通过手段实现多个系统之间的状态同步，但会损耗一定的时间，一旦发生同步那么用户请求就会等待，这种做法不可取</p><h2 id="1-4、单Tomcat会话"><a href="#1-4、单Tomcat会话" class="headerlink" title="1.4、单Tomcat会话"></a>1.4、单Tomcat会话</h2><p>​    这个有状态的，用户每次访问服务端，这个时候会话产生，并且会设置jsessionid放入cookie，后续请求每次都会携带jsessionid以保持会话状态</p><h2 id="1-5、动静分离会话"><a href="#1-5、动静分离会话" class="headerlink" title="1.5、动静分离会话"></a>1.5、动静分离会话</h2><p>​    用户请求服务端，由于前后端分离，前端发起http请求，不会携带任何状态，当用户第一次请求后，我们手动设置一个token，作为会话，放入redis中，如此作为redis-session，并且这个token设置后放入前端cookie中，如此后续的交互，前端只需要传递token给后端，后端就能识别这个用户来自谁了</p><h2 id="1-6、集群与分布式系统会话"><a href="#1-6、集群与分布式系统会话" class="headerlink" title="1.6、集群与分布式系统会话"></a>1.6、集群与分布式系统会话</h2><p>​    集群或者分布式系统本质是多个系统，假设这里面有两个服务器节点，分别是AB系统，一开始用户和A系统交互,那么这个时候的用户状态可以保存到redis中，作为A系统的会话信息，随后用户的请求进入B系统，那么B系统中的会话我也同样和redis关联，如此AB系统的session就统一了。当然cookie是会随着用户的访问携带的，这个其实就是分布式会话，通过redis来保存用户状态</p><h1 id="二、分布式会话"><a href="#二、分布式会话" class="headerlink" title="二、分布式会话"></a>二、分布式会话</h1><h2 id="2-1、Redis实现分布式会话"><a href="#2-1、Redis实现分布式会话" class="headerlink" title="2.1、Redis实现分布式会话"></a>2.1、Redis实现分布式会话</h2><blockquote><p>注册和登陆时,将用户的信息存入redis中,退出登录清除redis中的key</p><p>用户 更新了自己的信息时，对应的cookie也要相应更新(如果cookie中包含了用户的其它信息)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Date</span> 2021/11/21 15:37</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Return</span> UsersVO</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Description</span>: 将Users 转换为 UsersVO</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> UsersVO <span class="hljs-title">covertUserToUsersVO</span><span class="hljs-params">(Users user)</span> </span>&#123;<br>      String uniqueToken = UUID.randomUUID().toString().trim();<br>      redisOperator.set(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + user.getId(), uniqueToken);<br><br>      UsersVO usersVO = <span class="hljs-keyword">new</span> UsersVO();<br>      <span class="hljs-comment">// 多余的属性不会拷贝</span><br>      BeanUtils.copyProperties(user, usersVO);<br>      usersVO.setUserUniqueToken(uniqueToken);<br>      <span class="hljs-keyword">return</span> usersVO;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="2-2、SpringSession实现分布式会话"><a href="#2-2、SpringSession实现分布式会话" class="headerlink" title="2.2、SpringSession实现分布式会话"></a>2.2、SpringSession实现分布式会话</h2><blockquote><p>引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring-session 依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring-security依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>yml配置文件中进行配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"># spring-session 配置<br>spring:<br>  session:<br>    store-type: redis<br></code></pre></td></tr></table></figure><blockquote><p>启动类 Application.class 开启httpSession 使用redis</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/*开启SpringSession*/</span><br><span class="hljs-meta">@EnableRedisHttpSession</span><br><span class="hljs-comment">/*exclude 可以规避springsecurity相关类的自带加载</span><br><span class="hljs-comment">去除springSecurity自动装配*/</span><br><span class="hljs-meta">@SpringBootApplication(exclude = &#123;SecurityAutoConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// SpringBootApplication.run(Application.class, args);</span><br>        SpringApplication.run(Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试使用springsession</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@GetMapping(&quot;/setSession&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">setSession</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>       HttpSession session = request.getSession();<br>       session.setAttribute(<span class="hljs-string">&quot;userInfo&quot;</span>, <span class="hljs-string">&quot;new User&quot;</span>);<br>       session.setMaxInactiveInterval(<span class="hljs-number">3600</span>);<br>       session.getAttribute(<span class="hljs-string">&quot;userInfo&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>SpringSession弊端 与spring框架耦合度太高,其它语言的服务想要使用springSession的相关session信息较为困难</li></ul><h1 id="三、分布式会话拦截器"><a href="#三、分布式会话拦截器" class="headerlink" title="三、分布式会话拦截器"></a>三、分布式会话拦截器</h1><h2 id="3-1、构建拦截器测试"><a href="#3-1、构建拦截器测试" class="headerlink" title="3.1、构建拦截器测试"></a>3.1、构建拦截器测试</h2><blockquote><p>创建拦截器类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.tho.controller.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/21/16:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: UserTokenInterceptor</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 用户权限拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:46</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> boolean</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 拦截请求,在访问controller调用之前</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserTokenInterceptor&quot;</span> + <span class="hljs-string">&quot;进入到拦截器,被拦截&quot;</span>);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * false:请求被拦截,被驳回,验证出现问题</span><br><span class="hljs-comment">         * true:请求经过校验以后,是可以放行的</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:47</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> modelAndView</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 请求访问controller之后,渲染数据之前</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:47</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 请求访问controller之后,渲染数据之后</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>WebMvcConfig中注册拦截器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.tho.config;<br><br><span class="hljs-keyword">import</span> com.tho.controller.interceptor.UserTokenInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/3/13:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: WebMvcConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: RestTemplate配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-comment">// 实现静态资源的注册</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;file:\\workspace\\images\\ &quot;</span>); <span class="hljs-comment">// 映射本地静态资源</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">(RestTemplateBuilder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> builder.build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:50</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 注册拦截器</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 配置注册器信息,添加要拦截的路径</span><br><span class="hljs-comment">         */</span><br>        registry.addInterceptor(setUserTokenInterceptor())<br>                .addPathPatterns(<span class="hljs-string">&quot;/hello&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 添加拦截器到webMvcConfig中</span><br><span class="hljs-comment">         */</span><br>        WebMvcConfigurer.<span class="hljs-keyword">super</span>.addInterceptors(registry);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserTokenInterceptor <span class="hljs-title">setUserTokenInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserTokenInterceptor();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2、构建拦截器"><a href="#3-2、构建拦截器" class="headerlink" title="3.2、构建拦截器"></a>3.2、构建拦截器</h2><blockquote><p>拦截器实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"> <span class="hljs-keyword">package</span> com.tho.controller.interceptor;<br><br><span class="hljs-keyword">import</span> com.tho.utils.CommonJsonResult;<br><span class="hljs-keyword">import</span> com.tho.utils.JsonUtils;<br><span class="hljs-keyword">import</span> com.tho.utils.RedisOperator;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/21/16:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: UserTokenInterceptor</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 用户权限拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">// redis工具类</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> RedisOperator redisOperator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TOKEN = <span class="hljs-string">&quot;redis_user_token&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:46</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> boolean</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 拦截请求,在访问controller调用之前</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// System.out.println(&quot;UserTokenInterceptor&quot; + &quot;进入到拦截器,被拦截&quot;);</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * false:请求被拦截,被驳回,验证出现问题</span><br><span class="hljs-comment">         * true:请求经过校验以后,是可以放行的</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取前端 放到headers 里的参数信息</span><br><span class="hljs-comment">         */</span><br>        String userToken = request.getHeader(<span class="hljs-string">&quot;headerUserToken&quot;</span>);<br>        String userId = request.getHeader(<span class="hljs-string">&quot;headerUserId&quot;</span>);<br>        <br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(userId) &amp;&amp; StringUtils.isNotBlank(userToken)) &#123;<br>            <span class="hljs-comment">// 取出redis中的session信息</span><br>            String redisSession = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>            <span class="hljs-keyword">if</span> (StringUtils.isBlank(redisSession)) &#123;<br>                returnErrorResponse(response, CommonJsonResult.errorMsg(<span class="hljs-string">&quot;redis中没有session，请登录...&quot;</span>));<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!redisSession.equals(userToken)) &#123;<br>                    <span class="hljs-comment">// 用户传递的session与redis中的session不一样</span><br>                    returnErrorResponse(response, CommonJsonResult.errorMsg(<span class="hljs-string">&quot;账号可能异地登录...&quot;</span>));<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            returnErrorResponse(response, CommonJsonResult.errorMsg(<span class="hljs-string">&quot;前端传参有问题，请登录...&quot;</span>));<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 22:10</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> result</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 将拦截器的错误信息进行输出</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">returnErrorResponse</span><span class="hljs-params">(HttpServletResponse response, CommonJsonResult result)</span> </span>&#123;<br><br>        OutputStream out = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;text/json&quot;</span>);<br>            out = response.getOutputStream();<br>            out.write(JsonUtils.objectToJson(result).getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>            out.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭输出流</span><br>            <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    out.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 2021/11/21 16:47</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> modelAndView</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 请求访问controller之后,渲染数据之前</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:47</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 请求访问controller之后,渲染数据之后</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>WebMvcConfig中的拦截器拦截路径要修改</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.tho.config;<br><br><span class="hljs-keyword">import</span> com.tho.controller.interceptor.UserTokenInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/3/13:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: WebMvcConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: RestTemplate配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-comment">// 实现静态资源的注册</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;file:\\workspace\\images\\ &quot;</span>); <span class="hljs-comment">// 映射本地静态资源</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">(RestTemplateBuilder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> builder.build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/21 16:50</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 注册拦截器</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 配置注册器信息,添加要拦截的路径</span><br><span class="hljs-comment">         */</span><br>        registry.addInterceptor(setUserTokenInterceptor())<br>            .addPathPatterns(<span class="hljs-string">&quot;/hello&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/shopcart/add&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/shopcart/del&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;address/list&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/address/add&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/address/update&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/address/setDefault&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/address/delete&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/orders/*&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/center/*&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/userInfo/*&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/myorders/*&quot;</span>)<br>            .addPathPatterns(<span class="hljs-string">&quot;/mycomments/*&quot;</span>)<br>            .excludePathPatterns(<span class="hljs-string">&quot;/myorders/deliver&quot;</span>)<br>            .excludePathPatterns(<span class="hljs-string">&quot;/orders/notifyMerchantOrderPaid&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 添加拦截器到webMvcConfig中</span><br><span class="hljs-comment">         */</span><br>        WebMvcConfigurer.<span class="hljs-keyword">super</span>.addInterceptors(registry);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserTokenInterceptor <span class="hljs-title">setUserTokenInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserTokenInterceptor();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式会话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2021/11/30/Kafka/"/>
    <url>/2021/11/30/Kafka/</url>
    
    <content type="html"><![CDATA[<p>Kafka基本使用</p><span id="more"></span><ul><li>Kafka应用实战</li><li>Kafka高吞吐量日志收集实战</li><li>架构思考：分布式日志，跟踪，警告，分析平台</li></ul><h1 id="一、Kafka基础"><a href="#一、Kafka基础" class="headerlink" title="一、Kafka基础"></a>一、Kafka基础</h1><h2 id="1-1、Kafka介绍"><a href="#1-1、Kafka介绍" class="headerlink" title="1.1、Kafka介绍"></a>1.1、Kafka介绍</h2><ul><li>Kafka是LinkedIn开源的分布式消息系统，目前归属于Apache顶级项目</li><li>Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始目的就是用于日志收集和传输</li><li>0.8版本开始支持复制，不支持事务，对消息的丢失，重复，错误没有严格要去，适合产生大量数据的互联网服务的数据收集业务。</li></ul><blockquote><p>Kafka特点</p><ul><li>分布式特性</li><li>跨平台的特性</li><li>实时性</li><li>伸缩性</li></ul></blockquote><p>kafka的主要特点： </p><ul><li>同时为发布和订阅提供高吞吐量。据了解，Kafka每秒可以生产约25万消息（50 MB），每秒处理55万消息（110 MB）。</li><li> 可进行持久化操作。将消息持久化到磁盘，因此可用于批量消费，例如ETL，以及实时应用程序。通过将数据持久化到硬盘以及r 止数据丢失。 </li><li>分布式系统，易于向外扩展。所有的producer、broker和consumer都会有多个，均为分布式的。无需停机即可扩展机器。</li><li> 消息被处理的状态是在consumer端维护，而不是由server端维护。当失败时能自动平衡。</li><li> 支持online和offline的场景。</li></ul><h2 id="1-2、Kafka高性能原因"><a href="#1-2、Kafka高性能原因" class="headerlink" title="1.2、Kafka高性能原因"></a>1.2、Kafka高性能原因</h2><ul><li>顺序写，磁盘顺序写(不进行物理删除)</li><li>Page Cache空中接力，高效读写</li><li>后台异步，主动Flush</li><li>预读策略,IO调度</li></ul><h2 id="1-3、PageCache"><a href="#1-3、PageCache" class="headerlink" title="1.3、PageCache"></a>1.3、PageCache</h2><ul><li>操作系统主要实现的磁盘缓存(减少对磁盘IO的操作)，磁盘内容存储到内存中作为缓存</li><li>用户请求磁盘上某文件,操作系统不是直接从磁盘上读取，而是先从PageCache中找有没有该文件信息，如果没有,从磁盘读取，而且先将该文件加入到PageCache中，之后才会将该文件返回给用户 </li><li>写操作类似</li><li>零拷贝(Zero copy)</li></ul><h2 id="1-4、Kafka集群模式"><a href="#1-4、Kafka集群模式" class="headerlink" title="1.4、Kafka集群模式"></a>1.4、Kafka集群模式</h2><ul><li>借助zookeeper实现集群</li></ul><h2 id="1-5、Kafka的架构"><a href="#1-5、Kafka的架构" class="headerlink" title="1.5、Kafka的架构"></a>1.5、Kafka的架构</h2><p>​    Kafka的整体架构非常简单，是显式分布式架构，producer、broker（kafka）和consumer都可以有多个。Producer，consumer实现Kafka注册的接口，数据从pr broker，broker承担一个中间缓存和分发的作用。broker分发注册到系统中的consumer。broker的作用类似于缓存，即活跃的数据和离线处理系统之间的缓存。客 器端的通信，是基于简单，高性能，且与编程语言无关的TCP协议。</p><blockquote><p>基本概念</p></blockquote><ul><li>Topic：特指Kafka处理的消息源（feeds of messages）的不同分类。 </li><li>Partition：Topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分 序的id（offset）。 </li><li>Message：消息，是通信的基本单位，每个producer可以向一个topic（主题）发布一些消息。 </li><li>Producers：消息和数据生产者，向Kafka的一个topic发布消息的过程叫做producers。</li><li>Consumers：消息和数据消费者，订阅topics并处理其发布的消息的过程叫做consumers。 </li><li>Broker：缓存代理，Kafka集群中的一台或多台服务器统称为broker。</li></ul><blockquote><p>发送消息的流程</p></blockquote><ul><li>Producer根据指定的partition方法（round-robin、hash等），将消息发布到指定topic的partition里面 </li><li>kafka集群接收到Producer发过来的消息后，将其持久化到硬盘，并保留消息指定时长（可配置），而不关注消息是否被消费。</li><li> Consumer从kafka集群pull数据，并控制获取消息的offset</li></ul><h2 id="1-6、kafka的优秀设计"><a href="#1-6、kafka的优秀设计" class="headerlink" title="1.6、kafka的优秀设计"></a>1.6、kafka的优秀设计</h2><blockquote><p>从kafka的吞吐量、负载均衡、消息拉取、扩展性来说一说kafka的优秀设计。</p></blockquote><p>==高吞吐==是kafka需要实现的核心目标之一，为此kafka做了以下一些设计：</p><ul><li>内存访问：直接使用 linux 文件系统的cache，来高效缓存数据，对数据进行读取和写入。</li><li> 数据磁盘持久化：消息不在内存中cache，直接写入到磁盘，充分利用磁盘的顺序读写性能。 </li><li>zero-copy：减少IO操作步骤 <ul><li>采用linux Zero-Copy提高发送性能。传统的数据发送需要发送4次上下文切换，采用sendfile系统调用之后，数据直接在内核 统上下文切换减少为2次。根据测试结果，可以提高60%的数据发送性能。Zero-Copy详细的技术细节可以参考：linux官方零拷贝的介绍 </li></ul></li><li>对消息的处理： 支持数据批量发送</li></ul><h1 id="二、Kafka基本使用"><a href="#二、Kafka基本使用" class="headerlink" title="二、Kafka基本使用"></a>二、Kafka基本使用</h1><h2 id="2-1、环境配置"><a href="#2-1、环境配置" class="headerlink" title="2.1、环境配置"></a>2.1、环境配置</h2><p>⾸先准备ZOOKEEPER服务</p><p>因为 Kafka 的运⾏环境依赖于 ZooKeeper ，所以⾸先得安装并运⾏ ZooKeeper 。 </p><h3 id="1-准备Kafka安装包"><a href="#1-准备Kafka安装包" class="headerlink" title="1.准备Kafka安装包"></a>1.准备Kafka安装包</h3><p>这⾥下载的是 3.0.0 版： kafka_2.12-3.0.0.tgz ，将下载后的安装包放在了 /root/workspace/software ⽬录下</p><h3 id="2-解压并安装"><a href="#2-解压并安装" class="headerlink" title="2.解压并安装"></a>2.解压并安装</h3><ol><li>/usr/local/ 下创建 kafka ⽂件夹并进⼊</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 ~]# cd /usr/local<br>[root@centos_7_100 local]# mkdir kafka<br>[root@centos_7_100 local]# cd kafka<br></code></pre></td></tr></table></figure><ol start="2"><li>将Kafka安装包解压到 /usr/local/kafka 中即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@localhost</span> kafka]# tar -zxvf /root/workspace/software/kafka_2<span class="hljs-number">.12</span>-<span class="hljs-number">3.0</span><span class="hljs-number">.0</span>.tgz -C ./<br></code></pre></td></tr></table></figure><ol start="3"><li>解压完之后， /usr/local/kafka ⽬录中会出现⼀个 kafka_2.12-3.0.0 的⽬录</li></ol><h3 id="3-创建LOGS⽬录"><a href="#3-创建LOGS⽬录" class="headerlink" title="3.创建LOGS⽬录"></a>3.创建LOGS⽬录</h3><p>这⾥直接在 /usr/local/kafka/kafka_2.12-3.0.0 ⽬录中创建⼀个 logs ⽬录</p><p>等下该 logs ⽬录地址要配到Kafka的配置⽂件中。</p><h3 id="4-修改配置⽂件"><a href="#4-修改配置⽂件" class="headerlink" title="4.修改配置⽂件"></a>4.修改配置⽂件</h3><p>进⼊到 Kafka 的 config ⽬录，编辑配置⽂件 <code>server.properties</code></p><p>修改配置⽂件，⼀是将其中的 log.dirs 修改为上⾯刚创建的 logs ⽬录，其他选项可以按需配置</p><p>另外关注⼀下连接 ZooKeeper 的相关配置，根据实际情况进⾏配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// logs相关配置</span><br>log.dirs=/usr/local/kafka/kafka_2<span class="hljs-number">.12</span>-<span class="hljs-number">3.0</span><span class="hljs-number">.0</span>/logs<br><span class="hljs-comment">// zookeeper相关配置</span><br><span class="hljs-comment">// root directory for all kafka znodes.</span><br>zookeeper.connect=localhost:<span class="hljs-number">2181</span><br><br><span class="hljs-comment">// Timeout in ms for connecting to zookeeper</span><br>zookeeper.connection.timeout.ms=<span class="hljs-number">18000</span><br></code></pre></td></tr></table></figure><h3 id="5-启动Kafka"><a href="#5-启动Kafka" class="headerlink" title="5.启动Kafka"></a>5.启动Kafka</h3><blockquote><p>启动kafka前必须要先启动zookeeper,否则会报错</p></blockquote><p>执⾏如下命令即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">./bin/kafka-server-start.sh ./config/server.properties<br></code></pre></td></tr></table></figure><p>如果需要后台启动，则加上 -daemon 参数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">./bin/kafka-server-start.sh  -daemon ./config/server.properties<br></code></pre></td></tr></table></figure><h3 id="6-实验验证"><a href="#6-实验验证" class="headerlink" title="6.实验验证"></a>6.实验验证</h3><p>⾸先创建⼀个名为 tho 的 topic ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic tho<br><br>[root@centos_7_100 ~]# cd /usr/local/kafka/kafka_2.12-3.0.0/<br>[root@centos_7_100 kafka_2.12-3.0.0]# ./bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic tho<br>Created topic tho.<br><br></code></pre></td></tr></table></figure><p>创建完成以后，可以使⽤命令来列出⽬前已有的 topic 列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/kafka-topics.sh --list --bootstrap-server localhost:9092<br><br>[root@centos_7_100 kafka_2.12-3.0.0]# ./bin/kafka-topics.sh --list --bootstrap-server localhost:9092<br>tho<br></code></pre></td></tr></table></figure><p>查看group信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group group02<br></code></pre></td></tr></table></figure><h3 id="7-可以同时开启三个ssh连接"><a href="#7-可以同时开启三个ssh连接" class="headerlink" title="7.可以同时开启三个ssh连接"></a>7.可以同时开启三个ssh连接</h3><blockquote><p>一个连接观察kafka是否启动成功</p><p>一个用来创建生产者</p><p>一个用来创建消费者</p><p>生产者发送消息的同时可以通过消费者来观察是否成功产生消息</p></blockquote><p>接下来创建⼀个⽣产者，⽤于在 codesheep 这个 topic 上⽣产消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic tho<br></code></pre></td></tr></table></figure><p>⽽后接着创建⼀个消费者，⽤于在 codesheep 这个 topic 上获取消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic tho<br></code></pre></td></tr></table></figure><p>此时⽣产者发出的消息，在消费者端可以获取到</p><h3 id="8-实验过程中如果出现⼀些诸如客户端不能连通或访问等问题"><a href="#8-实验过程中如果出现⼀些诸如客户端不能连通或访问等问题" class="headerlink" title="8.实验过程中如果出现⼀些诸如客户端不能连通或访问等问题"></a>8.实验过程中如果出现⼀些诸如客户端不能连通或访问等问题</h3><blockquote><p>先查看zookeeper是否成功启动</p><p>ps -ef | grep zookeeper</p></blockquote><h3 id="或者可尝试考虑关闭防⽕墙："><a href="#或者可尝试考虑关闭防⽕墙：" class="headerlink" title="或者可尝试考虑关闭防⽕墙："></a>或者可尝试考虑关闭防⽕墙：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 关闭防火墙</span><br>systemctl stop firewalld.service<br>systemctl disable firewalld.service<br><span class="hljs-meta">#</span><span class="bash"> 打开防火墙</span><br><br>systemctl start firewalld.service<br>systemctl enable firewalld.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者开启9092端口</span><br><span class="hljs-meta">#</span><span class="bash"> 打开单个端口：</span><br>firewall-cmd --zone=public --add-port=9092/tcp --permanent<br><span class="hljs-meta">#</span><span class="bash"> 重启防火墙</span>    <br>systemctl restart firewalld.service<br>firewall-cmd --list-ports<br></code></pre></td></tr></table></figure><h2 id="2-2、SpringBoot整合-producer"><a href="#2-2、SpringBoot整合-producer" class="headerlink" title="2.2、SpringBoot整合-producer"></a>2.2、SpringBoot整合-producer</h2><h3 id="1-maven配置"><a href="#1-maven配置" class="headerlink" title="1.maven配置"></a>1.maven配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>Kafka-producer<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>Kafka-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Springboot 依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--相关配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fasterxml.uuid.version</span>&gt;</span>3.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">fasterxml.uuid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">org.codehaus.jackson.version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">org.codehaus.jackson.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.0.24<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">elastic-job.version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">elastic-job.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">guava.version</span>&gt;</span>20.0<span class="hljs-tag">&lt;/<span class="hljs-name">guava.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-lang3.version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">commons-lang3.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-collections.version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">commons-collections.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">curator.version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">curator.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.1.26<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用自定义日志框架 屏蔽自带的日志框架--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;exclusions&gt;</span><br><span class="hljs-comment">                &lt;exclusion&gt;</span><br><span class="hljs-comment">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="hljs-comment">                &lt;/exclusion&gt;</span><br><span class="hljs-comment">            &lt;/exclusions&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2.application.properties"></a>2.application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/producer</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Spring 整合 kafka</span><br><span class="hljs-meta">spring.kafka.bootstrap-servers</span>=<span class="hljs-string">192.168.198.100:9092</span><br><span class="hljs-comment"># kafka发送消息失败时重试的次数</span><br><span class="hljs-meta">spring.kafka.producer.retries</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"># kafka批量发送数据的配置</span><br><span class="hljs-meta">spring.kafka.producer.batch-size</span>=<span class="hljs-string">16384</span><br><span class="hljs-comment"># 设置kafka生产者内存缓存区大小(32m)</span><br><span class="hljs-meta">spring.kafka.producer.buffer-memory</span>=<span class="hljs-string">33554432</span><br><span class="hljs-comment"># kafka消息的序列化配置</span><br><span class="hljs-meta">spring.kafka.producer.key-serializer</span>=<span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br><span class="hljs-meta">spring.kafka.producer.value-serializer</span>=<span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br><span class="hljs-comment"># 这个是kafka生产端最重要的选项</span><br><span class="hljs-comment"># ack=0 ：生产者在成功写入消息之前不会等待任何来自服务器的响应</span><br><span class="hljs-comment"># ack=1 ：只要集群的首领节点收到消息，生产者就会收到一个来自服务器的成功响应</span><br><span class="hljs-comment"># acks=-1: 表示分区leader必须等待消息被成功写入到所有的ISR副本(同步副本)中才认为producer请求成功。这种方案提供最高的消息持久性保证，但是理论上吞吐率也是最差的。</span><br><span class="hljs-meta">spring.kafka.producer.acks</span>=<span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><h3 id="3-创建KafkaTemplate"><a href="#3-创建KafkaTemplate" class="headerlink" title="3.创建KafkaTemplate"></a>3.创建KafkaTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.kafka.producer;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.SendResult;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.concurrent.ListenableFuture;<br><span class="hljs-keyword">import</span> org.springframework.util.concurrent.ListenableFutureCallback;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/11/15:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> Kafka</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: KafkaProducerService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Kafka生产者服务类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaProducerService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(String topic, Object object)</span> </span>&#123;<br>        ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; future = kafkaTemplate.send(topic, object);<br><br>        future.addCallback(<span class="hljs-keyword">new</span> ListenableFutureCallback&lt;SendResult&lt;String, Object&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(Throwable throwable)</span> </span>&#123;<br>                log.info(<span class="hljs-string">&quot;发送消息失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(SendResult&lt;String, Object&gt; result)</span> </span>&#123;<br>                log.info(<span class="hljs-string">&quot;发送消息成功:&quot;</span> + result.toString());<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、SpringBoot整合-cosumer"><a href="#2-3、SpringBoot整合-cosumer" class="headerlink" title="2.3、SpringBoot整合-cosumer"></a>2.3、SpringBoot整合-cosumer</h2><blockquote><p>maven pom.xml 配置同producer</p></blockquote><h3 id="1-application-properties"><a href="#1-application-properties" class="headerlink" title="1.application.properties"></a>1.application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/consumer</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8002</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Spring 整合 kafka</span><br><span class="hljs-meta">spring.kafka.bootstrap-servers</span>=<span class="hljs-string">192.168.198.100:9092</span><br><span class="hljs-comment"># kafka consumer消息签收机制:手工签收</span><br><span class="hljs-meta">spring.kafka.consumer.enable-auto-commit</span>=<span class="hljs-string">false</span><br><br><span class="hljs-meta">spring.kafka.listener.ack-mode</span>=<span class="hljs-string">manual</span><br><span class="hljs-comment"># 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span><br><span class="hljs-comment"># latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）</span><br><span class="hljs-comment"># earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录</span><br><span class="hljs-meta">spring.kafka.consumer.auto-offset-reset</span>=<span class="hljs-string">earliest</span><br><span class="hljs-comment">## 序列化配置</span><br><span class="hljs-meta">spring.kafka.consumer.key-deserializer</span>=<span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="hljs-meta">spring.kafka.consumer.value-deserializer</span>=<span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br><br><span class="hljs-meta">spring.kafka.listener.concurrency</span>=<span class="hljs-string">5</span><br></code></pre></td></tr></table></figure><h3 id="2-consumer实现类"><a href="#2-consumer实现类" class="headerlink" title="2.consumer实现类"></a>2.consumer实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.kafka.consumer;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.Consumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.Acknowledgment;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/11/15:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> Kafka</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: KafkaConsumerService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Kafka消费者服务类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaConsumerService</span> </span>&#123;<br><br>    <span class="hljs-meta">@KafkaListener(groupId = &quot;group02&quot;, topics = &quot;topic02&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMessage</span><span class="hljs-params">(ConsumerRecord&lt;String, Object&gt; record,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Acknowledgment acknowledgment,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Consumer&lt;?, ?&gt; consumer)</span> </span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;消费端接收消息:&#123;&#125;&quot;</span>, record.value());<br>        <span class="hljs-comment">// 手工签收机制</span><br>        acknowledgment.acknowledge();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h2><h3 id="1-producer测试"><a href="#1-producer测试" class="headerlink" title="1.producer测试"></a>1.producer测试</h3><blockquote><p>producer测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> kafka.test;<br><br><span class="hljs-keyword">import</span> com.tho.kafka.Application;<br><span class="hljs-keyword">import</span> com.tho.kafka.producer.KafkaProducerService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/11/15:50</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> Kafka</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: KafkaTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Kafka 测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaProducerService kafkaProducerService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kafkaProducerTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        String topic = <span class="hljs-string">&quot;topic02&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            kafkaProducerService.sendMessage(topic, <span class="hljs-string">&quot;hello kafka:&quot;</span> + i);<br>        &#125;<br>        Thread.sleep(Integer.MAX_VALUE);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Error connecting to node node1:<span class="hljs-number">9092</span> (id: <span class="hljs-number">2</span> rack: <span class="hljs-keyword">null</span>) java.net.UnknownHostException<br></code></pre></td></tr></table></figure><blockquote><p>可能是kafka无法根据节点名称获得服务器ip地址</p><p>需要在windows系统中修改hosts文件</p><p>ip地址对应 服务器的名称 也就是服务器的hostname</p></blockquote><blockquote><p>修改为 </p><p>192.168.198.100  centos_7_100</p></blockquote><p>windows系统中,在命令行中断 cmd 中使用命令 <code>ipconfig/flushdns</code> 刷新dns缓存</p><h3 id="2-consumer测试"><a href="#2-consumer测试" class="headerlink" title="2.consumer测试"></a>2.consumer测试</h3><blockquote><p>启动kafka consumer 通过Application.java </p><p>可以看到group的信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos_7_100 kafka_2.12-3.0.0]# ./bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group group02<br><br>GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                     HOST             CLIENT-ID<br>group02         topic02         0          0               12              12              consumer-2-a54662f3-5d45-45d7-bf0e-5a169c307a11 /192.168.198.110 consumer-2<br><br></code></pre></td></tr></table></figure><p>可以打印出consumer消费的信息</p><h1 id="三、Kafka收集海量日志"><a href="#三、Kafka收集海量日志" class="headerlink" title="三、Kafka收集海量日志"></a>三、Kafka收集海量日志</h1><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>==注意的点:东八区的时间 8个小时 logstash kinaba 搜索的时候要处理好时间==</p><p>==watcher告警 搜索的字段是关键字(日志级别),错误日志信息的索引要加入模板，映射为keyword==</p><h2 id="3-1、架构设计"><a href="#3-1、架构设计" class="headerlink" title="3.1、架构设计"></a>3.1、架构设计</h2><p>适合海量数据的官方结构设计</p><p><img src="/img/Kafka.assets/image-20211211173259526.png" alt="image-20211211173259526"></p><p><img src="/img/Kafka.assets/image-20211211173747917.png" alt="image-20211211173747917"></p><p><img src="/img/Kafka.assets/image-20211211173915636.png" alt="image-20211211173915636"></p><h2 id="3-2、日志输出"><a href="#3-2、日志输出" class="headerlink" title="3.2、日志输出"></a>3.2、日志输出</h2><ul><li>Log4j2 (性能更好一些,占用服务器资源更多)</li><li>Log4j</li></ul><blockquote><p>日志分级         warn info error 级别的日志</p><p>日志过滤         需要的/不需要的</p><p>MDC线程变量 日志里的ThreadLocal</p></blockquote><h2 id="3-3、整合Springboot"><a href="#3-3、整合Springboot" class="headerlink" title="3.3、整合Springboot"></a>3.3、整合Springboot</h2><h3 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1.maven依赖"></a>1.maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Springboot 依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Kafka-logCollect<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 排除spring-boot-starter-logging --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 排除spring-boot-starter-logging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- log4j2 强依赖于disruptor框架--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lmax<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>disruptor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.58<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>collector<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 打包时包含properties、xml --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 是否替换资源中的属性--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-comment">&lt;!--springboot项目 不加会报错 没有主清单属性--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.tho.log.collect.Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-application-properties-1"><a href="#2-application-properties-1" class="headerlink" title="2.application.properties"></a>2.application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8001</span><br><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">kafka-logCollect</span><br><span class="hljs-meta">spring.http.encoding.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-meta">spring.jackson.default-property-inclusion</span>=<span class="hljs-string">NON_NULL</span><br></code></pre></td></tr></table></figure><h3 id="3-log4j2-xml"><a href="#3-log4j2-xml" class="headerlink" title="3.log4j2.xml"></a>3.log4j2.xml</h3><blockquote><p>log4j2 配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;INFO&quot;</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">&quot;Log4J-V2.0.xsd&quot;</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;600&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span>&gt;</span>logs<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_NAME&quot;</span>&gt;</span>Kafka-logCollect<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;patternLayout&quot;</span>&gt;</span>[%d&#123;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZZ&#125;] [%level&#123;length=5&#125;] [%thread-%tid] [%logger] [%X&#123;hostName&#125;] [%X&#123;ip&#125;] [%X&#123;applicationName&#125;] [%F,%L,%C,%M] [%m] ## &#x27;%ex&#x27;%n<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;patternLayout&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingRandomAccessFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;appAppender&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/app-$&#123;FILE_NAME&#125;.log&quot;</span> <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/app-$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span> &gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;patternLayout&#125;&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;500MB&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span>         <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingRandomAccessFile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingRandomAccessFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/error-$&#123;FILE_NAME&#125;.log&quot;</span> <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/error-$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span> &gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;patternLayout&#125;&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span>              <br>          <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;500MB&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span>         <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingRandomAccessFile</span>&gt;</span>            <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 业务相关 异步logger --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AsyncLogger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.tho.*&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">includeLocation</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;appAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">AsyncLogger</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AsyncLogger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.tho.*&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">includeLocation</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">AsyncLogger</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Appender-Ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Appender-Ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;appAppender&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span>         <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-打印的日志"><a href="#4-打印的日志" class="headerlink" title="4.打印的日志"></a>4.打印的日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 日志格式</span><br>[%d&#123;yyyy-MM-dd<span class="hljs-string">&#x27;T&#x27;</span>HH:mm:ss.SSSZZ&#125;]   时间<br>[%level&#123;length=<span class="hljs-number">5</span>&#125;]  日志级别<br>[%thread-%tid] 线程信息<br>[%logger] 具体的类 <br>[%X&#123;hostName&#125;] host名称<br>[%X&#123;ip&#125;] ip地址<br>[%X&#123;applicationName&#125;] 应用名称<br>[%F,%L,%C,%M]F 当前执行的类(file文件) L 行号 C <span class="hljs-class"><span class="hljs-keyword">class</span>信息 <span class="hljs-title">M</span> 方法(<span class="hljs-title">method</span>) </span><br><span class="hljs-class">[%<span class="hljs-title">m</span>]  日志<span class="hljs-title">info</span>信息</span><br><span class="hljs-class">## &#x27;%<span class="hljs-title">ex</span>&#x27;%<span class="hljs-title">n</span>                          <span class="hljs-title">ex</span>异常信息 %<span class="hljs-title">n</span> 表示换行</span><br><span class="hljs-class"></span><br><span class="hljs-class">[2021-12-11<span class="hljs-title">T18</span>:34:13.024+08:00] </span><br><span class="hljs-class">[<span class="hljs-title">INFO</span>] </span><br><span class="hljs-class">[<span class="hljs-title">main</span>-1] </span><br><span class="hljs-class">[<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">boot</span>.<span class="hljs-title">web</span>.<span class="hljs-title">embedded</span>.<span class="hljs-title">tomcat</span>.<span class="hljs-title">TomcatWebServer</span>]</span><br><span class="hljs-class">[] </span><br><span class="hljs-class">[] </span><br><span class="hljs-class">[] [<span class="hljs-title">TomcatWebServer</span>.<span class="hljs-title">java</span>,204,<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">boot</span>.<span class="hljs-title">web</span>.<span class="hljs-title">embedded</span>.<span class="hljs-title">tomcat</span>.<span class="hljs-title">TomcatWebServer</span>,<span class="hljs-title">start</span>] </span><br><span class="hljs-class">[<span class="hljs-title">Tomcat</span> <span class="hljs-title">started</span> <span class="hljs-title">on</span> <span class="hljs-title">port</span>(<span class="hljs-title">s</span>): 8001 (<span class="hljs-title">http</span>) <span class="hljs-title">with</span> <span class="hljs-title">context</span> <span class="hljs-title">path</span> &#x27;&#x27;] </span><br><span class="hljs-class">  ## &#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-4、filebeat日志收集"><a href="#3-4、filebeat日志收集" class="headerlink" title="3.4、filebeat日志收集"></a>3.4、filebeat日志收集</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">filebeat安装：<br><br>cd /usr/local<br><span class="hljs-comment">// 安装包放在 /root/workspace/software</span><br>tar -zxvf filebeat-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span>-linux-x86_64.tar.gz -C /usr/local/filebeat<br>cd /usr/local<br>mv filebeat-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span>-linux-x86_64.tar.gz/ filebeat-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span><br><br>## 配置filebeat，可以参考filebeat.full.yml中的配置。<br>vim /usr/local/filebeat-<span class="hljs-number">5.6</span><span class="hljs-number">.2</span>/filebeat.yml<br><br>filebeat启动：<br><br>## 检查配置是否正确<br>cd /usr/local/filebeat-<span class="hljs-number">6.6</span><span class="hljs-number">.0</span><br>./filebeat -c filebeat.yml -configtest<br>## Config OK<br><br>## 启动filebeat<br>/usr/local/filebeat-<span class="hljs-number">6.6</span><span class="hljs-number">.0</span>/filebeat &amp;<br>ps -ef | grep filebeat<br><br>可以通过查看 kafka的日志文件和 工程运行生成的log日志文件进行比对,当工程生成的log更新之后,查看kafka日志是否更新来判断filebeat是否启动成功<br><br><br>## 启动kafka：<br>./bin/kafka-server-start.sh ./config/server.properties<br><br>## 查看topic列表：<br>./bin/kafka-topics.sh --list --bootstrap-server localhost:<span class="hljs-number">9092</span><br><br>## 创建topic<br>./bin/kafka-topics.sh --create --bootstrap-server localhost:<span class="hljs-number">9092</span> --replication-factor <span class="hljs-number">1</span> --partitions <span class="hljs-number">1</span> --topic app-Kafka-logCollect<br>  <br>./bin/kafka-topics.sh --create --bootstrap-server localhost:<span class="hljs-number">9092</span> --replication-factor <span class="hljs-number">1</span> --partitions <span class="hljs-number">1</span> --topic error-Kafka-logCollect<br><br><br><br><br><br>## 查看topic情况<br>kafka-topics.sh --zookeeper <span class="hljs-number">192.168</span><span class="hljs-number">.11</span><span class="hljs-number">.111</span>:<span class="hljs-number">2181</span> --topic app-log-test --describe<br><br><br></code></pre></td></tr></table></figure><p>filebeat配置文件  filebeat.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><br><span class="hljs-comment"># ============================== Filebeat inputs ===============================</span><br><br><span class="hljs-attr">filebeat.prospectors:</span><br><br><span class="hljs-comment"># Each - is an input. Most options can be set at the input level, so</span><br><span class="hljs-comment"># you can use different inputs for various configurations.</span><br><span class="hljs-comment"># Below are the input specific configurations.</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">input_type:</span> <span class="hljs-string">log</span><br><br>  <span class="hljs-comment"># Paths that should be crawled and fetched. Glob based paths.</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/root/project/logs/app-Kafka-logCollect.log</span><br>    <span class="hljs-comment">#- c:\programdata\elasticsearch\logs\*</span><br>  <span class="hljs-attr">document_type:</span> <span class="hljs-string">&quot;app-log&quot;</span><br>  <span class="hljs-attr">multiline:</span> <br>    <span class="hljs-attr">pattern:</span> <span class="hljs-string">&#x27;^\[&#x27;</span> <span class="hljs-comment"># 中括号开头为日志记录</span><br>    <span class="hljs-attr">negate:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 是否匹配到</span><br>    <span class="hljs-attr">match:</span> <span class="hljs-string">after</span>    <span class="hljs-comment"># 合并到上一行的末尾</span><br>    <span class="hljs-attr">max_lines:</span> <span class="hljs-number">2000</span> <span class="hljs-comment"># 最大的行数</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">2s</span>     <span class="hljs-comment"># 如果在规定的时间内没有新的日志事件,就不用等待后面的日志信息</span><br>  <span class="hljs-attr">fields:</span><br>    <span class="hljs-attr">logbiz:</span> <span class="hljs-string">Kafka-logCollect</span><br>    <span class="hljs-attr">logtopic:</span> <span class="hljs-string">app-Kafka-logCollect</span>  <span class="hljs-comment"># 按服务划分 用作kafka topic</span><br>    <span class="hljs-attr">evn:</span> <span class="hljs-string">dev</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">input_type:</span> <span class="hljs-string">log</span><br><br><br>  <span class="hljs-comment"># Paths that should be crawled and fetched. Glob based paths.</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/root/project/logs/error-Kafka-logCollect.log</span><br>  <span class="hljs-attr">document_type:</span> <span class="hljs-string">&quot;error-log&quot;</span><br>  <span class="hljs-attr">multiline:</span> <br>    <span class="hljs-attr">pattern:</span> <span class="hljs-string">&#x27;^\[&#x27;</span> <span class="hljs-comment"># 中括号开头为日志记录</span><br>    <span class="hljs-attr">negate:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 是否匹配到</span><br>    <span class="hljs-attr">match:</span> <span class="hljs-string">after</span>    <span class="hljs-comment"># 合并到上一行的末尾</span><br>    <span class="hljs-attr">max_lines:</span> <span class="hljs-number">2000</span> <span class="hljs-comment"># 最大的行数</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">2s</span>     <span class="hljs-comment"># 如果在规定的时间内没有新的日志事件,就不用等待后面的日志信息</span><br>  <span class="hljs-attr">fields:</span><br>    <span class="hljs-attr">logbiz:</span> <span class="hljs-string">Kafka-logCollect</span><br>    <span class="hljs-attr">logtopic:</span> <span class="hljs-string">error-Kafka-logCollect</span>  <span class="hljs-comment"># 按服务划分 用作kafka topic</span><br>    <span class="hljs-attr">evn:</span> <span class="hljs-string">dev</span><br><br><br><br><span class="hljs-comment"># ============================== Filebeat modules ==============================</span><br><span class="hljs-attr">output.kafka:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;192.168.198.100:9092&quot;</span>]<br>    <span class="hljs-attr">topic:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">%&#123;[fields.logtopic]&#125;</span>&#x27;</span><br>    <br>    <span class="hljs-attr">partition.hash:</span><br>      <span class="hljs-attr">reachable_only:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">compression:</span> <span class="hljs-string">gzip</span><br>    <span class="hljs-attr">max_message_bytes:</span> <span class="hljs-number">1000000</span><br>    <span class="hljs-attr">required_acks:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">logging.to_files:</span> <span class="hljs-literal">true</span><br><br><br></code></pre></td></tr></table></figure><h2 id="3-5、logstash日志过滤"><a href="#3-5、logstash日志过滤" class="headerlink" title="3.5、logstash日志过滤"></a>3.5、logstash日志过滤</h2><h3 id="1-logstash配置"><a href="#1-logstash配置" class="headerlink" title="1.logstash配置"></a>1.logstash配置</h3><p>logstash目录下 /usr/local/logstash/logstash-6.4.3 新建文件夹 script</p><p>script文件夹下新建配置文件 logstash-script.conf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java">input &#123;<br>kafka &#123;<br>## app-log-服务名称<br>topics_pattern =&gt; <span class="hljs-string">&quot;app-Kafka-.*&quot;</span><br>bootstrap_servers =&gt; <span class="hljs-string">&quot;192.168.198.100:9092&quot;</span><br>codec =&gt; json<br>consumer_threads =&gt; <span class="hljs-number">1</span> ## 增加consumer并行消费线程数<br>decorate_events =&gt; <span class="hljs-keyword">true</span><br># auto_offset_rest =&gt; <span class="hljs-string">&quot;latest&quot;</span><br>group_id =&gt; <span class="hljs-string">&quot;app-log-group&quot;</span><br>&#125;<br><br>kafka &#123;<br>## app-log-服务名称<br>topics_pattern =&gt; <span class="hljs-string">&quot;error-Kafka-.*&quot;</span><br>bootstrap_servers =&gt; <span class="hljs-string">&quot;192.168.198.100:9092&quot;</span><br>codec =&gt; json<br>consumer_threads =&gt; <span class="hljs-number">1</span> ## 增加consumer并行消费线程数<br>decorate_events =&gt; <span class="hljs-keyword">true</span><br># auto_offset_rest =&gt; <span class="hljs-string">&quot;latest&quot;</span><br>group_id =&gt; <span class="hljs-string">&quot;error-log-group&quot;</span><br>&#125;<br>&#125;<br><br>filter &#123;<br><br>## 时区转换<br>ruby &#123;<br>code =&gt; <span class="hljs-string">&quot;event.set(&#x27;index_time&#x27;, event.timestamp.time.localtime.strftime(&#x27;%Y.%m.%d&#x27;))&quot;</span><br>&#125;<br><br><span class="hljs-keyword">if</span><span class="hljs-string">&quot;app-Kafka&quot;</span> in [fields][logtopic] &#123;<br>grok &#123;<br>## 表达式<br>match =&gt; [<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;\[%&#123;NOTSPACE:currentDateTime&#125;\] \[%&#123;NOTSPACE:level&#125;\] \[%&#123;NOTSPACE:thread-id&#125;\] \[%&#123;NOTSPACE:class&#125;\] \[%&#123;DATA:hostName&#125;\] \[%&#123;DATA:ip&#125;\] \[%&#123;DATA:applicationName&#125;\] \[%&#123;DATA:location&#125;\] \[%&#123;DATA:messageInfo&#125;\] ## (\&#x27;\&#x27;|%&#123;QUOTEDSTRING:throwable&#125;)&quot;</span>]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span><span class="hljs-string">&quot;error-Kafka&quot;</span> in [fields][logtopic] &#123;<br>grok &#123;<br>## 表达式<br>match =&gt; [<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;\[%&#123;NOTSPACE:currentDateTime&#125;\] \[%&#123;NOTSPACE:level&#125;\] \[%&#123;NOTSPACE:thread-id&#125;\] \[%&#123;NOTSPACE:class&#125;\] \[%&#123;DATA:hostName&#125;\] \[%&#123;DATA:ip&#125;\] \[%&#123;DATA:applicationName&#125;\] \[%&#123;DATA:location&#125;\] \[%&#123;DATA:messageInfo&#125;\] ## (\&#x27;\&#x27;|%&#123;QUOTEDSTRING:throwable&#125;)&quot;</span>]<br>&#125;<br>&#125;<br><br><br><br>&#125;<br>## 测试输出到控制台<br>output &#123;<br>stdout &#123;codec =&gt; rubydebug&#125;<br>&#125;<br><br>## 输出到elasticSearch<br>output &#123;<br><br><span class="hljs-keyword">if</span><span class="hljs-string">&quot;app-Kafka&quot;</span> in [fields][logtopic] &#123;<br><br>## es插件<br>elasticsearch &#123;<br># es地址<br>hosts =&gt; [<span class="hljs-string">&quot;192.168.198.100:9200&quot;</span>]<br># 同步的索引名<br>index =&gt; <span class="hljs-string">&quot;app-log-%&#123;[fields][logbiz]&#125;-%&#123;index_time&#125;&quot;</span><br># 设置 _docID 和 数据相同<br># document_id =&gt; <span class="hljs-string">&quot;%&#123;itemId&#125;&quot;</span> <br><br># 定义模板名称<br># template_name =&gt; <span class="hljs-string">&quot;myik&quot;</span><br># 模板所在位置<br># template =&gt; <span class="hljs-string">&quot;/usr/local/logstash/logstash-6.4.3/sync/logstash-ik.json&quot;</span><br># 重写模板<br># template_overwrite =&gt; <span class="hljs-keyword">true</span><br># 默认为<span class="hljs-keyword">true</span>,<span class="hljs-keyword">false</span>关闭logstash自动管理模板功能，如果自定义模板,则设置为<span class="hljs-keyword">false</span><br>manage_template =&gt; <span class="hljs-keyword">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span><span class="hljs-string">&quot;error-Kafka&quot;</span> in [fields][logtopic] &#123;<br><br>## es插件<br>elasticsearch &#123;<br># es地址<br>hosts =&gt; [<span class="hljs-string">&quot;192.168.198.100:9200&quot;</span>]<br># 同步的索引名<br>index =&gt; <span class="hljs-string">&quot;app-log-%&#123;[fields][logbiz]&#125;-%&#123;index_time&#125;&quot;</span><br># 设置 _docID 和 数据相同<br># document_id =&gt; <span class="hljs-string">&quot;%&#123;itemId&#125;&quot;</span> <br><br># 定义模板名称<br># template_name =&gt; <span class="hljs-string">&quot;myik&quot;</span><br># 模板所在位置<br># template =&gt; <span class="hljs-string">&quot;/usr/local/logstash/logstash-6.4.3/sync/logstash-ik.json&quot;</span><br># 重写模板<br># template_overwrite =&gt; <span class="hljs-keyword">true</span><br># 默认为<span class="hljs-keyword">true</span>,<span class="hljs-keyword">false</span>关闭logstash自动管理模板功能，如果自定义模板,则设置为<span class="hljs-keyword">false</span><br>manage_template =&gt; <span class="hljs-keyword">true</span><br>&#125;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-启动logstash"><a href="#2-启动logstash" class="headerlink" title="2.启动logstash"></a>2.启动logstash</h3><blockquote><p>进入logstash 的 bin目录 执行命令 <code>./logstash -f /usr/local/logstash/logstash-6.4.3/script/logstash-script.conf</code></p></blockquote><blockquote><p>可以通过kafka来查看结果 查看group信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> logstash-script.conf 配置文件中配置了两种日志类型各自的groupId</span> <br>./bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group app-log-group<br></code></pre></td></tr></table></figure><h2 id="3-6、日志持久化，可视化"><a href="#3-6、日志持久化，可视化" class="headerlink" title="3.6、日志持久化，可视化"></a>3.6、日志持久化，可视化</h2><blockquote><p>ElasticSearch 索引创建周期,命名规范选择</p><p>Kibana控制台应用，可视化日志</p><p>监控告警 Watcher 插件基本使用 WatchApi</p></blockquote><ul><li>启动filebeat</li><li>kafka (启动kafka之前需要启动zk)</li><li>logstash</li></ul><p>启动ElasticSearch =&gt; 将日志持久化到es上</p><p>配置好kibana控制台</p><h3 id="1-配置kibana"><a href="#1-配置kibana" class="headerlink" title="1.配置kibana"></a>1.配置kibana</h3><blockquote><ul><li>解压缩kibana安装包</li><li>修改配置文件 kibana.yml</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">server.port: <span class="hljs-number">5601</span><br>server.host: <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>server.name: <span class="hljs-string">&quot;kibana_198.100&quot;</span><br>elasticsearch.hosts: [<span class="hljs-string">&quot;http://192.168.198.100:9200&quot;</span>]<br>#elasticsearch.username: <span class="hljs-string">&quot;kibana_system&quot;</span><br>#elasticsearch.password: <span class="hljs-string">&quot;pass&quot;</span><br>i18n.locale: <span class="hljs-string">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-启动kibana"><a href="#2-启动kibana" class="headerlink" title="2.启动kibana"></a>2.启动kibana</h3><h4 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a><strong>启动kibana</strong></h4><p>该命令在kibana的bin目录下面</p><p>启动时间会稍微较长</p><p><code>./kibana --allow-root</code></p><h3 id="3-kibana配置"><a href="#3-kibana配置" class="headerlink" title="3.kibana配置"></a>3.kibana配置</h3><blockquote><p>elasticSearch 和 kibana全部配置好 x-pack插件</p><p>elasticSearch 设置账户密码 依赖于ealsticSearch 的 应用要配置好es的账户密码</p></blockquote><blockquote><p>kibana配置可视化查看es数据</p><p>kibana界面左侧最底部的 </p><p>1.Stack Management</p><p>2.Kibana选项下的 索引模式</p><p>3.创建索引模式</p><p>4.名称 app-log-* 查看右侧是否匹配成功 </p><p>​    时间戳字段选择 currentDateTime</p><p>5.创建索引成功,回到主页,选择Analytics下的 Discover 查看具体的es信息</p></blockquote><h2 id="3-7、watcher监控告警"><a href="#3-7、watcher监控告警" class="headerlink" title="3.7、watcher监控告警"></a>3.7、watcher监控告警</h2><h3 id="1-watch配置"><a href="#1-watch配置" class="headerlink" title="1.watch配置"></a>1.watch配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java">## 创建一个watcher,比如定义一个trigger 每个10s钟看一下input里的数据<br>## 创建一个watcher,比如定义一个trigger 每个5s钟看一下input里的数据<br>PUT _xpack/watcher/watch/error_log_collector_watcher<br>&#123;<br>  <span class="hljs-string">&quot;trigger&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;schedule&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;5s&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;input&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;search&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;request&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;indices&quot;</span>: [<span class="hljs-string">&quot;&lt;error-log-error-collect-&#123;now+8h/d&#125;&gt;&quot;</span>],<br>        <span class="hljs-string">&quot;body&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;must&quot;</span>: [<br>                  &#123;<br>                    <span class="hljs-string">&quot;term&quot;</span>: &#123;<span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-string">&quot;ERROR&quot;</span>&#125;<br>                  &#125;<br>              ],<br>              <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;currentDateTime&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;gt&quot;</span>: <span class="hljs-string">&quot;now-30s&quot;</span> , <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;now&quot;</span><br>                  &#125;<br>                &#125;<br>              &#125; <br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-string">&quot;condition&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;compare&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;ctx.payload.hits.total&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gt&quot;</span>: <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br>  &#125;,<br> <br>  <span class="hljs-string">&quot;transform&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;search&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;request&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;indices&quot;</span>: [<span class="hljs-string">&quot;&lt;error-log-error-collect-&#123;now+8h/d&#125;&gt;&quot;</span>],<br>        <span class="hljs-string">&quot;body&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;must&quot;</span>: [<br>                  &#123;<br>                    <span class="hljs-string">&quot;term&quot;</span>: &#123;<span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-string">&quot;ERROR&quot;</span>&#125;<br>                  &#125;<br>              ],<br>              <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;currentDateTime&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;gt&quot;</span>: <span class="hljs-string">&quot;now-30s&quot;</span> , <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;now&quot;</span><br>                  &#125;<br>                &#125;<br>              &#125; <br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;sort&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;currentDateTime&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>                &#125;<br>            &#125;<br>          ]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;actions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test_error&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;webhook&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;method&quot;</span> : <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span> : <span class="hljs-string">&quot;http://192.168.198.100:8001/accurateWatch&quot;</span>,<br>        <span class="hljs-string">&quot;body&quot;</span> : <span class="hljs-string">&quot;&#123;\&quot;title\&quot;: \&quot;异常错误告警\&quot;, \&quot;applicationName\&quot;: \&quot;&#123;&#123;#ctx.payload.hits.hits&#125;&#125;&#123;&#123;_source.applicationName&#125;&#125;&#123;&#123;/ctx.payload.hits.hits&#125;&#125;\&quot;, \&quot;level\&quot;:\&quot;告警级别P1\&quot;, \&quot;body\&quot;: \&quot;&#123;&#123;#ctx.payload.hits.hits&#125;&#125;&#123;&#123;_source.messageInfo&#125;&#125;&#123;&#123;/ctx.payload.hits.hits&#125;&#125;\&quot;, \&quot;executionTime\&quot;: \&quot;&#123;&#123;#ctx.payload.hits.hits&#125;&#125;&#123;&#123;_source.currentDateTime&#125;&#125;&#123;&#123;/ctx.payload.hits.hits&#125;&#125;\&quot;&#125;&quot;</span><br>      &#125;<br>    &#125;<br> &#125;<br>&#125;<br><br># 查看一个watcher<br># <br>GET _xpack/watcher/watch/error_log_collector_watcher<br><br><br>#删除一个watcher<br>DELETE _xpack/watcher/watch/error_log_collector_watcher<br><br>#执行watcher<br># POST _xpack/watcher/watch/error_log_collector_watcher/_execute<br><br>#查看执行结果<br>GET /.watcher-history*/_search?pretty<br>&#123;<br>  <span class="hljs-string">&quot;sort&quot;</span> : [<br>    &#123; <span class="hljs-string">&quot;result.execution_time&quot;</span> : <span class="hljs-string">&quot;desc&quot;</span> &#125;<br>  ],<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;watch_id&quot;</span>: <span class="hljs-string">&quot;error_log_collector_watcher&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>GET error-log-collector-<span class="hljs-number">2019.09</span><span class="hljs-number">.18</span>/_search?size=<span class="hljs-number">10</span><br>&#123;<br><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-string">&quot;ERROR&quot;</span><br>    &#125;<br>  &#125;<br>  ,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>        <span class="hljs-string">&quot;currentDateTime&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>        &#125;<br>    &#125;<br>  ] <br>&#125;<br><br><br>GET error-log-collector-<span class="hljs-number">2019.09</span><span class="hljs-number">.18</span>/_search?size=<span class="hljs-number">10</span><br>&#123;<br><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-string">&quot;ERROR&quot;</span><br>    &#125;<br>  &#125;<br>  ,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>        <span class="hljs-string">&quot;currentDateTime&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>        &#125;<br>    &#125;<br>  ] <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-创建错误日志信息模板"><a href="#2-创建错误日志信息模板" class="headerlink" title="2.创建错误日志信息模板"></a>2.创建错误日志信息模板</h3><blockquote><p>错误的日志 error-log 索引需要的模板如下</p><p>需要该索引字段来进行watcher的监控警告</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT _template/error-log-<br>&#123;<br>  <span class="hljs-attr">&quot;template&quot;</span>: <span class="hljs-string">&quot;error-log-*&quot;</span>,<br>  <span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;refresh_interval&quot;</span>: <span class="hljs-string">&quot;5s&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <br>      <span class="hljs-attr">&quot;dynamic_templates&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;message_field&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>            <span class="hljs-attr">&quot;path_match&quot;</span>: <span class="hljs-string">&quot;message&quot;</span>,<br>            <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;norms&quot;</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>              <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;throwable_field&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>            <span class="hljs-attr">&quot;path_match&quot;</span>: <span class="hljs-string">&quot;throwable&quot;</span>,<br>            <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;norms&quot;</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>              <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;string_fields&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>            <span class="hljs-attr">&quot;match&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>            <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;norms&quot;</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>              <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>              <span class="hljs-attr">&quot;fields&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;keyword&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>                &#125;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-attr">&quot;properties&quot;</span>: &#123;         <br>        <span class="hljs-attr">&quot;hostName&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;ip&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ip&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;level&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br><span class="hljs-attr">&quot;currentDateTime&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>&#125;<br>      &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-可以ack掉watcher告警信息"><a href="#3-可以ack掉watcher告警信息" class="headerlink" title="3.可以ack掉watcher告警信息"></a>3.可以ack掉watcher告警信息</h3><h2 id="3-8、watcher相关学习"><a href="#3-8、watcher相关学习" class="headerlink" title="3.8、watcher相关学习"></a>3.8、watcher相关学习</h2>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2021/11/20/Redis/"/>
    <url>/2021/11/20/Redis/</url>
    
    <content type="html"><![CDATA[<p>Redis</p><span id="more"></span><h1 id="一、Redis基础"><a href="#一、Redis基础" class="headerlink" title="一、Redis基础"></a>一、Redis基础</h1><p>Nosql常见分类</p><ul><li>键值对数据库  Redis,Memcache</li><li>列存储数据库  Hbase,Cassandra</li><li>文档型数据库  MongoDB,CouchDB</li><li>图形数据库     Neo4j,FlockDB</li></ul><blockquote><p>分布式缓存 </p><ul><li>提示读取速度性能</li><li>分布式计算领域</li><li>为数据库降低查询压力</li><li>跨服务器缓存</li><li>内存式缓存</li></ul></blockquote><blockquote><p>Redis </p><ul><li>分布式缓存中间件</li><li>key-value 存储</li><li>提供海量数据存储访问,读取更快,非关系型,分布式,开源,水平扩展</li></ul></blockquote><h2 id="1-1、缓存方案对比"><a href="#1-1、缓存方案对比" class="headerlink" title="1.1、缓存方案对比"></a>1.1、缓存方案对比</h2><blockquote><p>Ehcache </p><ul><li>基于java开发,基于jvm缓存 简单，轻巧，方便</li><li>集群,分布式不支持</li></ul><p>Memcache</p><ul><li>简单的 key-value存储</li><li>内存使用率较高</li><li>多核，多线程</li><li>无法容灾,无法持久化</li></ul><p>Redis</p><ul><li>丰富的数据结构</li><li>持久化</li><li>主从同步,故障转移,内存数据库</li><li>单线程</li></ul></blockquote><h2 id="1-2、Redis环境配置"><a href="#1-2、Redis环境配置" class="headerlink" title="1.2、Redis环境配置"></a>1.2、Redis环境配置</h2><p>（Linux环境)</p><ol><li><p>官网下载redis安装包 <code>redis-6.2.6.tar.gz</code></p></li><li><p>建立 <code>/usr/local/redis</code> 文件夹并进入</p><p> <code>tar zxvf /root/workspace/software/redis-6.2.6.tar.gz -C ./</code></p></li><li><p>进入 <code>redis-6.2.6</code> 文件夹</p><p> 执行命令 <code>make &amp;&amp; make install</code></p></li><li><p>将配置文件由  /usr/local/redis/redis-6.2.6  拷贝一份到  <code>/usr/local/redis</code> 下</p></li><li><p>修改配置文件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">bind <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> 改为 bind <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> # 保证外网能够访问本地redis<br>#requirepass foobared 改为   requirepass <span class="hljs-number">123456</span> # redis访问时密码<br>daemonize no 改为 daemonize yes # 保证redis后台运行 <br>dir ./ 改为  dir /usr/local/redis/workspace # 指定Redis工作目录<br></code></pre></td></tr></table></figure></li><li><p>redis开机自启动</p><p> 拷贝 <code>/usr/local/redis/redis-6.2.6/utils</code>目录下  <code>redis_init_script</code> 到 /etc/init.d</p><p> 脚本内容为</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">#!/bin/sh<br>#<br># Simple Redis init.d script conceived to work on Linux systems<br># as it does use of the /proc filesystem.<br><br>### BEGIN INIT INFO<br># Provides:     redis_6379<br># Default-Start:        <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br># Default-Stop:         <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span><br># Short-Description:    Redis data structure server<br># Description:          Redis data structure server. See https:<span class="hljs-comment">//redis.io</span><br>### END INIT INFO<br><br>#chkconfig <span class="hljs-number">22345</span> <span class="hljs-number">10</span> <span class="hljs-number">90</span><br>#description: Start and Stop redis<br><br>REDISPORT=<span class="hljs-number">6379</span><br>EXEC=/usr/local/bin/redis-server<br>CLIEXEC=/usr/local/bin/redis-cli<br><br>PIDFILE=/<span class="hljs-keyword">var</span>/run/redis_$&#123;REDISPORT&#125;.pid<br>CONF=<span class="hljs-string">&quot;/usr/local/redis/redis.conf&quot;</span>  # 要改为配置文件所在位置<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;$1&quot;</span> in<br>    start)<br>        <span class="hljs-keyword">if</span> [ -f $PIDFILE ]<br>        then<br>                echo <span class="hljs-string">&quot;$PIDFILE exists, process is already running or crashed&quot;</span><br>        <span class="hljs-keyword">else</span><br>                echo <span class="hljs-string">&quot;Starting Redis server...&quot;</span><br>                $EXEC $CONF<br>        fi<br>        ;;<br>    stop)<br>        <span class="hljs-keyword">if</span> [ ! -f $PIDFILE ]<br>        then<br>                echo <span class="hljs-string">&quot;$PIDFILE does not exist, process is not running&quot;</span><br>        <span class="hljs-keyword">else</span><br>                PID=$(cat $PIDFILE)<br>                echo <span class="hljs-string">&quot;Stopping ...&quot;</span><br>                $CLIEXEC -p $REDISPORT shutdown<br>                <span class="hljs-keyword">while</span> [ -x /proc/$&#123;PID&#125; ]<br>                <span class="hljs-keyword">do</span><br>                    echo <span class="hljs-string">&quot;Waiting for Redis to shutdown ...&quot;</span><br>                    sleep <span class="hljs-number">1</span><br>                done<br>                echo <span class="hljs-string">&quot;Redis stopped&quot;</span><br>        fi<br>        ;;<br>    *)<br>        echo <span class="hljs-string">&quot;Please use start or stop as first argument&quot;</span><br>        ;;<br>esac<br><br></code></pre></td></tr></table></figure><p> 8.<code>ps -ef | grep redis</code> 查看redis启动情况</p><p> 9.redis_init_script 启动脚本中加入密码 41行代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">#!/bin/sh<br>#<br># Simple Redis init.d script conceived to work on Linux systems<br># as it does use of the /proc filesystem.<br><br>### BEGIN INIT INFO<br># Provides:     redis_6379<br># Default-Start:        <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br># Default-Stop:         <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span><br># Short-Description:    Redis data structure server<br># Description:          Redis data structure server. See https:<span class="hljs-comment">//redis.io</span><br>### END INIT INFO<br><br>#chkconfig <span class="hljs-number">22345</span> <span class="hljs-number">10</span> <span class="hljs-number">90</span><br>#description: Start and Stop redis<br><br>REDISPORT=<span class="hljs-number">6379</span><br>EXEC=/usr/local/bin/redis-server<br>CLIEXEC=/usr/local/bin/redis-cli<br><br>PIDFILE=/<span class="hljs-keyword">var</span>/run/redis_$&#123;REDISPORT&#125;.pid<br>CONF=<span class="hljs-string">&quot;/usr/local/redis/redis.conf&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;$1&quot;</span> in<br>    start)<br>        <span class="hljs-keyword">if</span> [ -f $PIDFILE ]<br>        then<br>                echo <span class="hljs-string">&quot;$PIDFILE exists, process is already running or crashed&quot;</span><br>        <span class="hljs-keyword">else</span><br>                echo <span class="hljs-string">&quot;Starting Redis server...&quot;</span><br>                $EXEC $CONF<br>        fi<br>        ;;<br>    stop)<br>        <span class="hljs-keyword">if</span> [ ! -f $PIDFILE ]<br>        then<br>                echo <span class="hljs-string">&quot;$PIDFILE does not exist, process is not running&quot;</span><br>        <span class="hljs-keyword">else</span><br>                PID=$(cat $PIDFILE)<br>                echo <span class="hljs-string">&quot;Stopping ...&quot;</span><br>                $CLIEXEC -a <span class="hljs-string">&quot;123456&quot;</span> -p $REDISPORT shutdown # 加入redis密码 -a <span class="hljs-string">&quot;123465&quot;</span><br>                <span class="hljs-keyword">while</span> [ -x /proc/$&#123;PID&#125; ]<br>                <span class="hljs-keyword">do</span><br>                    echo <span class="hljs-string">&quot;Waiting for Redis to shutdown ...&quot;</span><br>                    sleep <span class="hljs-number">1</span><br>                done<br>                echo <span class="hljs-string">&quot;Redis stopped&quot;</span><br>        fi<br>        ;;<br>    *)<br>        echo <span class="hljs-string">&quot;Please use start or stop as first argument&quot;</span><br>        ;;<br>esac<br><br></code></pre></td></tr></table></figure><blockquote><p>在<code>/etc/init.d</code> 目录下 通过   可以停止redis服务  </p><p><code>./redis_init_script start</code> 启动redis</p><p><code>./redis_init_script stop</code> 关闭redis</p></blockquote></li></ol><h2 id="1-3、Redis基本数据类型"><a href="#1-3、Redis基本数据类型" class="headerlink" title="1.3、Redis基本数据类型"></a>1.3、Redis基本数据类型</h2><h3 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h3><blockquote><p>String 键值对</p><p>Redis 默认16个库，默认使用0号库</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">get/set/del  查/改/删<br>set key value <span class="hljs-comment">// 会覆盖存在的值</span><br>setnx key value <span class="hljs-comment">// 不会覆盖存在的值</span><br>set key value ex time <span class="hljs-comment">// 设置过期时间数据</span><br>expire age <span class="hljs-number">30</span> <span class="hljs-comment">// 30s过期时间</span><br>ttl - time to leave <span class="hljs-comment">// 查看过期时间  </span><br>  <br>append key : 合并/追加字符串<br>strlen key：字符串长度<br><br><br>incr <span class="hljs-comment">// 累加 incrby</span><br>decr <span class="hljs-comment">// 累减 decrby</span><br>getrange <span class="hljs-comment">// 截取数据 end = -1 表示截取到最后</span><br>setrange <span class="hljs-comment">// 从start位置开始替换数据</span><br>mset  <span class="hljs-comment">// 连续设值</span><br>mget  <span class="hljs-comment">// 连续取值</span><br>msetnx  <span class="hljs-comment">// 连续设值,如果存在则不设置</span><br>  <br>select index <span class="hljs-comment">// 选择数据库</span><br>flushdb <span class="hljs-comment">// 清除本库内容</span><br>flushall <span class="hljs-comment">// 清除所有库内容 </span><br></code></pre></td></tr></table></figure><h3 id="2、Hash"><a href="#2、Hash" class="headerlink" title="2、Hash"></a>2、Hash</h3><blockquote><p>hash</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-function">hset user name <span class="hljs-title">tho</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; hget user name</span><br><span class="hljs-function">&quot;tho&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hmset user age 19 sex &quot;man&quot;</span><br><span class="hljs-function">OK</span><br><span class="hljs-function">127.0.0.1:6379&gt; hmget user name age</span><br><span class="hljs-function">1) &quot;tho&quot;</span><br><span class="hljs-function">2) &quot;19&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hgetall user</span><br><span class="hljs-function">1) &quot;name&quot;</span><br><span class="hljs-function">2) &quot;tho&quot;</span><br><span class="hljs-function">3) &quot;age&quot;</span><br><span class="hljs-function">4) &quot;19&quot;</span><br><span class="hljs-function">5) &quot;sex&quot;</span><br><span class="hljs-function">6) &quot;man&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hlen <span class="hljs-title">user</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 3</span><br><span class="hljs-function">127.0.0.1:6379&gt; hkeys user</span><br><span class="hljs-function">1) &quot;name&quot;</span><br><span class="hljs-function">2) &quot;age&quot;</span><br><span class="hljs-function">3) &quot;sex&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hvals user</span><br><span class="hljs-function">1) &quot;tho&quot;</span><br><span class="hljs-function">2) &quot;19&quot;</span><br><span class="hljs-function">3) &quot;man&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hincrby user age 6</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 25</span><br><span class="hljs-function">127.0.0.1:6379&gt; hincrby user age 6</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 31</span><br><span class="hljs-function">127.0.0.1:6379&gt; hincrby user age 6</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 37</span><br><span class="hljs-function">127.0.0.1:6379&gt; hincrbyfloat user age 0.6</span><br><span class="hljs-function">&quot;37.6&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hincrbyfloat user age 0.6</span><br><span class="hljs-function">&quot;38.2&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hincrbyfloat user age 0.6</span><br><span class="hljs-function">&quot;38.8&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hexists user <span class="hljs-title">age</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; hdel user <span class="hljs-title">age</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; hdel user <span class="hljs-title">name</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; hgetall user</span><br><span class="hljs-function">1) &quot;sex&quot;</span><br><span class="hljs-function">2) &quot;man&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; hdel user <span class="hljs-title">sex</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; hgetall <span class="hljs-title">user</span></span><br><span class="hljs-function"><span class="hljs-params">(empty array)</span></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h3 id="3、List"><a href="#3、List" class="headerlink" title="3、List"></a>3、List</h3><blockquote><p>list</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-function">lpush list1 pig pow sheep <span class="hljs-title">duck</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 4</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;duck&quot;</span><br><span class="hljs-function">2) &quot;sheep&quot;</span><br><span class="hljs-function">3) &quot;pow&quot;</span><br><span class="hljs-function">4) &quot;pig&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; rpush list2 pig pow sheep <span class="hljs-title">duck</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 4</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="hljs-function">1) &quot;pig&quot;</span><br><span class="hljs-function">2) &quot;pow&quot;</span><br><span class="hljs-function">3) &quot;sheep&quot;</span><br><span class="hljs-function">4) &quot;duck&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lpop list1</span><br><span class="hljs-function">&quot;duck&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;sheep&quot;</span><br><span class="hljs-function">2) &quot;pow&quot;</span><br><span class="hljs-function">3) &quot;pig&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; rpop list1</span><br><span class="hljs-function">&quot;pig&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;sheep&quot;</span><br><span class="hljs-function">2) &quot;pow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; llen <span class="hljs-title">list1</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 2</span><br><span class="hljs-function">127.0.0.1:6379&gt; llen <span class="hljs-title">list2</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 4</span><br><span class="hljs-function">127.0.0.1:6379&gt; rpop list2</span><br><span class="hljs-function">&quot;duck&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lindex list1 0</span><br><span class="hljs-function">&quot;sheep&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lindex list1 1</span><br><span class="hljs-function">&quot;pow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lset list1 0 123556</span><br><span class="hljs-function">OK</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;123556&quot;</span><br><span class="hljs-function">2) &quot;pow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; linsert list1 before pow 999</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 3</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;123556&quot;</span><br><span class="hljs-function">2) &quot;999&quot;</span><br><span class="hljs-function">3) &quot;pow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; linsert list1 after pow 999</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 4</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;123556&quot;</span><br><span class="hljs-function">2) &quot;999&quot;</span><br><span class="hljs-function">3) &quot;pow&quot;</span><br><span class="hljs-function">4) &quot;999&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrem list1 2 999</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 2</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;123556&quot;</span><br><span class="hljs-function">2) &quot;pow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; ltrim list1 1 -1</span><br><span class="hljs-function">OK</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="hljs-function">1) &quot;pow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; del <span class="hljs-title">list2</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="hljs-function"><span class="hljs-params">(empty array)</span></span><br><span class="hljs-function">127.0.0.1:6379&gt; keys *</span><br><span class="hljs-function">1) &quot;list1&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4、Set"><a href="#4、Set" class="headerlink" title="4、Set"></a>4、Set</h3><blockquote><p>set不重复  集合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-function">sadd set duck pig cow sheep pig <span class="hljs-title">cow</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 4</span><br><span class="hljs-function">127.0.0.1:6379&gt; smembers set</span><br><span class="hljs-function">1) &quot;sheep&quot;</span><br><span class="hljs-function">2) &quot;cow&quot;</span><br><span class="hljs-function">3) &quot;duck&quot;</span><br><span class="hljs-function">4) &quot;pig&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; scard <span class="hljs-title">set</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 4</span><br><span class="hljs-function">127.0.0.1:6379&gt; sismember set <span class="hljs-title">pig</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; sismember set <span class="hljs-title">pi</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 0</span><br><span class="hljs-function">127.0.0.1:6379&gt; srem set <span class="hljs-title">duck</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; smembers set</span><br><span class="hljs-function">1) &quot;cow&quot;</span><br><span class="hljs-function">2) &quot;pig&quot;</span><br><span class="hljs-function">3) &quot;sheep&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; spop set </span><br><span class="hljs-function">&quot;cow&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; spop set </span><br><span class="hljs-function">&quot;pig&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; sadd set <span class="hljs-title">cow</span> </span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; sadd set <span class="hljs-title">pig</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; sadd set1 1 2 3 4 5 6 7 8 9</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 9</span><br><span class="hljs-function">127.0.0.1:6379&gt; smembers set1</span><br><span class="hljs-function">1) &quot;1&quot;</span><br><span class="hljs-function">2) &quot;2&quot;</span><br><span class="hljs-function">3) &quot;3&quot;</span><br><span class="hljs-function">4) &quot;4&quot;</span><br><span class="hljs-function">5) &quot;5&quot;</span><br><span class="hljs-function">6) &quot;6&quot;</span><br><span class="hljs-function">7) &quot;7&quot;</span><br><span class="hljs-function">8) &quot;8&quot;</span><br><span class="hljs-function">9) &quot;9&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; srandmember set1 3</span><br><span class="hljs-function">1) &quot;5&quot;</span><br><span class="hljs-function">2) &quot;6&quot;</span><br><span class="hljs-function">3) &quot;8&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; srandmember set1 3</span><br><span class="hljs-function">1) &quot;5&quot;</span><br><span class="hljs-function">2) &quot;9&quot;</span><br><span class="hljs-function">3) &quot;4&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; srandmember set1 3</span><br><span class="hljs-function">1) &quot;9&quot;</span><br><span class="hljs-function">2) &quot;3&quot;</span><br><span class="hljs-function">3) &quot;1&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; srandmember set1 3</span><br><span class="hljs-function">1) &quot;7&quot;</span><br><span class="hljs-function">2) &quot;4&quot;</span><br><span class="hljs-function">3) &quot;8&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; srandmember set1 3</span><br><span class="hljs-function">1) &quot;2&quot;</span><br><span class="hljs-function">2) &quot;1&quot;</span><br><span class="hljs-function">3) &quot;4&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt;  sadd set2 2 1 3 7 9 11 13 15  </span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 8</span><br><span class="hljs-function">127.0.0.1:6379&gt; smove set1 set2 6</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; smembers set1</span><br><span class="hljs-function">1) &quot;1&quot;</span><br><span class="hljs-function">2) &quot;2&quot;</span><br><span class="hljs-function">3) &quot;3&quot;</span><br><span class="hljs-function">4) &quot;4&quot;</span><br><span class="hljs-function">5) &quot;5&quot;</span><br><span class="hljs-function">6) &quot;7&quot;</span><br><span class="hljs-function">7) &quot;8&quot;</span><br><span class="hljs-function">8) &quot;9&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; smembers set2</span><br><span class="hljs-function">1) &quot;1&quot;</span><br><span class="hljs-function">2) &quot;2&quot;</span><br><span class="hljs-function">3) &quot;3&quot;</span><br><span class="hljs-function">4) &quot;6&quot;</span><br><span class="hljs-function">5) &quot;7&quot;</span><br><span class="hljs-function">6) &quot;9&quot;</span><br><span class="hljs-function">7) &quot;11&quot;</span><br><span class="hljs-function">8) &quot;13&quot;</span><br><span class="hljs-function">9) &quot;15&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; sdiff set1 set2</span><br><span class="hljs-function">1) &quot;4&quot;</span><br><span class="hljs-function">2) &quot;5&quot;</span><br><span class="hljs-function">3) &quot;8&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; sinter set1 set2</span><br><span class="hljs-function">1) &quot;1&quot;</span><br><span class="hljs-function">2) &quot;2&quot;</span><br><span class="hljs-function">3) &quot;3&quot;</span><br><span class="hljs-function">4) &quot;7&quot;</span><br><span class="hljs-function">5) &quot;9&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; sunion set1 set2</span><br><span class="hljs-function"> 1) &quot;1&quot;</span><br><span class="hljs-function"> 2) &quot;2&quot;</span><br><span class="hljs-function"> 3) &quot;3&quot;</span><br><span class="hljs-function"> 4) &quot;4&quot;</span><br><span class="hljs-function"> 5) &quot;5&quot;</span><br><span class="hljs-function"> 6) &quot;6&quot;</span><br><span class="hljs-function"> 7) &quot;7&quot;</span><br><span class="hljs-function"> 8) &quot;8&quot;</span><br><span class="hljs-function"> 9) &quot;9&quot;</span><br><span class="hljs-function">10) &quot;11&quot;</span><br><span class="hljs-function">11) &quot;13&quot;</span><br><span class="hljs-function">12) &quot;15&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5、Zset"><a href="#5、Zset" class="headerlink" title="5、Zset"></a>5、Zset</h3><blockquote><p>Zset 有序的set sorted set</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zadd zset <span class="hljs-number">10</span> duck <span class="hljs-number">20</span> pig <span class="hljs-number">30</span> chicken <span class="hljs-number">40</span> beef <span class="hljs-number">50</span> sheep<br>(integer) <span class="hljs-number">5</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrange zset <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;duck&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;pig&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;chicken&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;beef&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;sheep&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrange zset <span class="hljs-number">0</span> -<span class="hljs-number">1</span> withscores<br> <span class="hljs-number">1</span>) <span class="hljs-string">&quot;duck&quot;</span><br> <span class="hljs-number">2</span>) <span class="hljs-string">&quot;10&quot;</span><br> <span class="hljs-number">3</span>) <span class="hljs-string">&quot;pig&quot;</span><br> <span class="hljs-number">4</span>) <span class="hljs-string">&quot;20&quot;</span><br> <span class="hljs-number">5</span>) <span class="hljs-string">&quot;chicken&quot;</span><br> <span class="hljs-number">6</span>) <span class="hljs-string">&quot;30&quot;</span><br> <span class="hljs-number">7</span>) <span class="hljs-string">&quot;beef&quot;</span><br> <span class="hljs-number">8</span>) <span class="hljs-string">&quot;40&quot;</span><br> <span class="hljs-number">9</span>) <span class="hljs-string">&quot;sheep&quot;</span><br><span class="hljs-number">10</span>) <span class="hljs-string">&quot;50&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zadd zset <span class="hljs-number">25</span> abc <span class="hljs-number">35</span> xyz<br>(integer) <span class="hljs-number">2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrange zset <span class="hljs-number">0</span> -<span class="hljs-number">1</span> withscores<br> <span class="hljs-number">1</span>) <span class="hljs-string">&quot;duck&quot;</span><br> <span class="hljs-number">2</span>) <span class="hljs-string">&quot;10&quot;</span><br> <span class="hljs-number">3</span>) <span class="hljs-string">&quot;pig&quot;</span><br> <span class="hljs-number">4</span>) <span class="hljs-string">&quot;20&quot;</span><br> <span class="hljs-number">5</span>) <span class="hljs-string">&quot;abc&quot;</span><br> <span class="hljs-number">6</span>) <span class="hljs-string">&quot;25&quot;</span><br> <span class="hljs-number">7</span>) <span class="hljs-string">&quot;chicken&quot;</span><br> <span class="hljs-number">8</span>) <span class="hljs-string">&quot;30&quot;</span><br> <span class="hljs-number">9</span>) <span class="hljs-string">&quot;xyz&quot;</span><br><span class="hljs-number">10</span>) <span class="hljs-string">&quot;35&quot;</span><br><span class="hljs-number">11</span>) <span class="hljs-string">&quot;beef&quot;</span><br><span class="hljs-number">12</span>) <span class="hljs-string">&quot;40&quot;</span><br><span class="hljs-number">13</span>) <span class="hljs-string">&quot;sheep&quot;</span><br><span class="hljs-number">14</span>) <span class="hljs-string">&quot;50&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-function">rank zset <span class="hljs-title">beef</span></span><br><span class="hljs-function"><span class="hljs-params">(error)</span> ERR unknown command `rank`, with args beginning with: `zset`, `beef`, </span><br><span class="hljs-function">127.0.0.1:6379&gt; zrank zset <span class="hljs-title">beef</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 5</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrange zset 0 -1 withscores</span><br><span class="hljs-function"> 1) &quot;duck&quot;</span><br><span class="hljs-function"> 2) &quot;10&quot;</span><br><span class="hljs-function"> 3) &quot;pig&quot;</span><br><span class="hljs-function"> 4) &quot;20&quot;</span><br><span class="hljs-function"> 5) &quot;abc&quot;</span><br><span class="hljs-function"> 6) &quot;25&quot;</span><br><span class="hljs-function"> 7) &quot;chicken&quot;</span><br><span class="hljs-function"> 8) &quot;30&quot;</span><br><span class="hljs-function"> 9) &quot;xyz&quot;</span><br><span class="hljs-function">10) &quot;35&quot;</span><br><span class="hljs-function">11) &quot;beef&quot;</span><br><span class="hljs-function">12) &quot;40&quot;</span><br><span class="hljs-function">13) &quot;sheep&quot;</span><br><span class="hljs-function">14) &quot;50&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrange zset 0 -1 </span><br><span class="hljs-function">1) &quot;duck&quot;</span><br><span class="hljs-function">2) &quot;pig&quot;</span><br><span class="hljs-function">3) &quot;abc&quot;</span><br><span class="hljs-function">4) &quot;chicken&quot;</span><br><span class="hljs-function">5) &quot;xyz&quot;</span><br><span class="hljs-function">6) &quot;beef&quot;</span><br><span class="hljs-function">7) &quot;sheep&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zscore zset beef</span><br><span class="hljs-function">&quot;40&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zcard <span class="hljs-title">zset</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 7</span><br><span class="hljs-function">127.0.0.1:6379&gt; zcount zset 20 40</span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 5</span><br><span class="hljs-function">127.0.0.1:6379&gt;  </span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore 20 40</span><br><span class="hljs-function"><span class="hljs-params">(error)</span> ERR wrong number of arguments <span class="hljs-keyword">for</span> &#x27;zrangebyscore&#x27; command</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore zset 20 40</span><br><span class="hljs-function">1) &quot;pig&quot;</span><br><span class="hljs-function">2) &quot;abc&quot;</span><br><span class="hljs-function">3) &quot;chicken&quot;</span><br><span class="hljs-function">4) &quot;xyz&quot;</span><br><span class="hljs-function">5) &quot;beef&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore zset 20 40 withscores</span><br><span class="hljs-function"> 1) &quot;pig&quot;</span><br><span class="hljs-function"> 2) &quot;20&quot;</span><br><span class="hljs-function"> 3) &quot;abc&quot;</span><br><span class="hljs-function"> 4) &quot;25&quot;</span><br><span class="hljs-function"> 5) &quot;chicken&quot;</span><br><span class="hljs-function"> 6) &quot;30&quot;</span><br><span class="hljs-function"> 7) &quot;xyz&quot;</span><br><span class="hljs-function"> 8) &quot;35&quot;</span><br><span class="hljs-function"> 9) &quot;beef&quot;</span><br><span class="hljs-function">10) &quot;40&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore zset 20 <span class="hljs-params">(<span class="hljs-number">40</span> withscores</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-number">1</span>)</span> &quot;pig&quot;</span><br><span class="hljs-function">2) &quot;20&quot;</span><br><span class="hljs-function">3) &quot;abc&quot;</span><br><span class="hljs-function">4) &quot;25&quot;</span><br><span class="hljs-function">5) &quot;chicken&quot;</span><br><span class="hljs-function">6) &quot;30&quot;</span><br><span class="hljs-function">7) &quot;xyz&quot;</span><br><span class="hljs-function">8) &quot;35&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore <span class="hljs-title">zset</span> <span class="hljs-params">(<span class="hljs-number">20</span> (<span class="hljs-number">40</span> withscores</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-number">1</span>)</span> &quot;abc&quot;</span><br><span class="hljs-function">2) &quot;25&quot;</span><br><span class="hljs-function">3) &quot;chicken&quot;</span><br><span class="hljs-function">4) &quot;30&quot;</span><br><span class="hljs-function">5) &quot;xyz&quot;</span><br><span class="hljs-function">6) &quot;35&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore zset 20 40 limit 1 2 </span><br><span class="hljs-function">1) &quot;abc&quot;</span><br><span class="hljs-function">2) &quot;chicken&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore zset 20 40 limit 2 2 </span><br><span class="hljs-function">1) &quot;chicken&quot;</span><br><span class="hljs-function">2) &quot;xyz&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrangebyscore zset 20 40 limit 3 2 </span><br><span class="hljs-function">1) &quot;xyz&quot;</span><br><span class="hljs-function">2) &quot;beef&quot;</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrem zset <span class="hljs-title">pig</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 1</span><br><span class="hljs-function">127.0.0.1:6379&gt; zrange zset 0 -1 </span><br><span class="hljs-function">1) &quot;duck&quot;</span><br><span class="hljs-function">2) &quot;abc&quot;</span><br><span class="hljs-function">3) &quot;chicken&quot;</span><br><span class="hljs-function">4) &quot;xyz&quot;</span><br><span class="hljs-function">5) &quot;beef&quot;</span><br><span class="hljs-function">6) &quot;sheep&quot;</span><br></code></pre></td></tr></table></figure><h1 id="二、Redis使用"><a href="#二、Redis使用" class="headerlink" title="二、Redis使用"></a>二、Redis使用</h1><h2 id="2-1、Springboot整合Redis"><a href="#2-1、Springboot整合Redis" class="headerlink" title="2.1、Springboot整合Redis"></a>2.1、Springboot整合Redis</h2><p>pom.xml 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis依赖--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>maven - 要使用install命令进行安装</p></blockquote><blockquote><p>redisTemplate 简单使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.controller;<br><br><br><span class="hljs-keyword">import</span> com.tho.utils.RedisOperator;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> springfox.documentation.annotations.ApiIgnore;<br><br><span class="hljs-meta">@ApiIgnore</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;redis&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 配置显示日志</span><br>    <span class="hljs-comment">// final static Logger logger = LoggerFactory.getLogger(RedisController.class);</span><br><br>    <span class="hljs-comment">/*@Autowired</span><br><span class="hljs-comment">    private RedisTemplate redisTemplate;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    @Autowired</span><br><span class="hljs-comment">    private StringRedisTemplate stringRedisTemplate;*/</span><br>  <br><span class="hljs-comment">// RedisOperator 是一个redis工具类</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisOperator redisOperator;<br>  <br>    <span class="hljs-meta">@PostMapping(&quot;/set&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span></span>&#123;<br><br>        <span class="hljs-comment">// redisTemplate.opsForValue().set(key, value);</span><br>        redisOperator.set(key, value);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        <span class="hljs-comment">/* Object o = redisTemplate.opsForValue().get(key); */</span><br>        String s = redisOperator.get(key);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/del&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">del</span><span class="hljs-params">(String key)</span></span>&#123;<br>        <span class="hljs-comment">// Boolean delete = redisTemplate.delete(key);</span><br>        Boolean del = redisOperator.del(key);<br><br>        <span class="hljs-keyword">return</span> del;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2、RedisTemplate"><a href="#2-2、RedisTemplate" class="headerlink" title="2.2、RedisTemplate"></a>2.2、RedisTemplate</h2><blockquote><p>问题</p></blockquote><ul><li><p>直接使用redisTemplate 进行操作redis 查看其在redis所设置的值可以看到redis里面的值都有前缀,是因为默认采用的序列化方式是 <code>org.springframework.data.redis.serializer.JdkSerializationRedisSerializer</code></p></li><li><p>将序列化的方式改为 <code>org.springframework.data.redis.serializer.StringRedisSerializer</code> 会自动去掉<code>\xac\xed\x00\x05t\x00</code>前缀</p></li></ul><blockquote><p>解决</p></blockquote><p>方案一：使用 <code>StringRedisTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br></code></pre></td></tr></table></figure><p>方案二：修改默认的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRedisTemplate</span><span class="hljs-params">(RedisTemplate redisTemplate)</span> </span>&#123;<br>    RedisSerializer stringSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>    redisTemplate.setKeySerializer(stringSerializer);<br>    redisTemplate.setValueSerializer(stringSerializer);<br>    redisTemplate.setHashKeySerializer(stringSerializer);<br>    redisTemplate.setHashValueSerializer(stringSerializer);<br>    <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><p>方案三：使用封装了<code>redisTemplate</code> 的 RedisOperator 工具类 (存储的键值对没有了前缀)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.tho.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span>: Redis 工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 慕课网</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisOperator</span> </span>&#123;<br><br><span class="hljs-comment">//@Autowired</span><br><span class="hljs-comment">//    private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br><span class="hljs-comment">// Key（键），简单的key-value操作</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">ttl</span><span class="hljs-params">(String key)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.getExpire(key);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：expire 设置过期时间，单位秒</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> timeout)</span> </span>&#123;<br>redisTemplate.expire(key, timeout, TimeUnit.SECONDS);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：INCR key，增加key一次</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">incr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">keys</span><span class="hljs-params">(String pattern)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.keys(pattern);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：DEL key，删除一个key</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">del</span><span class="hljs-params">(String key)</span> </span>&#123;<br>Boolean delete = redisTemplate.delete(key);<br><span class="hljs-keyword">return</span> delete;<br>&#125;<br><br><span class="hljs-comment">// String（字符串）</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span> </span>&#123;<br>redisTemplate.opsForValue().set(key, value);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timeout</span><br><span class="hljs-comment"> *            （以秒为单位）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value, <span class="hljs-keyword">long</span> timeout)</span> </span>&#123;<br>redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：GET key，返回 key所关联的字符串值。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> value</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (String)redisTemplate.opsForValue().get(key);<br>&#125;<br><br><span class="hljs-comment">// Hash（哈希表）</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> field</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String field, Object value)</span> </span>&#123;<br>redisTemplate.opsForHash().put(key, field, value);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：HGET key field，返回哈希表 key中给定域 field的值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> field</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hget</span><span class="hljs-params">(String key, String field)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (String) redisTemplate.opsForHash().get(key, field);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fields</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hdel</span><span class="hljs-params">(String key, Object... fields)</span> </span>&#123;<br>redisTemplate.opsForHash().delete(key, fields);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title">hgetall</span><span class="hljs-params">(String key)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>&#125;<br><br><span class="hljs-comment">// List（列表）</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 执行 LPUSH命令后，列表的长度。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lpush</span><span class="hljs-params">(String key, String value)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForList().leftPush(key, value);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：LPOP key，移除并返回列表 key的头元素。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 列表key的头元素。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">lpop</span><span class="hljs-params">(String key)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (String)redisTemplate.opsForList().leftPop(key);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 执行 LPUSH命令后，列表的长度。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">rpush</span><span class="hljs-params">(String key, String value)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForList().rightPush(key, value);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、使用Redis保存购物车"><a href="#2-3、使用Redis保存购物车" class="headerlink" title="2.3、使用Redis保存购物车"></a>2.3、使用Redis保存购物车</h2><blockquote><p>cookie中的购物车和redis中的购物车</p><p>两者内保存信息的不同要合理处理,以redis中的购物车信息为主</p></blockquote><h2 id="2-4、发布于订阅"><a href="#2-4、发布于订阅" class="headerlink" title="2.4、发布于订阅"></a>2.4、发布于订阅</h2><p>publisher -&gt; subscriber</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">订阅者：<br>  SUBSCRIBE food tho-bigdata tho-backend tho -frontend<br>Reading messages... (press Ctrl-C to quit)<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;food&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;tho-bigdata&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">2</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;tho-backend&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">3</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;tho&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">4</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;-frontend&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">5</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;message&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;tho-bigdata&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;javaversion&quot;</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;message&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;food&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;chaobing&quot;</span><br>发布者：<br>  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; PUBLISH tho-<span class="hljs-function">bigdata <span class="hljs-title">javaversion</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 2</span><br><span class="hljs-function">127.0.0.1:6379&gt; PUBLISH food <span class="hljs-title">chaobing</span></span><br><span class="hljs-function"><span class="hljs-params">(integer)</span> 2</span><br><span class="hljs-function">127.0.0.1:6379&gt; </span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><blockquote><p>批量订阅</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; PSUBSCRIBE tho*<br>Reading messages... (press Ctrl-C to quit)<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;psubscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;tho*&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;pmessage&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;tho*&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;thox&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;chaobing&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="2-5、Redis持久化"><a href="#2-5、Redis持久化" class="headerlink" title="2.5、Redis持久化"></a>2.5、Redis持久化</h2><h3 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h3><blockquote><p>redis.conf 配置文件</p><p>rdb适合使用大数据量的数据库备份</p><p>最后一次保存出现问题会导致数据的完整性出现问题</p><p>全量备份模式</p></blockquote><h3 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h3><blockquote><p>以日志形式进行追加</p><p>flushall 误操作可以删除aof文件中的相关语句</p><p>重启redis</p></blockquote><h2 id="2-6、Vmware-克隆虚拟机"><a href="#2-6、Vmware-克隆虚拟机" class="headerlink" title="2.6、Vmware 克隆虚拟机"></a>2.6、Vmware 克隆虚拟机</h2><blockquote><p>要修改克隆机的静态ip,使得克隆机可以通过Xshell 访问</p></blockquote><p><a href="https://www.jianshu.com/p/29e3f4f3cbe7">https://www.jianshu.com/p/29e3f4f3cbe7</a></p><h2 id="2-7、Redis主从复制"><a href="#2-7、Redis主从复制" class="headerlink" title="2.7、Redis主从复制"></a>2.7、Redis主从复制</h2><blockquote><p>单机redis 并发量 10w +</p></blockquote><blockquote><p>读写分离 - 主从复制</p><p>master节点将数据写入自己磁盘,将磁盘内数据传输到slave节点,slave节点读取数据库数据,进行复制</p><p>第一次同步 全量复制 之后 增量复制</p><p>Redis Master</p><p>(数据复制 RDB)</p><p>Redis Slave</p></blockquote><ul><li>搭建redis主从复制</li></ul><blockquote><p>info replication 展示redis信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; info replication<br><span class="hljs-meta">#</span><span class="bash"> Replication</span><br>role:master<br>connected_slaves:0<br>master_failover_state:no-failover<br>master_replid:4a8892cdb96c411b16e19891fb40bb658d8bd2db<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:0<br>second_repl_offset:-1<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br><br></code></pre></td></tr></table></figure><blockquote><p>只需要修改从节点的配置文件 redis.conf</p><p>重启redis</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># redis 主从复制配置<br># replicaof &lt;masterip&gt; &lt;masterport&gt;<br>replicaof <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span> <span class="hljs-number">6379</span><br># redis暴露在外网有风险,最好设置密码<br>masterauth <span class="hljs-number">123456</span><br># 从节点只能读,不能写<br>replica-read-only yes<br></code></pre></td></tr></table></figure><blockquote><p>主节点的数据以及数据变更都会同步到从节点</p><p>且从节点不能写入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; info replication<br># Replication<br>role:master<br>connected_slaves:<span class="hljs-number">2</span><br>slave0:ip=<span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.102</span>,port=<span class="hljs-number">6379</span>,state=online,offset=<span class="hljs-number">596</span>,lag=<span class="hljs-number">1</span><br>slave1:ip=<span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.101</span>,port=<span class="hljs-number">6379</span>,state=online,offset=<span class="hljs-number">596</span>,lag=<span class="hljs-number">0</span><br>master_failover_state:no-failover<br>master_replid:5957efff30070c8a728c5a86ff9067353bad417e<br>master_replid2:<span class="hljs-number">0000000000000000000000000000000000000000</span><br>master_repl_offset:<span class="hljs-number">596</span><br>second_repl_offset:-<span class="hljs-number">1</span><br>repl_backlog_active:<span class="hljs-number">1</span><br>repl_backlog_size:<span class="hljs-number">1048576</span><br>repl_backlog_first_byte_offset:<span class="hljs-number">1</span><br>repl_backlog_histlen:<span class="hljs-number">596</span><br><br></code></pre></td></tr></table></figure><blockquote><p>主节点 从节点 关闭 重启 其主从关系不会改变,主节点会自动成为主节点</p></blockquote><h2 id="2-8、无磁盘化复制"><a href="#2-8、无磁盘化复制" class="headerlink" title="2.8、无磁盘化复制"></a>2.8、无磁盘化复制</h2><blockquote><p>不需要使用磁盘,利用socket 来完成复制,磁盘速度低,网络带宽较高</p></blockquote><h2 id="2-9、Redis缓存过期机制"><a href="#2-9、Redis缓存过期机制" class="headerlink" title="2.9、Redis缓存过期机制"></a>2.9、Redis缓存过期机制</h2><ul><li><p>(主动) 定期删除</p><p>  定时检查key,expire已符合key过期的要去,删去key</p></li><li><p>(被动) 惰性删除</p><p>  key被访问到,该key过期的话,删除该key,内存会被一直占用</p></li></ul><blockquote><p>内存淘汰管理机制</p></blockquote><ul><li>MEMORY MANAGEMENT</li><li>maxmemory 当内存使用率已经到达设定值,则开始清理缓存</li></ul><blockquote><p>缓存更新策略</p><ul><li>noeviction：旧缓存永不过期,新缓存设置不了,返回错误</li><li>allkeys-lru：清除最少用的旧缓存,然后保存新的缓存(推荐使用)</li><li>allkeys-random：在所有的缓存中随机删除(不推荐)</li><li>volatile-lru：在那些设置了expire过期时间的缓存中,清除最少使用的旧缓存,然后保存新的缓存</li><li>volatile-random：在那些设置了expire过期时间的缓存中,随机删除缓存</li><li>volatile-ttl：在那些设置了expire过期时间的缓存中,删除即将过期的</li></ul></blockquote><h1 id="三、Redis集群"><a href="#三、Redis集群" class="headerlink" title="三、Redis集群"></a>三、Redis集群</h1><h2 id="3-1、Redis哨兵"><a href="#3-1、Redis哨兵" class="headerlink" title="3.1、Redis哨兵"></a>3.1、Redis哨兵</h2><blockquote><p>Sentinel(哨兵) 是用于监控Redis集群中Master状态的工具,是Redis高可用解决方案,哨兵可以监视一个或者多个Redis master服务,以及这些Master服务的所有从服务;当某个master服务器宕机后,会把这个master下的某个从服务升级为master来代替已宕机的master继续工作</p></blockquote><p>1.配置Redis哨兵,sentinel.conf 配置文件修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"># 关闭保护模式<br>&lt; <span class="hljs-keyword">protected</span>-mode no<br>&gt; # <span class="hljs-keyword">protected</span>-mode no<br># 开启守护进程,后台运行<br>&lt; daemonize yes<br>---<br>&gt; daemonize no<br># sentinel机制的日志目录<br>&lt; logfile /usr/local/redis/sentinel/redis-sentinel.log<br>---<br>&gt; logfile <span class="hljs-string">&quot;&quot;</span><br># sentinel 工作目录<br>&lt; dir /usr/local/redis/sentinel<br>---<br>&gt; dir /tmp<br># sentine机制设定主节点 最后的参数<span class="hljs-number">2</span>代表启动几个哨兵<br>&lt; sentinel monitor tho_master <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span> <span class="hljs-number">6379</span> <span class="hljs-number">2</span><br>---<br>&gt; sentinel monitor mymaster <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">6379</span> <span class="hljs-number">2</span><br># 设置sentinel机制的密码 <br>&lt; sentinel auth-pass tho_master <span class="hljs-number">123456</span><br>---<br>&gt; <br><br>&lt; <br># sentinel机制下 主节点失效的判断时间<br>&lt; sentinel down-after-milliseconds tho_master <span class="hljs-number">10000</span><br>---<br>&gt; sentinel down-after-milliseconds mymaster <span class="hljs-number">30000</span><br><br>&lt; # 主从节点并行同步的数量<br>&lt; sentinel parallel-syncs tho_master <span class="hljs-number">1</span><br>---<br>&gt; sentinel parallel-syncs mymaster <span class="hljs-number">1</span><br><br>&lt; # 主节点宕机,主从切换的时间<br>&lt; sentinel failover-timeout tho_master <span class="hljs-number">180000</span><br>---<br>&gt; sentinel failover-timeout mymaster <span class="hljs-number">180000</span><br><br></code></pre></td></tr></table></figure><p>使用 <code>scp sentinel.conf root@192.168.198.101:/usr/local/redis</code> 将主节点配置好的sentinel配置文件传输给从节点</p><p>2.创建redis-sentinel日志文件夹</p><p>3.使用命令 <code>redis-sentinel sentinel.conf</code> 启动redis哨兵</p><h2 id="3-2、Redis原master节点恢复"><a href="#3-2、Redis原master节点恢复" class="headerlink" title="3.2、Redis原master节点恢复"></a>3.2、Redis原master节点恢复</h2><blockquote><p>原master节点恢复后,会自动变成slave,但是其同步状态有问题  <code>master_link_status:down</code></p><p>可能是因为只设置了 两个从节点中redis.conf中的 <code>masterauth</code> ,这是用于同步master中的数据,但是一开始原master节点是不受影响的,当原master转换为slave后,由于其没有设置masterauth,所以不能从新的master同步数据,随之导致<code>info replication</code> 的时候,同步状态为down,所以只需要修改<code>redis.conf</code> 中的<code>masterauth</code> 为 <code>123456</code> 及redis设置的密码即可</p></blockquote><blockquote><p>一般master数据无法同步给slave的检查方案如下</p><ol><li>网络通信问题,要保证互相ping通,内网互通</li><li>关闭防火墙,对应的端口打开(虚拟机建议永久关闭防火墙,云服务器的话要保证内网互通)</li><li>统一所有的密码,不要漏了某个节点没有设置</li></ol></blockquote><h2 id="3-3、Redis哨兵信息查看"><a href="#3-3、Redis哨兵信息查看" class="headerlink" title="3.3、Redis哨兵信息查看"></a>3.3、Redis哨兵信息查看</h2><blockquote><p>查看Redis哨兵详细信息</p><p><code>[root@centos_7_100 init.d]# redis-cli -p 26379 127.0.0.1:26379&gt; sentinel master tho_master</code></p><p>查看redis哨兵 从节点信息</p><p><code>127.0.0.1:26379&gt; sentinel slaves tho_master</code></p><p>查看 redis 哨兵 哨兵的信息</p><p><code>127.0.0.1:26379&gt; sentinel sentinels tho_master</code></p></blockquote><blockquote><p>哨兵部署约定</p><ul><li>哨兵节点至少要有至少三个或者奇数个节点</li><li>哨兵分布式部署在不同的计算机节点(部署在一台服务器上的不同端口,如果该服务器宕机,所有的哨兵全部下线)</li><li>一组哨兵只监听一组主从</li></ul></blockquote><h2 id="3-4、Springboot集成Redis哨兵"><a href="#3-4、Springboot集成Redis哨兵" class="headerlink" title="3.4、Springboot集成Redis哨兵"></a>3.4、Springboot集成Redis哨兵</h2><blockquote><p>修改配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># redis 配置</span><br>  <span class="hljs-attr">redis:</span><br>      <span class="hljs-comment"># redis单机单实例</span><br><span class="hljs-comment">#    host: 192.168.198.100</span><br><span class="hljs-comment">#    password: 123456</span><br><span class="hljs-comment">#    port: 6379</span><br><span class="hljs-comment">#    database: 0</span><br>    <span class="hljs-comment"># redis 哨兵配置</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">master:</span> <span class="hljs-string">tho_master</span><br>      <span class="hljs-attr">nodes:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span><span class="hljs-string">:26379,192.168.198.101:26379,192.168.198.102:26379</span><br></code></pre></td></tr></table></figure><h2 id="3-5、Redis集群"><a href="#3-5、Redis集群" class="headerlink" title="3.5、Redis集群"></a>3.5、Redis集群</h2><blockquote><p>主从复制以及哨兵,它们可以提高读的并发,但是单个master节点容量有限,数据达到一定程度会有瓶颈,这个时候通过水平扩展为多master-slave成为集群</p></blockquote><h3 id="1、Redis-cluster"><a href="#1、Redis-cluster" class="headerlink" title="1、Redis-cluster"></a>1、Redis-cluster</h3><blockquote><p>可以支撑多个master-slave,支持海量数据,实现高可用与高并发</p><p>哨兵模式也是一种集群,它能够提高读请求的并发,但是容错方面可能会有一些问题,比如master同步数据给slave的时候,其实是异步复制,这个时候master宕机了,那么slave上的数据就没有master上的新,数据同步需要时间,1-2s左右的数据会丢失。master节点恢复转换成slave后,新数据则丢失</p></blockquote><ul><li><p>集群特点</p><blockquote><ol><li>每个节点知道彼此之间的关系,也会知道自己的角色,当然它们也会知道自己处于一个集群当中,它们彼此之间可以交互和通信,比如ping,pong。这些关系会保存到某个配置文件中,每个节点都有,这个在搭建的时候会进行配置,</li><li>客户端要和集群建立连接的话,只需要和其中一个建立关系就行</li><li>某个节点挂了,也是通过超过半数的节点来进行检测，客观下线后主从切换,和之前的哨兵模式是一样的道理</li><li>Redis中存在很多的插槽,又可以称之为槽节点,用于存储数据</li></ol></blockquote></li><li><p>集群容错</p><blockquote><p>构建redis集群，至少需要3个节点作为master，以此组成一个高可用的集群,此外每个master都需要配置6个节点,这也是最经典的redis集群，也可以称之为三主三从,容错性更佳</p></blockquote></li></ul><h3 id="2、集群搭建"><a href="#2、集群搭建" class="headerlink" title="2、集群搭建"></a>2、集群搭建</h3><ol><li><p>修改各个服务器redis配置文件</p><p>redis.conf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"># 开启集群模式<br>cluster-enabled yes<br># 每一个节点需要一个配置文件,需要<span class="hljs-number">6</span>份,每个处于集群的节点角色需要告知其它所有节点,彼此知道,这个文件用于存储集群模式下的集群状态等信息,这个文件是由redis自己维护的,重新创建集群 删掉该文件即可<br>cluster-config-file nodes-<span class="hljs-number">100.</span>conf<br># 超时时间,超时则认为master宕机,随后主备切换<br>cluster-node-timeout <span class="hljs-number">5000</span><br># 开启AOF<br>appendonly yes<br></code></pre></td></tr></table></figure><ol start="2"><li>启动6个redis实例</li></ol><blockquote><p>如果启动过程出错，把rdb等文件删除清空</p></blockquote><ol start="3"><li>创建集群</li></ol><blockquote><p>redis3.x版本 需要使用redis-trib.rb 来构建集群</p><p>新版redis试域redis-cli 来构建集群</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"># 创建集群 主从节点比例为 <span class="hljs-number">1</span> : <span class="hljs-number">1</span>  <span class="hljs-number">1</span>-<span class="hljs-number">3</span>节点为主 <span class="hljs-number">4</span>-<span class="hljs-number">6</span>节点为从<br>redis-cli -a <span class="hljs-number">123456</span> --cluster create ip1:port1 ip2:port2 ip3:port3 ip4:port4 ip5:port5 ip6:port6 --cluster-replicates <span class="hljs-number">1</span><br># 要进行密码验证<br>-a &lt;password&gt;<br></code></pre></td></tr></table></figure><ul><li>slots: 槽 用于存储数据,主节点有,从节点没有</li></ul></li></ol><ul><li><p>检查集群信息</p><p>  <code>redis-cli -a 123456 --cluster check 192.168.198.100:6379</code> </p></li></ul><h2 id="3-6、Slot槽节点"><a href="#3-6、Slot槽节点" class="headerlink" title="3.6、Slot槽节点"></a>3.6、Slot槽节点</h2><blockquote><p>将槽节点平分给master节点    槽总数:16384</p><p>内存槽 - Slot槽节点 </p></blockquote><h1 id="四、Redis缓存穿透"><a href="#四、Redis缓存穿透" class="headerlink" title="四、Redis缓存穿透"></a>四、Redis缓存穿透</h1><h2 id="4-1、Redis缓存穿透"><a href="#4-1、Redis缓存穿透" class="headerlink" title="4.1、Redis缓存穿透"></a>4.1、Redis缓存穿透</h2><blockquote><p>数据库中不存在的记录,大量请求数据库会造成数据库很大压力</p><p>即使是不存在数据库中的记录,也保存到redis中,保护数据库</p><p>问题：某个key 在未来是可能用到的 ,redis也有该key的数据，不修改代码的情况下,该key的值不会更新(缓存一致性)</p></blockquote><blockquote><p>要查询的key在redis中不存在,在数据库中也不存在,此时非法用户进行攻击,大量请求会打在数据库上，造成宕机，影响整个系统的运行，这种现象成为缓存穿透</p><p>解决方案：把空的数据也缓存起来，比如空字符串，空对象，空数组或者 list</p></blockquote><h2 id="4-2、布隆过滤器"><a href="#4-2、布隆过滤器" class="headerlink" title="4.2、布隆过滤器"></a>4.2、布隆过滤器</h2><blockquote><ul><li><p>误判率 &lt;-&gt; 数组的大小 两者取舍</p></li><li><p>无法删除数据 </p></li></ul></blockquote><h2 id="4-3、缓存雪崩"><a href="#4-3、缓存雪崩" class="headerlink" title="4.3、缓存雪崩"></a>4.3、缓存雪崩</h2><blockquote><p>大面积的缓存超过过期时间,全部失效</p></blockquote><p>==雪崩预防==</p><ul><li>设置key永不过期</li><li>过期时间错开</li><li>多缓存结合</li><li>采购第三方redis数据库服务器</li></ul><h1 id="五、批量查询优化"><a href="#五、批量查询优化" class="headerlink" title="五、批量查询优化"></a>五、批量查询优化</h1><h2 id="5-1、multiget优化"><a href="#5-1、multiget优化" class="headerlink" title="5.1、multiget优化"></a>5.1、multiget优化</h2><blockquote><p>循环批量查找</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRedis</span><span class="hljs-params">()</span> </span>&#123;<br>      ArrayList&lt;String&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>      ArrayList&lt;String&gt; params = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;()&#123;&#123;<br>          add(<span class="hljs-string">&quot;a&quot;</span>);<br>          add(<span class="hljs-string">&quot;b&quot;</span>);<br>          add(<span class="hljs-string">&quot;c&quot;</span>);<br>      &#125;&#125;;<br>      <span class="hljs-keyword">for</span> (String param : params) &#123;<br>          result.add(redisOperator.get(param));<br>      &#125;<br>      <span class="hljs-keyword">for</span> (String s : result) &#123;<br>          System.out.println(s);<br>      &#125;<br><br><br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>批量查询 同 mget</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRedis</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">// ArrayList&lt;String&gt; result = new ArrayList&lt;&gt;();</span><br>      ArrayList&lt;String&gt; params = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;()&#123;&#123;<br>          add(<span class="hljs-string">&quot;a&quot;</span>);<br>          add(<span class="hljs-string">&quot;b&quot;</span>);<br>          add(<span class="hljs-string">&quot;c&quot;</span>);<br>      &#125;&#125;;<br>      <span class="hljs-comment">/*for (String param : params) &#123;</span><br><span class="hljs-comment">          result.add(redisOperator.get(param));</span><br><span class="hljs-comment">      &#125;*/</span><br>      List&lt;String&gt; strings = redisOperator.mGet(params);<br>      <span class="hljs-keyword">for</span> (String s : strings) &#123;<br>          System.out.println(s);<br>      &#125;<br><br><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="5-2、pipeline批量查询优化"><a href="#5-2、pipeline批量查询优化" class="headerlink" title="5.2、pipeline批量查询优化"></a>5.2、pipeline批量查询优化</h2><blockquote><p>无需因为循环多次请求连接</p><p>pipeline 可以获取更多的键值类型</p><p>pipeline可以做更多的操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// 工具类内的方法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Date</span> 2021/11/21 13:52</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> keys</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Return</span> List&lt;String&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Description</span>: 通过pipeline管道批量查询key</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">pipelineBatchGet</span><span class="hljs-params">(List&lt;String&gt; keys)</span> </span>&#123;<br><br>List&lt;Object&gt; result = redisTemplate.executePipelined(<span class="hljs-keyword">new</span> RedisCallback&lt;String&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doInRedis</span><span class="hljs-params">(RedisConnection connection)</span> <span class="hljs-keyword">throws</span> DataAccessException </span>&#123;<br>StringRedisConnection src = (StringRedisConnection)connection;<br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br>src.get(key);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2021/11/15/ElasticSearchAdvanced/"/>
    <url>/2021/11/15/ElasticSearchAdvanced/</url>
    
    <content type="html"><![CDATA[<p>ElasticSearch基本使用</p><span id="more"></span><p>设置本机为固定ip</p><ul><li>ipv4协议 属性</li></ul><p>mysql远程连接配置</p><h1 id="一、ElasticSearch基础"><a href="#一、ElasticSearch基础" class="headerlink" title="一、ElasticSearch基础"></a>一、ElasticSearch基础</h1><h2 id="1-1、ES介绍"><a href="#1-1、ES介绍" class="headerlink" title="1.1、ES介绍"></a>1.1、ES介绍</h2><p>1、ES核心术语</p><ul><li>索引 index           表</li><li>类型 type             表逻辑类型 (es 7.x版本已删去)</li><li>文档 document    行</li><li>字段 fields            列</li></ul><p>2、ES核心概念</p><ul><li>映射 mapping      表结构定义</li><li>近实时 NRT          Near real time </li><li>节点 node            每一个服务器</li><li>shard replica        数据分片 备份</li></ul><p>3、ES集群架构原理</p><pre><code>&gt;将数据进行分片,并行计算&gt;&gt;shard(主分片)      replica(备份分片)</code></pre><h2 id="1-2、倒排索引"><a href="#1-2、倒排索引" class="headerlink" title="1.2、倒排索引"></a>1.2、倒排索引</h2><blockquote><p>ElasticSearch 倒排索引</p><p>倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和包含该属性值的各个记录地址。由于不是根据记录来确定属性，而是根据属性来确定记录的位置，所以称之为倒排索引。</p></blockquote><h2 id="1-3、ES环境搭建"><a href="#1-3、ES环境搭建" class="headerlink" title="1.3、ES环境搭建"></a>1.3、ES环境搭建</h2><p>1.解压es压缩包 到 <code>/usr/local/elasticsearch</code> 下</p><p><code>tar -zxvf /root/workspace/software/elasticsearch-7.15.2-linux-x86_64.tar.gz -C ./</code></p><p>2.在 <code>elasticsearch</code> 下新建 data 文件夹 数据目录</p><p>​                                            logs 日志目录 </p><p>3.es配置文件 <code>elasticsearch.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ======================== Elasticsearch Configuration =========================</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span><br><span class="hljs-comment">#       Before you set out to tweak and tune the configuration, make sure you</span><br><span class="hljs-comment">#       understand what are you trying to accomplish and the consequences.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The primary way of configuring a node is via this file. This template lists</span><br><span class="hljs-comment"># the most important settings you may want to configure for a production cluster.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Please consult the documentation for further information on configuration options:</span><br><span class="hljs-comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ---------------------------------- Cluster -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Use a descriptive name for your cluster:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">tho-elasticsearch</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ------------------------------------ Node ------------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Use a descriptive name for the node:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">es-node1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Add custom attributes to the node:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#node.attr.rack: r1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ----------------------------------- Paths ------------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Path to directory where to store the data (separate multiple locations by comma):</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">path.data:</span> <span class="hljs-string">/usr/local/elasticsearch/elasticsearch-7.15.2/data</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Path to log files:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/usr/local/elasticsearch/elasticsearch-7.15.2/logs</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ----------------------------------- Memory -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Lock the memory on startup:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#bootstrap.memory_lock: true</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Make sure that the heap size is set to about half the memory available</span><br><span class="hljs-comment"># on the system and that the owner of the process is allowed to use this</span><br><span class="hljs-comment"># limit.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Elasticsearch performs poorly when the system is swapping the memory.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ---------------------------------- Network -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default Elasticsearch is only accessible on localhost. Set a different</span><br><span class="hljs-comment"># address here to expose this node on the network:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default Elasticsearch listens for HTTP traffic on the first free port it</span><br><span class="hljs-comment"># finds starting at 9200. Set a specific HTTP port here:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#http.port: 9200</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information, consult the network module documentation.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># --------------------------------- Discovery ----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Pass an initial list of hosts to perform discovery when this node is started:</span><br><span class="hljs-comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;es-node1&quot;</span>]<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information, consult the discovery and cluster formation module documentation.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ---------------------------------- Various -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Require explicit names when deleting indices:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#action.destructive_requires_name: true</span><br><br></code></pre></td></tr></table></figure><p>4.配置文件 <code>jvm.options</code></p><blockquote><p>修改  根据机器配置来选择 </p><p>​    -Xms128m<br>​    -Xmx128m</p></blockquote><p>5.es不允许root用户进行操作,要新创建用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">useradd esuser<br><br>进入 es文件夹<br>[root<span class="hljs-meta">@centos_7_100</span> elasticsearch-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span>]# pwd<br>/usr/local/elasticsearch/elasticsearch-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span> <br><br>chown -R esuser /usr/local/elasticsearch/elasticsearch-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span><br>  <br>[root<span class="hljs-meta">@centos_7_100</span> elasticsearch-<span class="hljs-number">7.15</span><span class="hljs-number">.2</span>]# ll<br>总用量 <span class="hljs-number">636</span><br>drwxr-xr-x.  <span class="hljs-number">2</span> esuser root   <span class="hljs-number">4096</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:08 bin<br>drwxr-xr-x.  <span class="hljs-number">3</span> esuser root    <span class="hljs-number">169</span> <span class="hljs-number">11</span>月 <span class="hljs-number">25</span> <span class="hljs-number">23</span>:<span class="hljs-number">17</span> config<br>drwxr-xr-x.  <span class="hljs-number">2</span> esuser root      <span class="hljs-number">6</span> <span class="hljs-number">11</span>月 <span class="hljs-number">25</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span> data<br>drwxr-xr-x.  <span class="hljs-number">9</span> esuser root    <span class="hljs-number">121</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:08 jdk<br>drwxr-xr-x.  <span class="hljs-number">3</span> esuser root   <span class="hljs-number">4096</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:08 lib<br>-rw-r--r--.  <span class="hljs-number">1</span> esuser root   <span class="hljs-number">3860</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">02</span> LICENSE.txt<br>drwxr-xr-x.  <span class="hljs-number">2</span> esuser root      <span class="hljs-number">6</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">06</span> logs<br>drwxr-xr-x. <span class="hljs-number">60</span> esuser root   <span class="hljs-number">4096</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:08 modules<br>-rw-r--r--.  <span class="hljs-number">1</span> esuser root <span class="hljs-number">628969</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">06</span> NOTICE.txt<br>drwxr-xr-x.  <span class="hljs-number">2</span> esuser root      <span class="hljs-number">6</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">06</span> plugins<br>-rw-r--r--.  <span class="hljs-number">1</span> esuser root   <span class="hljs-number">2710</span> <span class="hljs-number">11</span>月  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">02</span> README.asciidoc<br><br></code></pre></td></tr></table></figure><p>6.进入 es bin目录 切换user <code>sudo esuser</code> 执行命令  <code>./elasticsearch</code></p><p>7.报错 处理</p><blockquote><p>ERROR: [3] bootstrap checks failed. You must address the points described in the following [3] lines before starting Elasticsearch.<br>bootstrap check failure [1] of [3]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]<br>bootstrap check failure [2] of [3]: max number of threads [3795] for user [esuser] is too low, increase to at least [4096]<br>bootstrap check failure [3] of [3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p></blockquote><p>8.<code>/etc/security</code> 目录下 <code>limits.conf</code> 修改该配置文件</p><p>其中加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">* soft nofile <span class="hljs-number">65536</span><br>* hard nofile <span class="hljs-number">131072</span><br>* soft nproc <span class="hljs-number">2048</span><br>* soft nproc <span class="hljs-number">4096</span><br></code></pre></td></tr></table></figure><ol start="9"><li><code>/etc</code> 下 修改  sysctl.conf</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">vm.max_map_count=<span class="hljs-number">262144</span><br></code></pre></td></tr></table></figure><p><code>su esuser</code> <code>su root</code> 切换用户</p><blockquote><p>bin目录下运行 <code>./elasticsearch</code></p></blockquote><p>10.开启 9200 9300 端口</p><ol start="11"><li> <code>./elasticsearch -d </code> 后台运行</li><li><code>jps</code> 命令 查看es进程信息</li></ol><h2 id="1-4、ES可视化工具"><a href="#1-4、ES可视化工具" class="headerlink" title="1.4、ES可视化工具"></a>1.4、ES可视化工具</h2><blockquote><p>elasticsearch-head</p><p><a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p></blockquote><p>1.使用chrome 扩展程序 插件</p><p>2.使用 本地服务来启动 es-head</p><blockquote><h4 id="Running-with-built-in-server"><a href="#Running-with-built-in-server" class="headerlink" title="Running with built in server"></a>Running with built in server</h4><ul><li><p><code>git clone git://github.com/mobz/elasticsearch-head.git</code></p></li><li><p><code>cd elasticsearch-head</code></p></li><li><p><code>npm install</code></p></li><li><p><code>npm run start</code></p></li><li><p><code>open</code> <a href="http://localhost:9100/">http://localhost:9100/</a></p></li></ul><p>This will start a local webserver running on port 9100 serving elasticsearch-head</p></blockquote><p>配置es跨域</p><p>elasticsearch.yml 配置文件修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">http.cors.enabled: <span class="hljs-keyword">true</span><br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><h1 id="二、ElasticSearch基本使用"><a href="#二、ElasticSearch基本使用" class="headerlink" title="二、ElasticSearch基本使用"></a>二、ElasticSearch基本使用</h1><h2 id="2-1、head插件基本操作"><a href="#2-1、head插件基本操作" class="headerlink" title="2.1、head插件基本操作"></a>2.1、head插件基本操作</h2><blockquote><p>可以用可视化操作es ，也可以用postman 直接调用接口来操作es</p></blockquote><h2 id="2-2、mappings映射"><a href="#2-2、mappings映射" class="headerlink" title="2.2、mappings映射"></a>2.2、mappings映射</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>    <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;realname&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>                <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;username&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>text 类型会分词</p><p>keyword 类型无需分词,是精确的,精确匹配</p></blockquote><blockquote><p>mappings 查看分词效果</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JSON">text 类型<br>http:<span class="hljs-comment">//192.168.198.100:9200/index_mapping/_analyze</span><br>&#123;<br>    <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;realname&quot;</span>,<br>    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;hello world&quot;</span><br>&#125;<br>返回消息体<br>&#123;<br>    <span class="hljs-attr">&quot;tokens&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JSON">keyword类型<br>http:<span class="hljs-comment">//192.168.198.100:9200/index_mapping/_analyze</span><br>&#123;<br>    <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,<br>    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;hello world&quot;</span><br>&#125;<br>返回消息体<br>&#123;<br>    <span class="hljs-attr">&quot;tokens&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;hello world&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;word&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>索引的类型一旦确定,是不能修改的</p></blockquote><blockquote><p>已存在mappings 增加新的mappings 字段</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">http:<span class="hljs-comment">//192.168.198.100:9200/index_mapping/_mapping</span><br>&#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;age&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>主要数据类型</p><ul><li>text , keyword</li><li>long, integer, short, byte</li><li>double, float</li><li>boolean</li><li>date</li><li>object</li><li>数组不能混,类型一致</li></ul></blockquote><h2 id="2-3、文档基本操作"><a href="#2-3、文档基本操作" class="headerlink" title="2.3、文档基本操作"></a>2.3、文档基本操作</h2><blockquote><ul><li>_index: 文档数据所属那个索引,理解为数据库的某张表即可。</li><li>_type: 文档数据属于哪个类型，新版本使用   _doc</li><li>_id: 文档数据的唯一标识，类似数据库中某张表的主键，可以自动生成或手动指定</li><li>_score: 查询相关度，是否契合用户匹配，分数越高用户的搜索体验越高</li><li>_version: 版本号</li><li>_source: 文档数据，json格式</li></ul></blockquote><blockquote><p>添加文档</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/1  // 数字1代表此条记录在es索引中的id信息</span><br>&#123;<span class="hljs-comment">// 此参数不写 es 会自动生成一个id</span><br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1001</span>,   <span class="hljs-comment">// 这个 “id” 信息表示在mysql等数据库中的id信息</span><br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;tho-1&quot;</span>,<br>    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;hello world！&quot;</span>,<br>    <span class="hljs-attr">&quot;create_date&quot;</span>: <span class="hljs-string">&quot;2021-11-27&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文档的删除和修改</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JSON">DELETE http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/9</span><br><span class="hljs-comment">// 返回值body</span><br>&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;9&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;deleted&quot;</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-comment">// 多次删除同一个文档记录,_version 会累加,result 会显示 not_found</span><br><span class="hljs-comment">// 此时删除是逻辑删除,当磁盘空间紧张时,才会真正物理上的删除</span><br></code></pre></td></tr></table></figure><blockquote><p>文档修改-局部修改</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/1/_update // 1为es中文档记录的id</span><br><span class="hljs-comment">// 局部修改 只修改了传的参数</span><br>&#123;<br>    <span class="hljs-attr">&quot;doc&quot;</span>: &#123;<br>        <span class="hljs-comment">// 要修改的字段信息</span><br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;tho-778&quot;</span>       <br>    &#125;<br>&#125;<br><span class="hljs-comment">// 返回消息体</span><br>&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;updated&quot;</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文档修改-全部修改</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JSON">PUT http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/1</span><br>&#123;<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1066</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;thottt&quot;</span>,<br>    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;tho world 9&quot;</span>,<br>    <span class="hljs-attr">&quot;create_date&quot;</span>: <span class="hljs-string">&quot;2021-11-26&quot;</span><br>&#125;<br><span class="hljs-comment">// 返回消息体</span><br>&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;updated&quot;</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">13</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文档查询</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JSON">GET http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/1</span><br><span class="hljs-comment">// 返回消息体</span><br>&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">13</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1066</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;thottt&quot;</span>,<br>        <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;tho world 9&quot;</span>,<br>        <span class="hljs-attr">&quot;create_date&quot;</span>: <span class="hljs-string">&quot;2021-11-26&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>查询所有文档数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON">GET http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/_search</span><br><span class="hljs-comment">// 查询指定字段</span><br>GET http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/1?_source=id,name </span><br><span class="hljs-comment">// 判断一个记录是否存在  返回状态码是 200 存在该记录</span><br><span class="hljs-comment">// 404 不存在该记录</span><br>HEAD http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/5</span><br></code></pre></td></tr></table></figure><h2 id="2-4、ES乐观锁"><a href="#2-4、ES乐观锁" class="headerlink" title="2.4、ES乐观锁"></a>2.4、ES乐观锁</h2><blockquote><p>基于 _seq_no 字段 和 _primary_term 字段</p><ul><li>_seq_no             序列号,类似 version版本号</li><li>_primary_term   表示该记录所在分片的标识</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_doc/2001/_update?if_seq_no=16&amp;if_primary_term=1</span><br><span class="hljs-comment">// 对应的if_seq_no if_primary_term 要正确,否则不能完成修改</span><br></code></pre></td></tr></table></figure><h2 id="2-5、ES分词器"><a href="#2-5、ES分词器" class="headerlink" title="2.5、ES分词器"></a>2.5、ES分词器</h2><h3 id="1、ES分词基础概念"><a href="#1、ES分词基础概念" class="headerlink" title="1、ES分词基础概念"></a>1、ES分词基础概念</h3><blockquote><p>分词：把文本转换为一个个单词,分词成为analysis。es默认只对英文语句做分词，中文不支持，每个中文字都会被拆分为独立的个体</p></blockquote><ul><li>es内置分词器</li></ul><blockquote><p>standard：默认分词，单词会被拆分。大写会转换为小写</p><p>simple：按照非字母分词，大写转换为小写</p><p>whitespace：按照空格分词，忽略大小写</p><p>stop：去除无意义单词，比如 the/is/an/a …</p><p>keyword：不做分词，把整个文本作为一个单独的关键字</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_analyze</span><br><span class="hljs-comment">// 返回消息体</span><br>&#123;<br>    <span class="hljs-attr">&quot;tokens&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、建立ik中文分词器"><a href="#2、建立ik中文分词器" class="headerlink" title="2、建立ik中文分词器"></a>2、建立ik中文分词器</h3><blockquote><p>elasticsearch-analysis-ik-7.15.2 对应es的版本</p><p>环境配置</p><ol><li>ik_max_word 和 ik_smart 有什么区别？</li></ol><p>ik_max_word: 泡沫文本做最细粒度的分裂，中华爱国“中华人民共和国国歌”分裂为中华人民共和国“，和、国国、国歌”，会穷尽各种可能的组合，适合词条查询；</p><p>ik_smart：会做最粗粒度的拆分，比如“中华人民共和国国歌”拆分为“中华人民共和国，国歌”，适合短语查询。</p></blockquote><p>1.解压到elasticsearch 下 plugins 下 的 ik文件夹下</p><p><code>unzip elasticsearch-analysis-ik-7.15.2.zip -d /usr/local/elasticsearch/elasticsearch-7.15.2/plugins/ik/</code></p><p>2.重启es即可生效</p><p>3.测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/my_doc/_analyze</span><br><span class="hljs-comment">// 参数</span><br>&#123;<br>    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>    <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span>,<br>    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;上下班车流量很大&quot;</span><br>&#125;<br><span class="hljs-comment">// 返回结果体</span><br>&#123;<br>    <span class="hljs-attr">&quot;tokens&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;上下班&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;上下&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;下班&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;班车&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;车流量&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">6</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">4</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;车流&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">5</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;流量&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">6</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">6</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;很大&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">8</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">7</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、自定义中文词库"><a href="#3、自定义中文词库" class="headerlink" title="3、自定义中文词库"></a>3、自定义中文词库</h3><ul><li>配置文件路径</li></ul><p><code>/usr/local/elasticsearch/elasticsearch-7.15.2/plugins/ik/config</code> 下的 <code>IKAnalyzer.cfg.xml</code></p><p>1.config 目录下新建词库文件 custom.dic 内容为要配置的中文词汇</p><p>2.配置文件<code>IKAnalyzer.cfg.xml</code> 修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">properties</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>custom.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br> <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>3.重启es</p><blockquote><p>之后再进行分词,custom.dic 中的中文词汇会被自动进行分词</p></blockquote><h1 id="三、DSL搜索"><a href="#三、DSL搜索" class="headerlink" title="三、DSL搜索"></a>三、DSL搜索</h1><h2 id="3-1、数据准备"><a href="#3-1、数据准备" class="headerlink" title="3.1、数据准备"></a>3.1、数据准备</h2><blockquote><p>词库 建立索引  手动建立 mappings</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/tho/_mapping</span><br>&#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;id&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;long&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;age&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;username&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;nickname&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-attr">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;money&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;float&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;desc&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-attr">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;sex&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;byte&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;birthday&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;face&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-attr">&quot;index&quot;</span>:<span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>录入数据记录</p></blockquote><h2 id="3-2、DSL入门语法"><a href="#3-2、DSL入门语法" class="headerlink" title="3.2、DSL入门语法"></a>3.2、DSL入门语法</h2><blockquote><p>QueryString方式</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 基本查询</span><br>GET http:<span class="hljs-comment">//192.168.198.100:9200/tho/_search?q=desc:慕课网 </span><br><span class="hljs-comment">// 该查询查询条件是 desc:慕课网</span><br><br><br><span class="hljs-comment">// 多条件查询</span><br>GET http:<span class="hljs-comment">//192.168.198.100:9200/tho/_search?q=desc:慕课网&amp;q=age:18</span><br></code></pre></td></tr></table></figure><blockquote><p>DSL搜索</p><p>QueryString用的很少，一旦参数复杂就难以构建，所以大多数都会使用DSL来进行查询</p><ul><li>Domain Specific Language</li><li>特定领域语言</li><li>基于JSON格式的数据查询</li><li>查询更灵活，有利于复杂查询</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// DSL搜索</span><br>POST http:<span class="hljs-comment">//192.168.198.100:9200/tho/_doc/_search</span><br><span class="hljs-comment">// 请求体</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;慕课网&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 查询某字段是否存在</span><br><span class="hljs-comment">// 请求体</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;exists&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;username&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 查询所有记录</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br>            <br>        &#125;<br>    &#125;<br>&#125; <br><br><span class="hljs-comment">// 选择查询的字段 id nickname age</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br>            <br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;age&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// 分页</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br>            <br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;age&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">5</span><br>&#125;<br><br><span class="hljs-comment">// term  精确搜索 查询关键字不会被分词处理</span><br><span class="hljs-comment">// match 分词搜索 查询关键字会被分词处理</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>:<span class="hljs-string">&quot;百度&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>:<span class="hljs-string">&quot;百度搜索&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// terms 多个词语匹配检索</span><br><span class="hljs-comment">// 类似于标签,会进行多个词语的检索</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: [<span class="hljs-string">&quot;百度搜索&quot;</span>,<span class="hljs-string">&quot;打游戏&quot;</span>]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// match_phrase：分词结果必须在text字段分词中都包含，而且顺序必须相同，而且必须都是连续的。（搜索比较严格）</span><br><span class="hljs-comment">// 字段内容必须是 百度搜索es</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match_phrase&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;百度搜索 es&quot;</span><br>                <span class="hljs-string">&quot;slop&quot;</span>: <span class="hljs-number">5</span> <span class="hljs-comment">// slop 允许中间跳过字符的数量来匹配</span><br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// and or 运算符</span><br><span class="hljs-comment">// minimum_should_match 匹配程度达到多少以上才会显示</span><br><span class="hljs-comment">//&quot;minimum_should_match&quot;:&quot;60%&quot; 10个分词 6个以上匹配才会显示</span><br><span class="hljs-comment">// &quot;minimum_should_match&quot;:&quot;3&quot;    3个以上分词匹配才会显示</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;慕课网 游泳&quot;</span>,<br>                <span class="hljs-attr">&quot;operator&quot;</span>: <span class="hljs-string">&quot;or&quot;</span>,<br>                <span class="hljs-attr">&quot;minimum_should_match&quot;</span>:<span class="hljs-string">&quot;100%&quot;</span><br>            &#125;<br>        &#125; <br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// DSL方式根据id查询</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;ids&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>            <span class="hljs-attr">&quot;values&quot;</span>:[<span class="hljs-string">&quot;1001&quot;</span>,<span class="hljs-string">&quot;1003&quot;</span>,<span class="hljs-string">&quot;1009&quot;</span>]<br>        &#125; <br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// multi_match 满足使用match 在多个字段中进行查询的需求</span><br><span class="hljs-comment">// 多个字段 其中有满足 query 条件的就会被查询出来</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;游泳 慕课网&quot;</span>,<br>            <span class="hljs-attr">&quot;fields&quot;</span>:[<span class="hljs-string">&quot;desc&quot;</span>,<span class="hljs-string">&quot;nickname&quot;</span>]<br>        &#125; <br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><span class="hljs-comment">// &quot;nickname^10&quot; 提升某个字段的权重</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;游泳 慕课网&quot;</span>,<br>            <span class="hljs-attr">&quot;fields&quot;</span>:[<br>                <span class="hljs-string">&quot;desc&quot;</span>,<span class="hljs-string">&quot;nickname^10&quot;</span><br>            ]<br>        &#125; <br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">// DSL 布尔查询 多条件查询</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br>          <span class="hljs-comment">// &quot;must&quot; 下面条件都是 and</span><br>          <span class="hljs-comment">// &quot;should&quot; 下面条件都是 or</span><br>          <span class="hljs-comment">// &quot;must_not&quot; 下面条件都不满足(都是非)</span><br>            <span class="hljs-attr">&quot;must&quot;</span>: [<br>              <span class="hljs-comment">// 条件1</span><br>                &#123; <span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;query&quot;</span>:<span class="hljs-string">&quot;百度&quot;</span>,<br>                    <span class="hljs-attr">&quot;fields&quot;</span>: [<br>                        <span class="hljs-string">&quot;desc&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span><br>                    ]<br>                    &#125;<br>                &#125;,<br>              <span class="hljs-comment">// 条件2 and 条件</span><br>                &#123;<br>                    <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">1</span><br>                    &#125;<br>                &#125;  <br>            ]<br>            <br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br><span class="hljs-comment">// 条件组合查询</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br>            <br>            <span class="hljs-attr">&quot;should&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;ns&quot;</span><br>                    &#125;<br>                &#125;,&#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;百度搜索&quot;</span><br>                    &#125;<br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;must&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;百度&quot;</span><br>                    &#125;<br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;must_not&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;巨硬&quot;</span><br>                    &#125;<br>                &#125;<br>            ]<br>            <br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<br>        <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3、DSL查询-布尔查询"><a href="#3-3、DSL查询-布尔查询" class="headerlink" title="3.3、DSL查询-布尔查询"></a>3.3、DSL查询-布尔查询</h2><blockquote><ul><li>must：查询必须匹配搜索条件，相当于 and</li><li>should：查询匹配满足1个以上条件，相当于or</li><li>must_not：不匹配搜索条件，一个都不要满足</li></ul></blockquote><h2 id="3-4、DSL高级查询"><a href="#3-4、DSL高级查询" class="headerlink" title="3.4、DSL高级查询"></a>3.4、DSL高级查询</h2><blockquote><p>过滤器</p><p>对搜索出来的结果进行数据过滤。不会到es库里去搜，不会去计算文档的相关度分数，所以过滤的性能会比较高，过滤器可以和全文搜索结合在一起使用。 post_filter元素是一个顶层元素，只会对搜索结果进行过滤。不会计算数据的匹配度相关性分数，不会根据分数去排序，query则相反，会计算分数，也会按照分数进行显示</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 根据money进行过滤</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;百度搜索&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;post_filter&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;money&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;gt&quot;</span>: <span class="hljs-number">60</span>,<br>                <span class="hljs-attr">&quot;lt&quot;</span>: <span class="hljs-number">1000</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>排序</p><p>keyword 类型可以进行排序</p><p>对文本进行排序</p><ul><li>由于文本会被分词，所以往往要去做排序会报错，通常我们可以为这个字段增加额外的一个附属属性，类型为keyword，用于做排序。</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 指定某个字段及其对应的排序规则</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;百度搜索&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;sort&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>        &#125;<br>    ]<br>&#125;<br><br><span class="hljs-comment">// 根据keyword来进行排序</span><br><span class="hljs-comment">// 某个字段的附属属性 keyword来进行排序</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;sort&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;name.keyword&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>搜索结果高亮</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;谷歌&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span&gt;&quot;</span>], <span class="hljs-comment">//自定义标签 &lt;span&gt;&lt;/span&gt;</span><br>        <span class="hljs-attr">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>],<span class="hljs-comment">// 默认标签 &lt;em&gt;&lt;/em&gt;</span><br>        <span class="hljs-attr">&quot;fields&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;desc&quot;</span>: &#123;&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>进阶</p><ul><li><p>prefix  根据前缀去查询</p></li><li><p>fuzzy    模糊搜索，并不是sql的模糊搜索，而是在用户进行搜索时打字错误，搜索引擎会自动更正，然后尝试匹配索引数据库中的数据</p></li><li><p>wildcard  占位符查询</p><p>  ？：1个字符</p><p>  *：1个或多个字符</p></li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// prefix</span><br>&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;prefix&quot;</span>: &#123;<br><span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;imo&quot;</span><br> &#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// fuzzy</span><br>&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<br><span class="hljs-attr">&quot;fields&quot;</span>: [ <span class="hljs-string">&quot;desc&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>],<br> <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;imcoc supor&quot;</span>,<br>  <span class="hljs-attr">&quot;fuzziness&quot;</span>: <span class="hljs-string">&quot;AUTO&quot;</span><br> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、ES进阶使用"><a href="#四、ES进阶使用" class="headerlink" title="四、ES进阶使用"></a>四、ES进阶使用</h1><h2 id="4-1、ES深度分页"><a href="#4-1、ES深度分页" class="headerlink" title="4.1、ES深度分页"></a>4.1、ES深度分页</h2><h3 id="1-限制分页深度"><a href="#1-限制分页深度" class="headerlink" title="1.限制分页深度"></a>1.限制分页深度</h3><blockquote><p>分页查询</p><p>查询深度过深性能会很差</p><ul><li>限制分页页数</li></ul><p>​    在es中获取9999条数据到10009条数据的时候，其实每个分片都会拿到10009条数据，然后集合在一起，总共是10009*3=30027条数据，针对30027条数据再次做排序，获取最后的10条数据</p><p>​    如此一来，搜索地太深，就会造成性能问题，会耗费内存和占用CPU。而且es为了性能，不支持超过一万条数据以上的分页查询。为了避免深度分页问题，要限制分页页数，每页展示100条数据，最多提供100页的展示，从101页开始就没了，用户也不会搜索需要100页，淘宝的分页限制就是100页</p></blockquote><h3 id="2-设置分页查询最大值"><a href="#2-设置分页查询最大值" class="headerlink" title="2.设置分页查询最大值"></a>2.设置分页查询最大值</h3><blockquote><p>还可以通过设置es参数来突破分页查询数据的限制</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 查询es的各项设置</span><br>GET http:<span class="hljs-comment">//192.168.198.100:9200/tho/_settings</span><br>&#123;<br>    <span class="hljs-attr">&quot;tho&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;routing&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;allocation&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;include&quot;</span>: &#123;<br>                            <span class="hljs-attr">&quot;_tier_preference&quot;</span>: <span class="hljs-string">&quot;data_content&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">&quot;number_of_shards&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>                <span class="hljs-attr">&quot;provided_name&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;creation_date&quot;</span>: <span class="hljs-string">&quot;1638000752374&quot;</span>,<br>                <span class="hljs-attr">&quot;number_of_replicas&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;LPZF8yR-SaGfPVOCdXOtCg&quot;</span>,<br>                <span class="hljs-attr">&quot;version&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;created&quot;</span>: <span class="hljs-string">&quot;7150299&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 设置查询限制</span><br>PUT http:<span class="hljs-comment">//192.168.198.100:9200/tho/_settings</span><br><span class="hljs-comment">// 参数</span><br>&#123;<br>    <span class="hljs-attr">&quot;index.max_result_window&quot;</span>: <span class="hljs-number">16666</span><br>&#125;<br><span class="hljs-comment">// 再次查询</span><br>&#123;<br>    <span class="hljs-attr">&quot;tho&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;routing&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;allocation&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;include&quot;</span>: &#123;<br>                            <span class="hljs-attr">&quot;_tier_preference&quot;</span>: <span class="hljs-string">&quot;data_content&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">&quot;number_of_shards&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>                <span class="hljs-attr">&quot;provided_name&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;max_result_window&quot;</span>: <span class="hljs-string">&quot;16666&quot;</span>, <span class="hljs-comment">// 分页显示数量</span><br>                <span class="hljs-attr">&quot;creation_date&quot;</span>: <span class="hljs-string">&quot;1638000752374&quot;</span>,<br>                <span class="hljs-attr">&quot;number_of_replicas&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;LPZF8yR-SaGfPVOCdXOtCg&quot;</span>,<br>                <span class="hljs-attr">&quot;version&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;created&quot;</span>: <span class="hljs-string">&quot;7150299&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2、滚动搜索scroll"><a href="#4-2、滚动搜索scroll" class="headerlink" title="4.2、滚动搜索scroll"></a>4.2、滚动搜索scroll</h2><blockquote><p>  一次查询1w+数据，往往会造成性能影响，因为数据量太大了，这个时候可以使用滚动搜索，也就是 <code>scroll</code> 。滚动搜索可以先查询出一些数据，然后再紧接着依次往下查询。在第一次查询的时候会有一个滚动id，相当于一个 <code>锚标记</code>，随后再次滚动搜索会需要上一次搜索的 锚标记，根据这个进行下一次搜索请求，每次搜索都是基于一个历史的数据快照，查询数据的期间，如果有数据的变更，那么和搜索是没有关系的，搜索的内容还是快照里的</p><ul><li>scroll=1m, 相当于是一个session会话时间，搜索保持的上下文时间为1分钟</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 滚动搜索 第一次搜索</span><br>POST http:<span class="hljs-comment">//192.168.198.100:9200/tho/_search?scroll=1m </span><br><span class="hljs-comment">// 会话有效期1分钟,要在1分钟内进行下一次查询</span><br><span class="hljs-comment">// 参数</span><br>&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;sort&quot;</span>: [<span class="hljs-string">&quot;_doc&quot;</span>],<br>    <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">5</span><br>&#125;<br><span class="hljs-comment">// 返回消息体</span><br>&#123;<br>    <span class="hljs-attr">&quot;_scroll_id&quot;</span>: <span class="hljs-string">&quot;FGluY2x1ZGVfY29udGV4dF91dWlkDnF1ZXJ5VGhlbkZldGNoAxYxZWZTaUxORVRVUzBKOVo0bzRFVENBAAAAAAAAACsWNUV4Sk91My1TR1cyRWdibmZjQmhiQRYxZWZTaUxORVRVUzBKOVo0bzRFVENBAAAAAAAAACwWNUV4Sk91My1TR1cyRWdibmZjQmhiQRYxZWZTaUxORVRVUzBKOVo0bzRFVENBAAAAAAAAAC0WNUV4Sk91My1TR1cyRWdibmZjQmhiQQ==&quot;</span>,<br>    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">76</span>,<br>    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">16</span>,<br>            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1002&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1002</span>,<br>                    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">20</span>,<br>                    <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;bigFace&quot;</span>,<br>                    <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;飞翔的巨硬&quot;</span>,<br>                    <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;6.8&quot;</span>,<br>                    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;去了海外&quot;</span>,<br>                    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;2000-06-26&quot;</span>,<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;sort&quot;</span>: [<br>                    <span class="hljs-number">0</span><br>                ]<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1001&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1001</span>,<br>                    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>                    <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;imoocAmazing&quot;</span>,<br>                    <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;百度搜索&quot;</span>,<br>                    <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;88.8&quot;</span>,<br>                    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;学习java和前端&quot;</span>,<br>                    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;1999-06-26&quot;</span>,<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;sort&quot;</span>: [<br>                    <span class="hljs-number">0</span><br>                ]<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1003&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1003</span>,<br>                    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">22</span>,<br>                    <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;flyfish&quot;</span>,<br>                    <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;鱼&quot;</span>,<br>                    <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;6.8&quot;</span>,<br>                    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;池塘里，游泳&quot;</span>,<br>                    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;2000-06-26&quot;</span>,<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com1&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;sort&quot;</span>: [<br>                    <span class="hljs-number">1</span><br>                ]<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1004&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1004</span>,<br>                    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">21</span>,<br>                    <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;gotoplay&quot;</span>,<br>                    <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;ns&quot;</span>,<br>                    <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;6.88&quot;</span>,<br>                    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;打游戏&quot;</span>,<br>                    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;2000-06-26&quot;</span>,<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com1&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;sort&quot;</span>: [<br>                    <span class="hljs-number">1</span><br>                ]<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1007&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1007</span>,<br>                    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">21</span>,<br>                    <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;gotorun&quot;</span>,<br>                    <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;ns&quot;</span>,<br>                    <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;6.88&quot;</span>,<br>                    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;跑步ask法拉盛克里夫&quot;</span>,<br>                    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;2000-06-26&quot;</span>,<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com1&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;sort&quot;</span>: [<br>                    <span class="hljs-number">2</span><br>                ]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 滚动查询 之后的查询 (要在设置的会话有效期内进行后续查询)</span><br>POST http:<span class="hljs-comment">//192.168.198.100:9200/_search/scroll</span><br><span class="hljs-comment">// 参数</span><br>&#123;<br>    <span class="hljs-attr">&quot;scroll_id&quot;</span>: <span class="hljs-string">&quot;FGluY2x1ZGVfY29udGV4dF91dWlkDnF1ZXJ5VGhlbkZldGNoAxYxZWZTaUxORVRVUzBKOVo0bzRFVENBAAAAAAAAAC4WNUV4Sk91My1TR1cyRWdibmZjQmhiQRYxZWZTaUxORVRVUzBKOVo0bzRFVENBAAAAAAAAADAWNUV4Sk91My1TR1cyRWdibmZjQmhiQRYxZWZTaUxORVRVUzBKOVo0bzRFVENBAAAAAAAAAC8WNUV4Sk91My1TR1cyRWdibmZjQmhiQQ==&quot;</span>,<br>    <span class="hljs-attr">&quot;scroll&quot;</span>: <span class="hljs-string">&quot;1m&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3、批量查询"><a href="#4-3、批量查询" class="headerlink" title="4.3、批量查询"></a>4.3、批量查询</h2><h3 id="1-mget批量查询"><a href="#1-mget批量查询" class="headerlink" title="1.mget批量查询"></a>1.mget批量查询</h3><blockquote><p>获取多个查询</p><p>查询不存在的记录也会显示出来</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/tho/_doc/_mget</span><br><span class="hljs-comment">// 参数</span><br>&#123;<br>    <span class="hljs-attr">&quot;ids&quot;</span>: [<span class="hljs-string">&quot;1001&quot;</span>, <span class="hljs-string">&quot;1003&quot;</span>]<br>&#125;<br><span class="hljs-comment">// 返回值</span><br>&#123;<br>    <span class="hljs-attr">&quot;docs&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>            <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>            <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1001&quot;</span>,<br>            <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1001</span>,<br>                <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>                <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;imoocAmazing&quot;</span>,<br>                <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;百度&quot;</span>,<br>                <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;88.8&quot;</span>,<br>                <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;学习java和前端，学到了很多&quot;</span>,<br>                <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;1999-06-26&quot;</span>,<br>                <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com&quot;</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>            <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>            <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1003&quot;</span>,<br>            <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1003</span>,<br>                <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">22</span>,<br>                <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;flyfish&quot;</span>,<br>                <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;水&quot;</span>,<br>                <span class="hljs-attr">&quot;money&quot;</span>: <span class="hljs-string">&quot;6.8&quot;</span>,<br>                <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;池塘里，游泳&quot;</span>,<br>                <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;2000-06-26&quot;</span>,<br>                <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;https://www.tho.com1&quot;</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-批量增删改-bulk"><a href="#2-批量增删改-bulk" class="headerlink" title="2.批量增删改-bulk"></a>2.批量增删改-bulk</h3><blockquote><p>bulk操作和以往的普通格式有区别，不要格式化json，不然就不在同一行了，需要注意</p><p>{ action: { metadata }}\n </p><p>{ request body }\n </p><p>{ action: { metadata }}\n </p><p>{ request body }\n</p><ul><li>{ action: { metadata }} 代表批量操作的类型，可以是新增、删除或修改</li><li> \n 是每行结尾必须填写的一个规范，每一行包括最后一行都要写，用于es的解析</li><li> { request body } 是请求body，增加和修改操作需要，删除操作则不需要</li></ul></blockquote><blockquote><p>批量操作的类型</p><p>action必须是以下选项之一</p><ul><li>create：如果文档不存在，创建该文档，文档存在会报错，发生异常报错不会影响其它操作</li><li>index：创建一个新文档或者替换一个现有的文档</li><li>update：部分更新一个文档</li><li>delete：删除一个文档</li></ul><p>metadata中需要指定要操作文档的 _index, _type 和 _id ， _index  _type 也可以在url中指定</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/_bulk</span><br><span class="hljs-comment">// 参数</span><br>&#123;<span class="hljs-attr">&quot;create&quot;</span>: &#123;<span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shop2&quot;</span>, <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>, <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2001&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2001&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2001&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;create&quot;</span>: &#123;<span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shop2&quot;</span>, <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>, <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2002&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2002&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2002&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;create&quot;</span>: &#123;<span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shop2&quot;</span>, <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>, <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2003&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2003&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2003&quot;</span>&#125;<br><span class="hljs-comment">// 返回值</span><br>&#123;<br>    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">72</span>,<br>    <span class="hljs-attr">&quot;errors&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;items&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;create&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2001&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">7</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">201</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;create&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2002&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">9</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">201</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;create&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2003&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">8</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">201</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>参数里面的 “ _index “ 和 “ _type “ 都是一样的,可以提取出来</p><p>可以放到url里</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/tho/_doc/_bulk</span><br><span class="hljs-comment">// 参数</span><br>&#123;<span class="hljs-attr">&quot;create&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2005&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2005&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2005&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;create&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2006&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2006&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2006&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;create&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2007&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2007&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2007&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-批量操作-index"><a href="#3-批量操作-index" class="headerlink" title="3.批量操作-index"></a>3.批量操作-index</h3><blockquote><p>index 不存在的尽量进行导入</p><p>存在的记录会被直接覆盖</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs JSON">POST http:<span class="hljs-comment">//192.168.198.100:9200/tho/_doc/_bulk</span><br><span class="hljs-comment">// 参数</span><br>&#123;<span class="hljs-attr">&quot;index&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2005&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2005&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;name2005&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;index&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2006&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2006&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;index&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;index&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2007&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2007&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;index&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;index&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2008&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;2008&quot;</span>, <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;index-new&quot;</span>&#125;<br><span class="hljs-comment">// 返回值</span><br>&#123;<br>    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">44</span>,<br>    <span class="hljs-attr">&quot;errors&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;items&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2005&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">3</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;updated&quot;</span>,<br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">200</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2006&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">3</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;updated&quot;</span>,<br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">11</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">200</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2007&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">3</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;updated&quot;</span>, <span class="hljs-comment">// 存在 进行更新</span><br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">12</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">200</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;tho&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2008&quot;</span>,<br>                <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>, <span class="hljs-comment">// 不存在,创建新的</span><br>                <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">13</span>,<br>                <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">201</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、ES集群"><a href="#五、ES集群" class="headerlink" title="五、ES集群"></a>五、ES集群</h1><h2 id="5-1、ES集群基本概念"><a href="#5-1、ES集群基本概念" class="headerlink" title="5.1、ES集群基本概念"></a>5.1、ES集群基本概念</h2><blockquote><p>主节点和 备份节点不能放在同一个服务器上</p></blockquote><blockquote><p>查看配置信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">more elasticsearch.yml | grep ^[^#]<br><br>[esuser@centos_7_100 config]$ more elasticsearch.yml | grep ^[^#]<br>cluster.name: tho-elasticsearch<br>node.name: es-node1<br>path.data: /usr/local/elasticsearch/elasticsearch-7.15.2/data<br>path.logs: /usr/local/elasticsearch/elasticsearch-7.15.2/logs<br>network.host: 0.0.0.0<br>http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br>cluster.initial_master_nodes: [&quot;es-node1&quot;]<br><br></code></pre></td></tr></table></figure><h2 id="5-2、ES脑裂"><a href="#5-2、ES脑裂" class="headerlink" title="5.2、ES脑裂"></a>5.2、ES脑裂</h2><blockquote><p>如果发生网络中断或者服务器宕机，那么集群会有可能被划分为两个部分，各自有自己的master管理，这就是脑裂</p></blockquote><blockquote><p>解决方案</p><ul><li>master主节点要经过多个master共同选举后才能成为新的主节点，就跟班级里的班长一样，并不是一个人可以决定的，需要班里多数人的决定</li><li>解决实现原理：半数以上节点同意，节点方可成为新的master</li></ul></blockquote><ul><li><p>discovery.zen.minimum_master_nodes=(N/2)+1</p><p>  N为集群的中master节点的数量，也就是那些 node.master=true 设置的那些服务器节点总数。</p></li></ul><blockquote><p>新版本ES   ES7.X9</p><p><code>minimum_master_node </code> 这个参数已经被移除了，这一块内容完全由es自身去管理，避免了脑裂问题，选举也会非常快</p></blockquote><h2 id="5-3、ES集群文档读写原理"><a href="#5-3、ES集群文档读写原理" class="headerlink" title="5.3、ES集群文档读写原理"></a>5.3、ES集群文档读写原理</h2><h1 id="六、ES整合SpringBoot"><a href="#六、ES整合SpringBoot" class="headerlink" title="六、ES整合SpringBoot"></a>六、ES整合SpringBoot</h1><h2 id="6-1、引入依赖"><a href="#6-1、引入依赖" class="headerlink" title="6.1、引入依赖"></a>6.1、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--&lt;version&gt;2.1.5.RELEASE&lt;/version&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>此依赖使用的es版本是 es6.4.3 要将服务器上的es降级为对应版本</p></blockquote><blockquote><p>项目配置文件 application.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">spring:</span><br><span class="hljs-comment"># 需要datasource的配置,不然会报错</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span> <span class="hljs-comment">#数据源类型:HikariCP</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span> <span class="hljs-comment">#mysql驱动</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/foodie-shop</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-comment"># 集群</span><br>      <span class="hljs-comment"># cluster-nodes: 192.168.198.100:9300,192.168.198.101:9300,192.168.198.102:9300</span><br>      <span class="hljs-comment"># 单机</span><br>      <span class="hljs-attr">cluster-nodes:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.100</span><span class="hljs-string">:9300</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">es6.4.3</span><br><br></code></pre></td></tr></table></figure><blockquote><p>可能会报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">ERROR SpringApplication Application run failed<br> org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="hljs-string">&#x27;elasticsearchClient&#x27;</span> defined in <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">path</span> <span class="hljs-title">resource</span> [<span class="hljs-title">org</span>/<span class="hljs-title">springframework</span>/<span class="hljs-title">boot</span>/<span class="hljs-title">autoconfigure</span>/<span class="hljs-title">data</span>/<span class="hljs-title">elasticsearch</span>/<span class="hljs-title">ElasticsearchAutoConfiguration</span>.<span class="hljs-title">class</span>]: <span class="hljs-title">Bean</span> <span class="hljs-title">instantiation</span> <span class="hljs-title">via</span> <span class="hljs-title">factory</span> <span class="hljs-title">method</span> <span class="hljs-title">failed</span></span>; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.transport.TransportClient]: Factory method <span class="hljs-string">&#x27;elasticsearchClient&#x27;</span> threw exception; nested exception is java.lang.IllegalStateException: availableProcessors is already set to [<span class="hljs-number">8</span>], rejecting [<span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><blockquote><p>解决  Netty issue fix  放到application.class 的同级目录下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/28/19:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: ESConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 解决 netty issue fix</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESConfig</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解决netty引起的issue</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.setProperty(<span class="hljs-string">&quot;es.set.netty.runtime.available.processors&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2、整合后基本使用"><a href="#6-2、整合后基本使用" class="headerlink" title="6.2、整合后基本使用"></a>6.2、整合后基本使用</h2><blockquote><p>pojo类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.es.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.data.annotation.Id;<br><span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;<br><span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/28/19:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: Student</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: ES测试 实体类 对应 es中的文档</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Document(indexName = &quot;stu&quot;, type = &quot;_doc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span> <span class="hljs-comment">// 设置之后,数据的id 同 es中的id一起设置为设定值</span><br>    <span class="hljs-keyword">private</span> Long stuId;<br>    <span class="hljs-meta">@Field(store = true)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Field(store = true)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getStuId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stuId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStuId</span><span class="hljs-params">(Long stuId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stuId = stuId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">import</span> com.tho.Application;<br><span class="hljs-keyword">import</span> com.tho.es.pojo.Student;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.query.IndexQuery;<br><span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.query.IndexQueryBuilder;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/28/19:29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> foodstuffMall</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: ESTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: ES 测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate esTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createIndexStudent</span><span class="hljs-params">()</span> </span>&#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.setStuId(<span class="hljs-number">1001L</span>);<br>        student.setName(<span class="hljs-string">&quot;tho&quot;</span>);<br>        student.setAge(<span class="hljs-number">18</span>);<br>        IndexQuery query = <span class="hljs-keyword">new</span> IndexQueryBuilder().withObject(student).build();<br>        esTemplate.index(query);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3、索引增删"><a href="#6-3、索引增删" class="headerlink" title="6.3、索引增删"></a>6.3、索引增删</h2><blockquote><ul><li><p>不建议使用ElasticsearchTemplate 对索引进行管理(创建索引,更新映射,删除索引)</p></li><li><p>索引就像是数据库或数据库中的表，平时是不会通过java代码频繁地去创建修改删除数据库中的表的</p></li><li><p>只会针对数据做CRUD操作</p></li><li><p>在es中也是同理,尽量使用 ElasticsearchTemplate 对文档数据进行CRUD操作</p></li></ul></blockquote><blockquote><p>ElasticsearchTemplate缺点</p><ol><li>属性(FieldType)类型不灵活</li><li>主分片于副分片无法设置</li></ol></blockquote><h3 id="1-索引创建"><a href="#1-索引创建" class="headerlink" title="1.索引创建"></a>1.索引创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createIndexStudent</span><span class="hljs-params">()</span> </span>&#123;<br>    Student student = <span class="hljs-keyword">new</span> Student();<br>    student.setStuId(<span class="hljs-number">1001L</span>);<br>    student.setName(<span class="hljs-string">&quot;tho&quot;</span>);<br>    student.setAge(<span class="hljs-number">18</span>);<br>    IndexQuery query = <span class="hljs-keyword">new</span> IndexQueryBuilder().withObject(student).build();<br>    esTemplate.index(query); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-索引删除"><a href="#2-索引删除" class="headerlink" title="2.索引删除"></a>2.索引删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">@ <span class="hljs-function">Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteIndexStu</span><span class="hljs-params">()</span> </span>&#123;<br>    esTemplate.deleteIndex(Student.class);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-4、文档数据CRUD"><a href="#6-4、文档数据CRUD" class="headerlink" title="6.4、文档数据CRUD"></a>6.4、文档数据CRUD</h2><h3 id="1-新增文档数据"><a href="#1-新增文档数据" class="headerlink" title="1.新增文档数据"></a>1.新增文档数据</h3><blockquote><p>同创建索引操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createIndexStudent</span><span class="hljs-params">()</span> </span>&#123;<br>    Student student = <span class="hljs-keyword">new</span> Student();<br>    student.setStuId(<span class="hljs-number">1001L</span>);<br>    student.setName(<span class="hljs-string">&quot;tho&quot;</span>);<br>    student.setAge(<span class="hljs-number">18</span>);<br>    IndexQuery query = <span class="hljs-keyword">new</span> IndexQueryBuilder().withObject(student).build();<br>    esTemplate.index(query); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、更新文档数据"><a href="#2、更新文档数据" class="headerlink" title="2、更新文档数据"></a>2、更新文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudentDoc</span><span class="hljs-params">()</span> </span>&#123;<br>    Map&lt;String, Object&gt; sourceMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    sourceMap.put(<span class="hljs-string">&quot;sign&quot;</span>, <span class="hljs-string">&quot;xxxxxx&quot;</span>);<br>    sourceMap.put(<span class="hljs-string">&quot;money&quot;</span>, <span class="hljs-number">666.6f</span>);<br>    sourceMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">3</span>);<br>    IndexRequest request = <span class="hljs-keyword">new</span> IndexRequest();<br>    request.source(sourceMap);<br>    UpdateQuery updateQuery = <span class="hljs-keyword">new</span> UpdateQueryBuilder().withClass(Student.class)<br>            .withId(<span class="hljs-string">&quot;1002&quot;</span>)<br>            .withIndexRequest(request)<br>            .build();<br>    <span class="hljs-comment">// 相当于sql语句</span><br>    <span class="hljs-comment">// update student set sign=&#x27;xxxxxx&#x27;, age=3, money=666.6f where id = &#x27;1002&#x27;</span><br>    esTemplate.update(updateQuery);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-查询文档数据"><a href="#3-查询文档数据" class="headerlink" title="3.查询文档数据"></a>3.查询文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStudentDoc</span><span class="hljs-params">()</span> </span>&#123;<br><br>    GetQuery getQuery = <span class="hljs-keyword">new</span> GetQuery();<br>    getQuery.setId(<span class="hljs-string">&quot;1002&quot;</span>);<br>    Student student = esTemplate.queryForObject(getQuery, Student.class);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-删除文档数据"><a href="#4-删除文档数据" class="headerlink" title="4.删除文档数据"></a>4.删除文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudentDoc</span><span class="hljs-params">()</span> </span>&#123;<br>    String delete = esTemplate.delete(Student.class, <span class="hljs-string">&quot;1002&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-5、实现分页搜索"><a href="#6-5、实现分页搜索" class="headerlink" title="6.5、实现分页搜索"></a>6.5、实现分页搜索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Date</span> 2021/11/28 20:18</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">* <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Description</span>: 分页</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryForPage</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 分页设置</span><br>    Pageable pageable = PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>    NativeSearchQuery query = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder()<br>            .withQuery(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;save man&quot;</span>))<br>            .withPageable(pageable)<br>            .build();<br>    AggregatedPage&lt;Student&gt; pagedStudentList = esTemplate.queryForPage(query, Student.class);<br>    <span class="hljs-keyword">int</span> totalPages = pagedStudentList.getTotalPages();<br>    System.out.println(<span class="hljs-string">&quot;检索后总分页数为&quot;</span> + totalPages);<br>    List&lt;Student&gt; studentList = pagedStudentList.getContent();<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-6、高亮"><a href="#6-6、高亮" class="headerlink" title="6.6、高亮"></a>6.6、高亮</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/28 20:22</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 高亮显示</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">highLightStudentDoc</span><span class="hljs-params">()</span> </span>&#123;<br><br>        String preTag = <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>;<br>        String postTag = <span class="hljs-string">&quot;&lt;/fond&gt;&quot;</span>;<br>        <span class="hljs-comment">// 分页设置</span><br>        Pageable pageable = PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>        NativeSearchQuery query = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder()<br>                .withQuery(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;save man&quot;</span>))<br>                .withHighlightFields(<span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;description&quot;</span>)<br>                .preTags(preTag)<br>                .postTags(postTag))<br>                .withPageable(pageable)<br>                .build();<br>        AggregatedPage&lt;Student&gt; pagedStudentList = esTemplate.queryForPage(query, Student.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;<br>            <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse response, Class&lt;T&gt; clazz, Pageable pageable)</span> </span>&#123;<br>                <span class="hljs-comment">// 需要加入自己的映射 直接获取的数据不包括高亮的内容</span><br>                SearchHits hits = response.getHits();<br>                List&lt;Student&gt; studentListHighLight = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>                    HighlightField highLightField = hit.getHighlightFields().get(<span class="hljs-string">&quot;description&quot;</span>);<br>                    String description  = highLightField.getFragments()[<span class="hljs-number">0</span>].toString();<br><br>                    Object stuId = hit.getSourceAsMap().get(<span class="hljs-string">&quot;id&quot;</span>);<br>                    String name =(String) hit.getSourceAsMap().get(<span class="hljs-string">&quot;name&quot;</span>);<br>                    Integer age =(Integer) hit.getSourceAsMap().get(<span class="hljs-string">&quot;age&quot;</span>);<br>                    String sign =(String) hit.getSourceAsMap().get(<span class="hljs-string">&quot;sign&quot;</span>);<br>                    Object money = hit.getSourceAsMap().get(<span class="hljs-string">&quot;money&quot;</span>);<br><br>                    Student highLightStudent = <span class="hljs-keyword">new</span> Student();<br>                    highLightStudent.setDescription(description);<br>                    highLightStudent.setAge(age);<br>                    highLightStudent.setSign(sign);<br>                    highLightStudent.setMoney(Float.valueOf(money.toString()));<br>                    highLightStudent.setStuId(Long.valueOf(stuId.toString()));<br>                    highLightStudent.setName(name);<br><br>                    studentListHighLight.add(highLightStudent);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (studentListHighLight.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;&gt;( (List&lt;T&gt;) studentListHighLight);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">int</span> totalPages = pagedStudentList.getTotalPages();<br>        System.out.println(<span class="hljs-string">&quot;检索后总分页数为&quot;</span> + totalPages);<br>        List&lt;Student&gt; studentList = pagedStudentList.getContent();<br>        <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="6-7、排序"><a href="#6-7、排序" class="headerlink" title="6.7、排序"></a>6.7、排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Date</span> 2021/11/28 20:44</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">* <span class="hljs-doctag">@Return</span> void</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Description</span>: 排序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortStudentDoc</span><span class="hljs-params">()</span> </span>&#123;<br><br>    String preTag = <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>;<br>    String postTag = <span class="hljs-string">&quot;&lt;/fond&gt;&quot;</span>;<br>    <span class="hljs-comment">// 分页设置</span><br>    Pageable pageable = PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">// 排序</span><br>    SortBuilder sortBuilder = <span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;money&quot;</span>)<br>            .order(SortOrder.ASC);<br><br>    NativeSearchQuery query = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder()<br>            .withQuery(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;save man&quot;</span>))<br>            .withHighlightFields(<span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;description&quot;</span>)<br>                    .preTags(preTag)<br>                    .postTags(postTag))<br>            .withPageable(pageable)<br>            .withSort(sortBuilder) <span class="hljs-comment">//排序</span><br>            .build();<br>    AggregatedPage&lt;Student&gt; pagedStudentList = esTemplate.queryForPage(query, Student.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse response, Class&lt;T&gt; clazz, Pageable pageable)</span> </span>&#123;<br>            <span class="hljs-comment">// 需要加入自己的映射 直接获取的数据不包括高亮的内容</span><br>            SearchHits hits = response.getHits();<br>            List&lt;Student&gt; studentListHighLight = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>                HighlightField highLightField = hit.getHighlightFields().get(<span class="hljs-string">&quot;description&quot;</span>);<br>                String description  = highLightField.getFragments()[<span class="hljs-number">0</span>].toString();<br><br>                Object stuId = hit.getSourceAsMap().get(<span class="hljs-string">&quot;id&quot;</span>);<br>                String name =(String) hit.getSourceAsMap().get(<span class="hljs-string">&quot;name&quot;</span>);<br>                Integer age =(Integer) hit.getSourceAsMap().get(<span class="hljs-string">&quot;age&quot;</span>);<br>                String sign =(String) hit.getSourceAsMap().get(<span class="hljs-string">&quot;sign&quot;</span>);<br>                Object money = hit.getSourceAsMap().get(<span class="hljs-string">&quot;money&quot;</span>);<br><br>              <span class="hljs-comment">// 要加判断 因为字段名称问题,可能从es中搜索不到记录</span><br>              <span class="hljs-comment">// 有的字段可能会是空指针</span><br>             <span class="hljs-comment">// Long.valueOf(stuId.toString() 会报空指针异常</span><br>              <br>                Student highLightStudent = <span class="hljs-keyword">new</span> Student();<br>                highLightStudent.setDescription(description);<br>                highLightStudent.setAge(age);<br>                highLightStudent.setSign(sign);<br>                highLightStudent.setMoney(Float.valueOf(money.toString()));<br>                highLightStudent.setStuId(Long.valueOf(stuId.toString()));<br>                highLightStudent.setName(name);<br><br>                studentListHighLight.add(highLightStudent);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (studentListHighLight.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;&gt;( (List&lt;T&gt;) studentListHighLight);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">int</span> totalPages = pagedStudentList.getTotalPages();<br>    System.out.println(<span class="hljs-string">&quot;检索后总分页数为&quot;</span> + totalPages);<br>    List&lt;Student&gt; studentList = pagedStudentList.getContent();<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七、Logstash"><a href="#七、Logstash" class="headerlink" title="七、Logstash"></a>七、Logstash</h1><blockquote><p>mysql控制远程连接</p><p>mysql数据库中的user表</p><p>user -&gt; host 对应关系</p><p>host为 % 都可以连接</p><p>host 有localhost 只有localhost可以连接</p></blockquote><h2 id="7-1、数据同步"><a href="#7-1、数据同步" class="headerlink" title="7.1、数据同步"></a>7.1、数据同步</h2><blockquote><p>Logstash是elastic技术栈中的一个技术。它是一个数据采集引擎，可以从数据库采集数据到es中。我们可以通过设置自增id主键或者时间来控制数据的自动同步 时间就是用于给logstash进行识别的</p><ul><li><p>id：假设现在有1000条数据，Logstatsh识别后会进行一次同步，同步完会记录这个id为1000，以后数据库新增数据，那么id会一直累加 h会有定时任务，发现有id大于1000了，则增量加入到es中 </p></li><li><p>时间：同理，一开始同步1000条数据，每条数据都有一个字段，为time，初次同步完毕后，记录这个time，下次同步的时候进行时间比 超过这个时间的，那么就可以做同步，这里可以同步新增数据，或者修改元数据，因为同一条数据的时间更改会被识别，而id则不会。</p></li><li><p>预先创建索引</p></li></ul></blockquote><h2 id="7-2、环境配置"><a href="#7-2、环境配置" class="headerlink" title="7.2、环境配置"></a>7.2、环境配置</h2><blockquote><p>Logstash 要与 es 版本一致</p><ul><li><p>需要本机配置jdk 环境</p></li><li><p>插件 ： logstash-input-jdbc </p><p>  ​    本插件用于同步，es6.x起自带，这个是集成在了 logstash中的。所以直接配置同步数据库的配置文件即可</p></li><li><p>需要logstash.tar.gz 包</p></li><li><p>需要mysql的驱动</p></li></ul></blockquote><ol><li><p>解压logstash 放到 <code>/user/local/logstash</code> 下</p></li><li><p>在 <code>/usr/local/logstash/logstash-6.4.3</code> 下创建 <code>sync</code> 文件夹</p></li><li><p>在 sync 文件夹下创建 logstash配置文件 <code>logstash-db-sync.conf</code>,  查询mysql数据库的sql脚本 <code>food-items.sql</code>, mysql驱动 <code>mysql-connector-java-5.1.41.jar</code></p><blockquote><p>logstash-db-sync.conf</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">input &#123;<br>jdbc &#123;<br># 设置mysql/MariaDB 数据库Url 以及数据库名称<br>jdbc_connection_string =&gt; <span class="hljs-string">&quot;jdbc:mysql://192.168.31.207:3306/foodie-shop&quot;</span><br># 用户名和密码<br>jdbc_user =&gt; <span class="hljs-string">&quot;root&quot;</span><br>jdbc_password =&gt; <span class="hljs-string">&quot;123456&quot;</span><br># 数据库驱动所在位置,可以是绝对路径或者相对路径<br>jdbc_driver_library =&gt; <span class="hljs-string">&quot;/usr/local/logstash/logstash-6.4.3/sync/mysql-connector-java-5.1.41.jar&quot;</span><br># 驱动类名<br>jdbc_driver_class =&gt; <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br># 开启分页<br>jdbc_paging_enabled =&gt; <span class="hljs-string">&quot;true&quot;</span><br># 分页每页数量,可以自定义<br>jdbc_page_size =&gt; <span class="hljs-string">&quot;10000&quot;</span><br># 执行sql文件路径<br>statement_filepath =&gt; <span class="hljs-string">&quot;/usr/local/logstash/logstash-6.4.3/sync/food-items.sql&quot;</span><br># 设置定时任务间隔  含义: 分，时，天，月，年， 全部为* 默认含义每分钟跑一次<br>schedule =&gt; <span class="hljs-string">&quot;* * * * *&quot;</span><br># 索引类型<br>type =&gt; <span class="hljs-string">&quot;_doc&quot;</span><br># 是否开启记录上次追踪的结果，也就是上次更新的时间，这个会记录到 last_run_metadata_path 的文件<br>use_column_value =&gt; <span class="hljs-keyword">true</span><br># 记录上一次追踪的结果值<br>last_run_metadata_path =&gt;  <span class="hljs-string">&quot;/usr/local/logstash/logstash-6.4.3/sync/track_time&quot;</span><br># 如果 use_column_value 为 <span class="hljs-keyword">true</span> ， 配置本参数 ， 追踪的column名 ， 可以是自增id 或者时间<br>tracking_column =&gt; <span class="hljs-string">&quot;update_time&quot;</span><br># tracking_column 对应字段的类型<br>tracking_column_type =&gt; <span class="hljs-string">&quot;timestamp&quot;</span><br># 是否清除 last_run_metadata_path 的记录, <span class="hljs-keyword">true</span>则每次都从头开始查询所有记录<br>clean_run =&gt; <span class="hljs-keyword">false</span><br># 数据库字段名称大写转小写<br>lowercase_column_names =&gt; <span class="hljs-keyword">false</span><br>&#125;<br>&#125;<br>output &#123;<br>elasticsearch &#123;<br># es地址<br>hosts =&gt; [<span class="hljs-string">&quot;192.168.198.100:9200&quot;</span>]<br># 同步的索引名<br>index =&gt; <span class="hljs-string">&quot;food-items&quot;</span><br># 设置 _docID 和 数据相同<br>document_id =&gt; <span class="hljs-string">&quot;%&#123;itemId&#125;&quot;</span> <br>&#125;<br><br># 日志输出<br>stdout &#123;<br>codec =&gt; json_lines<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>food-items.sql</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>            i.id <span class="hljs-keyword">as</span> itemId,<br>            i.item_name <span class="hljs-keyword">as</span> itemName,<br>            i.sell_counts <span class="hljs-keyword">as</span> sellCounts,<br>            ii.url <span class="hljs-keyword">as</span> imgUrl,<br>            tempSpec.priceDiscount <span class="hljs-keyword">as</span> price,<br>i.updated_time <span class="hljs-keyword">as</span> updated_time<br>        <span class="hljs-keyword">FROM</span><br>            items i<br>        <span class="hljs-keyword">left</span> <span class="hljs-keyword">JOIN</span><br>            items_img ii<br>        <span class="hljs-keyword">on</span><br>            i.id <span class="hljs-operator">=</span> ii.item_id<br>        <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>            (<br>                <span class="hljs-keyword">SELECT</span><br>                    item_id,<span class="hljs-built_in">MIN</span>(price_discount) <span class="hljs-keyword">as</span> priceDiscount<br>                <span class="hljs-keyword">FROM</span><br>                    items_spec<br>                <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>                    item_id<br>            )tempSpec<br>        <span class="hljs-keyword">on</span><br>            i.id <span class="hljs-operator">=</span> tempSpec.item_id<br><br>        <span class="hljs-keyword">WHERE</span><br>            ii.is_main <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">and</span> <br>i.updated_time <span class="hljs-operator">&gt;=</span> :sql_last_value<br></code></pre></td></tr></table></figure></li><li><p>进入 bin 目录 执行命令 <code>./logstash -f /usr/local/logstash-6.4.3/sync/logstash-db-sync.conf</code></p></li><li><p>mysql 主键字段  要与  elasticSearch 的 _id 相一致</p></li><li><p>logstash 的 timestamp 要与 mysql数据库中的 <code>updated_time</code> 相匹配</p></li><li><p>==远程连接 mysql 失败 <code>mysql.user</code>  表中 root 用户 对应的的 host 地址是否包含要读取mysql数据库的ip== </p></li></ol><h2 id="7-3、logstash数据更新"><a href="#7-3、logstash数据更新" class="headerlink" title="7.3、logstash数据更新"></a>7.3、logstash数据更新</h2><blockquote><p>mysql数据库中的数据有变化,可以通过 改变 update_time 字段来让logstash自动更新ES中的数据,也可以通过改变 update_time 字段来进行逻辑删除</p></blockquote><h2 id="7-4、logstash中文分词模板"><a href="#7-4、logstash中文分词模板" class="headerlink" title="7.4、logstash中文分词模板"></a>7.4、logstash中文分词模板</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">GET http:<span class="hljs-comment">//192.168.198.100:9200/_template/logstash、</span><br><span class="hljs-comment">// 将返回的内容进行修改,修改后如下所示</span><br></code></pre></td></tr></table></figure><blockquote><p>建立一个模板文件  <code>logstash-ik.json</code></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>    <br>        <span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;index_patterns&quot;</span>: [<br>            <span class="hljs-string">&quot;*&quot;</span><br>        ],<br>        <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;refresh_interval&quot;</span>: <span class="hljs-string">&quot;5s&quot;</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;_default_&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;dynamic_templates&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">&quot;message_field&quot;</span>: &#123;<br>                            <span class="hljs-attr">&quot;path_match&quot;</span>: <span class="hljs-string">&quot;message&quot;</span>,<br>                            <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>                            <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>                                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>                                <span class="hljs-attr">&quot;norms&quot;</span>: <span class="hljs-literal">false</span><br>                            &#125;<br>                        &#125;<br>                    &#125;,<br>                    &#123;<br>                        <span class="hljs-attr">&quot;string_fields&quot;</span>: &#123;<br>                            <span class="hljs-attr">&quot;match&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>                            <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>                            <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>                                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>                                <span class="hljs-attr">&quot;norms&quot;</span>: <span class="hljs-literal">false</span>,<br>                              <span class="hljs-comment">// 这里修改</span><br>                              <span class="hljs-comment">// String 会匹配到 text 进行 ik_max_word 分词</span><br>                              <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>                                <span class="hljs-attr">&quot;fields&quot;</span>: &#123;<br>                                    <span class="hljs-attr">&quot;keyword&quot;</span>: &#123;<br>                                        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                                        <span class="hljs-attr">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                ],<br>                <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;@timestamp&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>                    &#125;,<br>                    <span class="hljs-attr">&quot;@version&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>                    &#125;,<br>                    <span class="hljs-attr">&quot;geoip&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;dynamic&quot;</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>                            <span class="hljs-attr">&quot;ip&quot;</span>: &#123;<br>                                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ip&quot;</span><br>                            &#125;,<br>                            <span class="hljs-attr">&quot;location&quot;</span>: &#123;<br>                                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;geo_point&quot;</span><br>                            &#125;,<br>                            <span class="hljs-attr">&quot;latitude&quot;</span>: &#123;<br>                                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;half_float&quot;</span><br>                            &#125;,<br>                            <span class="hljs-attr">&quot;longitude&quot;</span>: &#123;<br>                                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;half_float&quot;</span><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">&quot;aliases&quot;</span>: &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>将 json 文件 放入 <code>/usr/local/logstash/logstash-6.4.3/sync</code> 目录下</p></li><li><p>修改  <code>logstash-db-sync.conf</code> 配置文件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">output &#123;<br>elasticsearch &#123;<br># es地址<br>hosts =&gt; [<span class="hljs-string">&quot;192.168.198.100:9200&quot;</span>]<br># 同步的索引名<br>index =&gt; <span class="hljs-string">&quot;food-items&quot;</span><br># 设置 _docID 和 数据相同<br>document_id =&gt; <span class="hljs-string">&quot;%&#123;itemId&#125;&quot;</span> <br><br># 定义模板名称<br>template_name =&gt; <span class="hljs-string">&quot;myik&quot;</span><br># 模板所在位置<br>template =&gt; <span class="hljs-string">&quot;/usr/local/logstash/logstash-6.4.3/sync/logstash-ik.json&quot;</span><br># 重写模板<br>template_overwrite =&gt; <span class="hljs-keyword">true</span><br># 默认为<span class="hljs-keyword">true</span>,<span class="hljs-keyword">false</span>关闭logstash自动管理模板功能，如果自定义模板,则设置为<span class="hljs-keyword">false</span><br>manage_template =&gt; <span class="hljs-keyword">false</span><br>&#125;<br><br># 日志输出<br>stdout &#123;<br>codec =&gt; json_lines<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>之后可以进行logstash 与 mysql 的同步</p><p> <code>./logstash -f /usr/local/logstash/logstash-6.4.3/sync/logstash-db-sync.conf</code></p></li></ol><h2 id="7-5、logstash-中文分词器配置失效"><a href="#7-5、logstash-中文分词器配置失效" class="headerlink" title="7.5、logstash-中文分词器配置失效"></a>7.5、logstash-中文分词器配置失效</h2><blockquote><p>分词配置不成功，analyzer不显示</p></blockquote><p>1.先将logstash的配置文件 <code>logstash-db-sync.conf</code> 中的 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"># 默认为<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>关闭logstash自动管理模板功能，如果自定义模板,则设置为<span class="hljs-literal">false</span><br>manage_template =&gt; <span class="hljs-literal">true</span> <span class="hljs-comment">// 设置为true</span><br></code></pre></td></tr></table></figure><p>2.删除原先索引，新建相同名字索引，启动logstash同步数据的脚本</p><p>3.使用postman查看模板是否配置成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">GET http:<span class="hljs-comment">//192.168.198.100:9200/_template/myik</span><br><span class="hljs-comment">// 有返回值,说明配置模板成功</span><br></code></pre></td></tr></table></figure><p>4.再将logstash配置文件 中的 manage_template 设置为false</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"># 默认为<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>关闭logstash自动管理模板功能，如果自定义模板,则设置为<span class="hljs-literal">false</span><br>manage_template =&gt; <span class="hljs-literal">false</span> <span class="hljs-comment">// 设置为false</span><br></code></pre></td></tr></table></figure><p>5.再次运行logstash 同步数据脚本 之后es索引应该能显示analyzer分词设置</p><h1 id="八、ES整合项目"><a href="#八、ES整合项目" class="headerlink" title="八、ES整合项目"></a>八、ES整合项目</h1><h2 id="8-1、初始化web环境"><a href="#8-1、初始化web环境" class="headerlink" title="8.1、初始化web环境"></a>8.1、初始化web环境</h2><blockquote><p>配置tomcat端口号</p><p>写一个简单的用于测试的controller</p><p>es模块依赖于 common 模块 pom.xml 中引入其依赖 </p><p>配置一个maven脚本 跳过test    <code>install -Dmaven.test.skip=true</code></p><ul><li>鼠标右键install -&gt; 选择 create * -&gt; command line 填入 <code>install -Dmaven.test.skip=true</code></li><li>之后会在下面自动生成Run Configurations , 其中会有刚才写的 maven脚本</li></ul><p>导入log4j日志依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j 日志依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>拷贝log4j.properties 配置文件到search 模块下 修改配置文件中的路径参数</p></blockquote><h2 id="8-2、高亮"><a href="#8-2、高亮" class="headerlink" title="8.2、高亮"></a>8.2、高亮</h2><p>使用<em> 标签 可以在前端自定义高亮样式</p>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2021/11/01/mysql_Sql_Learn/"/>
    <url>/2021/11/01/mysql_Sql_Learn/</url>
    
    <content type="html"><![CDATA[<p>MySQL基础</p><span id="more"></span><h1 id="一、mysql概述"><a href="#一、mysql概述" class="headerlink" title="一、mysql概述"></a>一、mysql概述</h1><h2 id="1-1、mysql环境搭建"><a href="#1-1、mysql环境搭建" class="headerlink" title="1.1、mysql环境搭建"></a>1.1、mysql环境搭建</h2><blockquote><p>下载mysql压缩包</p><p>解压到目录下</p><p>配置环境变量</p><p>新建修改mysql配置文件 my.ini</p><p>管理员模式打开cmd，安装mysql服务</p><p>初始化加载mysql配置文件</p><p>启动mysql，用命令进入mysql管理界面，修改密码</p><p>修改mysql配置文件，开启密码验证，刷新权限</p><p>重启mysql服务 <code>net stop mysql/net start mysql</code></p><p>正常使用</p></blockquote><h2 id="1-2、Sqlyog使用"><a href="#1-2、Sqlyog使用" class="headerlink" title="1.2、Sqlyog使用"></a>1.2、Sqlyog使用</h2><h2 id="1-3、常用命令"><a href="#1-3、常用命令" class="headerlink" title="1.3、常用命令"></a>1.3、常用命令</h2><blockquote><p>命令行连接</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs SQl">mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p <span class="hljs-number">123456</span>   <span class="hljs-comment">-- 连接数据库</span><br>update mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(&quot;zqm@mysql&quot;) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span> <span class="hljs-keyword">and</span> Host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;localhost&#x27;</span>; <span class="hljs-comment">-- 修改root用户密码</span><br>flush privileges; <span class="hljs-comment">-- 刷新权限</span><br><span class="hljs-comment">-- 所有语句都使用 ; 结尾</span><br><span class="hljs-keyword">show</span> databases; <span class="hljs-comment">-- 查看所有的数据库</span><br>use school <span class="hljs-comment">--切换数据库 use 数据库名</span><br><br><span class="hljs-keyword">show</span> tables <span class="hljs-comment">--查看数据库中所有的表</span><br><span class="hljs-keyword">describe</span> student; <span class="hljs-comment">-- 显示数据库中所有表的信息</span><br><br><span class="hljs-keyword">create</span> databases mybatis; <span class="hljs-comment">-- 创建一个名为 mybatis 的 数据库</span><br><br>exit; <span class="hljs-comment">--退出连接</span><br><br><span class="hljs-comment">-- 单行注释(sql本来的注释)</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>DDL    数据库定义语言</li><li>DML   数据库操作语言</li><li>DQL   数据库查询语言</li><li>DCL   数据库控制语言</li></ul><h1 id="二、操作数据库"><a href="#二、操作数据库" class="headerlink" title="二、操作数据库"></a>二、操作数据库</h1><p>操作数据库-&gt;操作数据库中的表-&gt;操作数据库中表的数据</p><ul><li>mysql不区分大小写</li></ul><h2 id="2-1、数据库操作-了解"><a href="#2-1、数据库操作-了解" class="headerlink" title="2.1、数据库操作(了解)"></a>2.1、数据库操作(了解)</h2><p>1、创建数据库</p><p><code>create database [if not exist] mybatis;</code> 创建数据库，[如果不存在]</p><p>2、删除数据库</p><p><code>drop databse [if exists] mybatis;</code> 删除数据库</p><p>3、使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 如果表名或者字段名是一个特殊字符需要带 ``</span><br>use `school`; <span class="hljs-comment">-- 使用数据库</span><br></code></pre></td></tr></table></figure><p><img src="mysql_Sql_Learn.assets/image-20210516152722810.png" alt="image-20210516152722810"></p><ul><li><p>加 `` 标识一些字段</p><p>  ​    <img src="mysql_Sql_Learn.assets/image-20210516152747058.png" alt="image-20210516152747058"></p></li></ul><p>4、查看数据库</p><p><code>show databases;</code> - 查看所有的数据库</p><h2 id="2-2、数据库的列类型"><a href="#2-2、数据库的列类型" class="headerlink" title="2.2、数据库的列类型"></a>2.2、数据库的列类型</h2><blockquote><p>数值</p></blockquote><ul><li>tinyint   十分小的数据 1 个字节</li><li>smallint  较小的数据   2个字节</li><li>mediumint  中等大小的数据 3个字节</li><li>==int        标准的整数     4个字节==</li><li>bigint   较大的数据    8个字节</li></ul><ul><li>float    单精度浮点数 4个字节</li><li>double  双精度浮点数 8个字节 (精度问题)</li><li>==decimal   字符串形式的浮点数    金融计算的时候，一般是使用decimal==</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char 固定大小的字符串  0~255</li><li>==varchar 可变长字符串    0~65535==  常用</li><li>tinytext  微型文本  2^8-1</li><li>text      大文本       2^16 - 1</li></ul><blockquote><p>时间日期</p></blockquote><p>java.util.Date - java中的类</p><ul><li>date           YYYY-MM-DD，日期格式</li><li>time           HH:mm:ss，时间格式</li><li>==datetime    YYYY-MM-DD  HH:mm:ss  最常用的时间格式==</li><li>==timestamp  时间戳 1970.1.1 到现在的毫秒数  也较为常用==</li><li>year   年份表示</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li>==注意：不要使用null值进行计算 ，结果都为null==</li></ul><h2 id="2-3、数据库的字段属性-重点"><a href="#2-3、数据库的字段属性-重点" class="headerlink" title="2.3、数据库的字段属性(重点)"></a>2.3、数据库的字段属性(重点)</h2><p>==Unsigned：==</p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p>==zerofill：==</p><ul><li>零填充 不足的位数使用0来填充  int(3) 写了一个 5 会变成 005</li></ul><p>==自增==</p><ul><li>通常理解为自增，自动在上一条记录的基础上+1(默认)</li><li>通常用来设计唯一的主键~index，必须是整数类型</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p>==非空 NULL NOT NULL==</p><ul><li>假设设置为非空，如果不给他赋值，就会报错</li><li>null ， 如果不填写值，默认就是null</li></ul><p>==默认==</p><ul><li>设置默认的值</li><li>sex，默认值为男，如果不指定该列的值，会有默认值填充</li></ul><p>==注意- 拓展==</p><p><img src="mysql_Sql_Learn.assets/image-20210516155456375.png" alt="image-20210516155456375"></p><h2 id="2-4、创建数据库表"><a href="#2-4、创建数据库表" class="headerlink" title="2.4、创建数据库表"></a>2.4、创建数据库表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 注意点  使用 英文 () , 表的名称和字段 尽量使用 `` 括起来</span><br><span class="hljs-comment">-- AUTO_INCREMENT 自增</span><br><span class="hljs-comment">-- 所有的语句后面加  , 英文的 ， 最后一个字段不用加</span><br><span class="hljs-comment">-- PRIMARY KEY 主键  主键 一般一个表只有一个唯一的</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `student`(<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;学生id&#x27;</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> DAFAULT <span class="hljs-string">&#x27;匿名&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;123456&#x27;</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  `sex` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;女&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  `birthday` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;出生日期&#x27;</span>,<br>  `address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;家庭住址&#x27;</span>,<br>  `email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(`id`)<br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><blockquote><p>大概的格式</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>[IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] `表名`(<br>`字段名` 列类型 [属性] [索引] [注释],<br>  `字段名` 列类型 [属性] [索引] [注释],<br>  `字段名` 列类型 [属性] [索引] [注释],<br>  <span class="hljs-keyword">PRIMARY</span> KEY(`字段名`)<br>)engine<span class="hljs-operator">=</span>数据库引擎 <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><blockquote><p>查看表或数据库的创建语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database school <span class="hljs-comment">--查看创建数据库的语句</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student <span class="hljs-comment">--查看创建表的语句</span><br><span class="hljs-keyword">DESC</span> student <span class="hljs-comment">-- 显示表的结构</span><br></code></pre></td></tr></table></figure><h2 id="2-5、数据表的类型"><a href="#2-5、数据表的类型" class="headerlink" title="2.5、数据表的类型"></a>2.5、数据表的类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 关于数据库引擎</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">INNODB   默认使用的</span><br><span class="hljs-comment">MYISAM   早些年使用的</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="mysql_Sql_Learn.assets/image-20210516174528355.png" alt="image-20210516174528355"></p><ul><li><p>MYISAM  节约空间，速度较快</p></li><li><p>INNODB   安全性高，事务的处理，多表用户操作</p></li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在data目录下，一个文件夹就对应一个数据库</p><p>本质还是文件的存储！</p><p>Mysql数据库引擎在物理文件上的区别</p><ul><li>InnoDB 在数据库表中只有一个*.frm 文件 ， 以及上级目录下的 ibdata1 文件</li><li>Myisam 对应的物理文件<ul><li>*.frm      表结构的定义文件</li><li>*.MYD    数据文件(data)</li><li>*.MYI      索引文件 (index)</li></ul></li></ul><blockquote><p>设置数据库的字符集编码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">CHARSET <span class="hljs-operator">=</span> utf8<br></code></pre></td></tr></table></figure><p>不设置的话，会是mysql默认的字符集编码(不支持中文)</p><ol><li>在my.ini中配置默认的编码 <code>character-set-server=utf8</code></li><li></li></ol><h2 id="2-6、表的操作"><a href="#2-6、表的操作" class="headerlink" title="2.6、表的操作"></a>2.6、表的操作</h2><p>修改和删除数据表字段</p><blockquote><p>修改表字段</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher rename <span class="hljs-keyword">as</span> teacher1 <span class="hljs-comment">--修改表名称</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 rename <span class="hljs-keyword">as</span> 新表名<br><span class="hljs-comment">--修改表字段</span><br><span class="hljs-comment">-- change用来字段重命名</span><br><span class="hljs-comment">-- modify 用来修改字段约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher1 <span class="hljs-keyword">add</span> age <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-comment">-- 修改表字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher1 modify age <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">--修改约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher1 change age age1 <span class="hljs-comment">--修改列名，字段重命名</span><br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher1 <span class="hljs-keyword">drop</span> age1 <span class="hljs-comment">-- 删除表字段</span><br><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> teacher1 <br><span class="hljs-comment">-- 所有的操作尽量加上判断，以免报错</span><br></code></pre></td></tr></table></figure><p>==注意点==</p><ul><li>字段名 用 ``包裹</li><li>注释  – /**/</li><li>mysql关键字大小写不敏感 ， 建议小写  容易看出，所有的符号全部用英文，分号;</li></ul><h1 id="三、mysql数据管理"><a href="#三、mysql数据管理" class="headerlink" title="三、mysql数据管理"></a>三、mysql数据管理</h1><h2 id="3-1、数据库级别的外键-了解即可"><a href="#3-1、数据库级别的外键-了解即可" class="headerlink" title="3.1、数据库级别的外键(了解即可)"></a>3.1、数据库级别的外键(了解即可)</h2><p>==阿里Java规范：[强制]不可以使用外键或级联，一切外键必须在应用层解决==</p><blockquote><p>方式一，创建表的时候，增加约束，比较复杂</p><p>删除有外键关系表的时候，必须先删除引用了别的表的表(从表)，才能删除被引用的表(主表)</p></blockquote><blockquote><p>方式二、创建表成功后，添加外键约束</p><p>sql语句给表增加外键</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `student` <br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> `FK_gredeid` <span class="hljs-keyword">FOREIGN</span> KEY(`gradeid`) <span class="hljs-keyword">REFERENCES</span> `grade` (`gradeid`);<br></code></pre></td></tr></table></figure><p>==以上操作都是物理外键，数据库级别的外键，不建议使用(避免数据库依赖过多，造成困扰)==</p><p>==最佳实践，避免使用外键==</p><ul><li>数据库就是单纯的表，只用来存数据，只有行(数据)和列(字段)</li><li>使用外键，程序去实现</li></ul><h2 id="3-2、DML语句-全部记住"><a href="#3-2、DML语句-全部记住" class="headerlink" title="3.2、DML语句(全部记住)"></a>3.2、DML语句(全部记住)</h2><p><strong>数据库意义</strong>：数据存储，数据管理</p><p>DML语言：数据操作语言</p><ul><li>Insert 插入</li><li>Update 插入</li><li>Delete 删除</li></ul><h2 id="3-3、添加"><a href="#3-3、添加" class="headerlink" title="3.3、添加"></a>3.3、添加</h2><blockquote><p>insert</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `grade` (`username`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>)<br><span class="hljs-comment">-- 如果不写指定的字段，会按照顺序一一匹配</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `grade` <span class="hljs-keyword">values</span> <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-comment">--写插入语句，保证数据和字段一致</span><br><span class="hljs-comment">--插入多行数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `grade` (`username`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;张三&#x27;</span>),(<span class="hljs-string">&#x27;王五&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>语法</p><p>插入多行数据</p><p><code>insert into 表名([字段名1],[字段名2],[字段名3]) values(&#39;值1&#39;),(&#39;值2&#39;),(&#39;值3&#39;)</code> </p><p>插入单行数据</p><p><code>insert into 表名([字段名1],[字段名2],[字段名3]) values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</code> </p></blockquote><p>注意事项：</p><ul><li>字段和字段之间使用英文逗号隔开</li><li>字段是可以省略的，但后面的值要一一对应</li><li>可以同时插入多行数据</li></ul><h2 id="3-4、修改"><a href="#3-4、修改" class="headerlink" title="3.4、修改"></a>3.4、修改</h2><blockquote><p>update  修改谁 条件 set 原来的值 新值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 修改在student表中id为1的记录，把名字修改为张三</span><br>update `student` <span class="hljs-keyword">set</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 不指定条件的情况下修改会修改整个表的记录</span><br>update `student` <span class="hljs-keyword">set</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span><br><br><span class="hljs-comment">-- 语法</span><br>update 表名 <span class="hljs-keyword">set</span> 字段名 <span class="hljs-operator">=</span> 值 <span class="hljs-keyword">where</span> 搜索记录的条件<br><span class="hljs-comment">-- 多个属性的记录修改</span><br>update `student` <span class="hljs-keyword">set</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>,`email` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;12@qq.com&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 多个条件确定要修改的记录</span><br>update `student` <span class="hljs-keyword">set</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> calss <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;大一&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>条件 where子句  运算符 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- id大于某个值，等于某个值 在某个区间内修改</span><br><br></code></pre></td></tr></table></figure><blockquote><p>常用操作符</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210518171108783.png" alt="image-20210518171108783"></p><p>==语法：<code>update 表名 set colnum_name = value,[colnum_name=value,...] where [条件]</code>==</p><p>==注意==</p><ul><li><p>colnum_name 是数据库的列(属性字段)，尽量加上``</p></li><li><p>条件，筛选的条件，如果没有指定条件，会修改所有的列</p></li><li><p>value，是一个具体的值，也可以是一个变量，多个设置的属性之间用英文逗号隔开</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">update `student` <span class="hljs-keyword">set</span> `<span class="hljs-type">date</span>`<span class="hljs-operator">=</span><span class="hljs-built_in">CURRENT_TIME</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">and</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-5、删除"><a href="#3-5、删除" class="headerlink" title="3.5、删除"></a>3.5、删除</h2><blockquote><p>delete</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 删除指定数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件]<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> `student` <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>TRUNCATE 命令</p></blockquote><p>作用：完全清空一个数据表，表的结构和索引约束不会变！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 清空 student 表</span><br><span class="hljs-keyword">truncate</span> `student`<br></code></pre></td></tr></table></figure><blockquote><p>truncate和delete区别</p></blockquote><ul><li>相同点：都能删除数据，都不会删除表结构</li><li>不同点：<ul><li>truncate 重新设置自增列 计数器归零</li><li>truncate 不会影响事务</li></ul></li><li>了解即可<ul><li>InnoDB 自增列会从1开始(存在内存中，断电即失)</li><li>Myisam 继续从上一个自增量开始，(存在文件中的，不会丢失)</li></ul></li></ul><h1 id="四、DQL查询语句-最重要"><a href="#四、DQL查询语句-最重要" class="headerlink" title="四、DQL查询语句(最重要)"></a>四、DQL查询语句(最重要)</h1><p>==select完整语法==</p><p><img src="mysql_Sql_Learn.assets/image-20210518175316687.png" alt="image-20210518175316687"></p><h2 id="4-1、DQL"><a href="#4-1、DQL" class="headerlink" title="4.1、DQL"></a>4.1、DQL</h2><p>Data Query Language ： 数据查询语言</p><ul><li>所有的查询操作都要用它 Select</li><li>简单的查询，复杂的查询它都能做</li><li>数据库中最核心的语言，最重要的语句</li><li>使用频率最高的语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询所有信息 在 表  student</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-comment">-- 查询指定字段的信息</span><br><span class="hljs-keyword">select</span> `name`,`age` <span class="hljs-keyword">from</span> student<br><span class="hljs-comment">-- 别名 给字段起一个别名 as 也可以给表起别名</span><br><span class="hljs-keyword">select</span> `name` <span class="hljs-keyword">as</span> 名字 , `age` <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> student<br><span class="hljs-comment">-- 函数 concat(a,b)</span><br><span class="hljs-keyword">SELECT</span> CONCAT (<span class="hljs-string">&#x27;ID：&#x27;</span>,`userId`) <span class="hljs-keyword">AS</span> NewID <span class="hljs-keyword">FROM</span> grade <span class="hljs-keyword">AS</span> s<br></code></pre></td></tr></table></figure><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> 字段 ... <span class="hljs-keyword">from</span> 表<br></code></pre></td></tr></table></figure><blockquote><p>有的时候，字段的名字不是很能见名知意，起别名来进行改善这种情况</p><p>字段名 as 别名 </p></blockquote><h2 id="4-2、去重-distinct"><a href="#4-2、去重-distinct" class="headerlink" title="4.2、去重  distinct"></a>4.2、去重  distinct</h2><blockquote><p>作用：去除select查询出来的结果中的重复数据，重复的数据只显示一条</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询有哪些同学参加了考试，成绩</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <br><span class="hljs-comment">-- 查询有哪些同学参加了考试 去重</span><br><span class="hljs-keyword">select</span> `id` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><span class="hljs-comment">-- 发现重复数据，去重</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> `id` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><br></code></pre></td></tr></table></figure><blockquote><p>数据库的列 (表达式)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> VERSION() <span class="hljs-comment">-- 查询系统版本(函数)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">3</span> <span class="hljs-keyword">AS</span> 计算 <span class="hljs-comment">-- 计算(表达式)</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@auto</span>_increment_increment <span class="hljs-comment">-- 查询自增的步长(变量)</span><br></code></pre></td></tr></table></figure><blockquote><p>数据库表中某一字段集中查询出来后修改</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 数据库中所有字段全部 +1 只限查询时，数据库中的数据并不会修改</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `userId`<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> grade<br></code></pre></td></tr></table></figure><p>==数据库中的表达式：文本值，列，null，函数，计算表达式，系统变量==</p><h2 id="4-3、where条件子句"><a href="#4-3、where条件子句" class="headerlink" title="4.3、where条件子句"></a>4.3、where条件子句</h2><ul><li><p>检索数据中==符合条件==的值</p></li><li><p>搜索的条件由一个或者多个表达式组成！</p></li><li><p>结果是 布尔值</p></li></ul><h3 id="1、逻辑运算符"><a href="#1、逻辑运算符" class="headerlink" title="1、逻辑运算符"></a>1、逻辑运算符</h3><blockquote><p>逻辑运算符  与 或 非</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210518201553888.png" alt="image-20210518201553888"></p><p>==尽量使用英文字母==</p><blockquote><p>代码测试</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ==============where=============</span><br><span class="hljs-keyword">select</span> `studentNo`,`StudentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><br><span class="hljs-comment">-- 查询成绩在95-100 之间的学生成绩</span><br><span class="hljs-keyword">select</span> `studentNo`,`studentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">where</span> studentResult <span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span> <span class="hljs-keyword">and</span> StudentResult <span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span><br><span class="hljs-comment">-- and &amp;&amp; 等价 但尽量使用 and 意思比较清晰</span><br><span class="hljs-keyword">select</span> `studentNo`,`studentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">where</span> studentResult <span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span> <span class="hljs-operator">&amp;&amp;</span> StudentResult <span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span><br><br><span class="hljs-comment">-- 模糊查询 (区间) between and 区间范围 [95,100] between 95 and 100</span><br><span class="hljs-keyword">select</span> `studentNo`,`studentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">where</span> studentResult <span class="hljs-keyword">between</span> <span class="hljs-number">95</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span> <br><span class="hljs-comment">-- 查询除了1000号学生之外的同学的成绩</span><br><span class="hljs-keyword">select</span> `studentNo`,`studentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">where</span> studentNo <span class="hljs-operator">!=</span> <span class="hljs-number">1000</span><br><span class="hljs-comment">-- != not</span><br><span class="hljs-keyword">select</span> `studentNo`,`studentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> studentNo <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><br><br></code></pre></td></tr></table></figure><h3 id="2、比较运算符"><a href="#2、比较运算符" class="headerlink" title="2、比较运算符"></a>2、比较运算符</h3><blockquote><p>模糊查询：比较运算符</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210518225228227.png" alt="image-20210518225228227"></p><blockquote><p>代码实现</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- =============模糊查询==================</span><br><span class="hljs-comment">-- ===============like=================== </span><br><span class="hljs-comment">-- like结合 %(代表0到任意个字符)  _(一个字符)</span><br><span class="hljs-comment">-- 查询姓刘的同学 </span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <br><span class="hljs-keyword">where</span> StudentName <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;刘%&#x27;</span><br><span class="hljs-comment">-- 查询姓刘的查询，名 只有一个字</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <br><span class="hljs-keyword">where</span> StudentName <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;刘_&#x27;</span><br><span class="hljs-comment">-- ==============in (具体的某一个或多个值)================</span><br><span class="hljs-comment">-- 查询1001，1002，1003 号 学员</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <br> <span class="hljs-keyword">where</span> StudentNo <span class="hljs-keyword">in</span>(<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>)<br><span class="hljs-comment">-- 查询在北京的学生</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <br><span class="hljs-keyword">where</span> `Address` <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;北京&#x27;</span>)<br><span class="hljs-comment">-- =============null 和 not null ============</span><br><span class="hljs-comment">-- 查询地址为空的学生 null &#x27;&#x27;</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <br><span class="hljs-keyword">where</span> address <span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> address <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-comment">-- 查询有出生日期的同学    出生日期 - 不为空</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <br> <span class="hljs-keyword">where</span> `BornDate` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br> <span class="hljs-comment">-- 查询没有出生日期的同学，出生日期 - 为空</span><br> <span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student`<br> <span class="hljs-keyword">where</span> `BornDate` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><h2 id="4-4、联表查询-重要"><a href="#4-4、联表查询-重要" class="headerlink" title="4.4、联表查询(重要)"></a>4.4、联表查询(重要)</h2><h3 id="1、连接查询-join-on"><a href="#1、连接查询-join-on" class="headerlink" title="1、连接查询 join on"></a>1、连接查询 join on</h3><blockquote><p>Join 对比</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210523212034184.png" alt="image-20210523212034184"></p><blockquote><p>七种Join</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210524144138200.png" alt="image-20210524144138200"></p><p><img src="mysql_Sql_Learn.assets/image-20210524150415760.png" alt="image-20210524150415760"></p><blockquote><p>代码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询参见了考试的同学(学号，姓名，科目编号，分数)</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><span class="hljs-comment">-- 思路</span><br><span class="hljs-comment">-- 1.分析需求，分析查询的字段来自哪些表，(连接查询)</span><br><span class="hljs-comment">-- 2.确定使用哪种连接查询？7种</span><br><span class="hljs-comment">-- 确定交差点，(两个表中哪个数据是相同的)</span><br><span class="hljs-comment">-- 判断的条件：student表中的 no = result表中的no</span><br><span class="hljs-keyword">select</span> s.studentNo,studentName,subjectNo<br><span class="hljs-keyword">from</span> stduent s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">where</span> s.studentNo <span class="hljs-operator">=</span> r.studentNo <br><span class="hljs-comment">-- join on (判断的条件) 连接查询</span><br><span class="hljs-comment">-- where (连接的表) 等值查询</span><br><br><span class="hljs-comment">-- 思路</span><br><span class="hljs-comment">-- 要查询哪些数据 select...</span><br><span class="hljs-comment">-- 从哪几个表中查， from 表， xxx join 连接的表 on 交叉条件</span><br><span class="hljs-comment">-- 假设存在多张表查询，先查询两张表，再慢慢增加</span><br><br><span class="hljs-comment">-- from a left join b   (A表为基准)</span><br><span class="hljs-comment">-- from a right join b (B表为基准)</span><br></code></pre></td></tr></table></figure><h3 id="2、自连接-了解"><a href="#2、自连接-了解" class="headerlink" title="2、自连接(了解)"></a>2、自连接(了解)</h3><blockquote><p>自己的表和自己的表连接， ==一张表拆成两张一样的表==</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210525105838007.png" alt="image-20210525105838007"></p><p>操作：查询父类对应的子类关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询父子信息，把一张表看作两张一模一样的表</span><br><span class="hljs-comment">-- a 作为 父表  b 作为子表 但两个表其实是一个表</span><br><span class="hljs-keyword">select</span> a.`categoryName` <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;父栏目&#x27;</span> b.`category` <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;子栏目&#x27;</span><br><span class="hljs-keyword">from</span> `category` <span class="hljs-keyword">as</span> a,`category` <span class="hljs-keyword">as</span> b<br><span class="hljs-keyword">where</span> a.`categoryid`<span class="hljs-operator">=</span>b.`pid`<br></code></pre></td></tr></table></figure><h2 id="4-5、分页和排序"><a href="#4-5、分页和排序" class="headerlink" title="4.5、分页和排序"></a>4.5、分页和排序</h2><blockquote><p>order by 和 limit 有先后顺序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `grade`<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score<br></code></pre></td></tr></table></figure><h2 id="4-6、子查询和嵌套查询"><a href="#4-6、子查询和嵌套查询" class="headerlink" title="4.6、子查询和嵌套查询"></a>4.6、子查询和嵌套查询</h2><p>where(值是固定的，这个值是计算出来的)</p><p>本质：<code>在where语句中嵌套一个查询语句</code></p><h2 id="4-7、select小结"><a href="#4-7、select小结" class="headerlink" title="4.7、select小结"></a>4.7、select小结</h2><p><img src="mysql_Sql_Learn.assets/image-20210525232623286.png" alt="image-20210525232623286"></p><h1 id="五、Mysql函数"><a href="#五、Mysql函数" class="headerlink" title="五、Mysql函数"></a>五、Mysql函数</h1><h2 id="5-1、常用函数"><a href="#5-1、常用函数" class="headerlink" title="5.1、常用函数"></a>5.1、常用函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 数学运算</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">ABS</span>() <span class="hljs-comment">--绝对值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">CEILING</span>() <span class="hljs-comment">--向上取整</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">FLOOR</span>() <span class="hljs-comment">-- 向下取整</span><br><span class="hljs-keyword">select</span> rand() <span class="hljs-comment">-- 随机数</span><br><span class="hljs-keyword">select</span> sign() <span class="hljs-comment">--判断数的符号， 0 - 0 负数返回 -1 正数返回 1</span><br><span class="hljs-comment">-- 字符串函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">CHAR_LENGTH</span>() <span class="hljs-comment">--字符串长度</span><br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>) <span class="hljs-comment">--字符串拼接</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">lower</span>() <span class="hljs-comment">-- 英文字母全部转换为小写</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">upper</span>() <span class="hljs-comment">-- 英文字母全部转换为大写</span><br><span class="hljs-keyword">select</span> substr() <span class="hljs-comment">--截取字符串 (str,起始位置,截取数量)</span><br><span class="hljs-keyword">select</span> reverse() <span class="hljs-comment">--反转字符串</span><br></code></pre></td></tr></table></figure><p><img src="mysql_Sql_Learn.assets/image-20210525210548030.png" alt="image-20210525210548030"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 时间和日期函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_date</span>() <span class="hljs-comment">--获取当前日期</span><br><span class="hljs-keyword">select</span> curdate()    <span class="hljs-comment">--获取当前日期</span><br><span class="hljs-keyword">select</span> now()          <span class="hljs-comment">--获取当前的时间</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">localtime</span>()    <span class="hljs-comment">--获取当前时间</span><br><span class="hljs-keyword">select</span> sysdate()      <span class="hljs-comment">--获取系统时间</span><br><span class="hljs-comment">-- 系统函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">SYSTEM_USER</span>() <span class="hljs-comment">--获取当前用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">USER</span>()        <span class="hljs-comment">--获取当前用户</span><br><span class="hljs-keyword">select</span> version()     <span class="hljs-comment">--获取数据库版本</span><br></code></pre></td></tr></table></figure><p><img src="mysql_Sql_Learn.assets/image-20210525211108426.png" alt="image-20210525211108426"></p><h2 id="5-2、聚合函数-常用"><a href="#5-2、聚合函数-常用" class="headerlink" title="5.2、聚合函数(常用)"></a>5.2、聚合函数(常用)</h2><p><img src="mysql_Sql_Learn.assets/image-20210525230007273.png" alt="image-20210525230007273"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 聚合函数</span><br><span class="hljs-comment">-- 都能统计表中的数据 (想查询一个表中有多少个记录) 使用 count()</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(`字段名`) <span class="hljs-keyword">from</span> student <span class="hljs-comment">-- Count(字段名) ，会忽略所有的null值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student <span class="hljs-comment">--count(*)，不会忽略null值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> student <span class="hljs-comment">--count(1)，不会忽略null值</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(`<span class="hljs-keyword">result</span>`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;总和&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <span class="hljs-comment">-- 总和</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(`<span class="hljs-keyword">result</span>`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <span class="hljs-comment">-- 均值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(`<span class="hljs-keyword">result</span>`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最高分&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>  <span class="hljs-comment">--最大值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(`<span class="hljs-keyword">result</span>`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最低分&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>  <span class="hljs-comment">--最小值</span><br><br><br></code></pre></td></tr></table></figure><h2 id="5-3、MD5加密"><a href="#5-3、MD5加密" class="headerlink" title="5.3、MD5加密"></a>5.3、MD5加密</h2><blockquote><p>主要增强算法复杂度和不可逆性    </p><p>具体的值的 md5 是一样的</p><p>MD5破解网站的原理，背后有一个字典，MD5加密后的值，  加密前的值</p></blockquote><blockquote><p>使用md5加密</p><p>验证密码时，将输入的密码进行md5算法加密，再与数据库中的密码字段相比较，得出结果</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 加密</span><br>update testmd5 <span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> MD5(password) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>update testmd5 <span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> MD5(password) <span class="hljs-comment">-- 加密全部的密码 </span><br><span class="hljs-comment">-- 插入的时候加密</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testmd5 <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;xiaohu&#x27;</span>,MD5(<span class="hljs-string">&#x27;123456&#x27;</span>))<br><span class="hljs-comment">-- 如何校验</span><br><span class="hljs-comment">-- 将用户传递进来的密码进行md5加密，比对加密后的值</span><br></code></pre></td></tr></table></figure><h1 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h1><h2 id="6-1、什么是事务"><a href="#6-1、什么是事务" class="headerlink" title="6.1、什么是事务"></a>6.1、什么是事务</h2><p>要么都成功，要么都失败 - 银行转账业务</p><blockquote><p>事务原则：ACID原则，原子性，一致性，隔离性，持久性 (脏读，幻读)</p></blockquote><p>博客：<a href="https://blog.csdn.net/dengjili/article/details/82468576">https://blog.csdn.net/dengjili/article/details/82468576</a></p><p><strong>原子性</strong>： 要么都成功，要么都失败</p><p><strong>一致性</strong>： 事务前后数据完整性要保持一致， 原先只有1000块，事务提交后，还是只有1000块</p><p><strong>持久性</strong>： 事务一旦被提交，数据库中数据的改变就是永久的，数据库发生故障也不应该对其产生影响</p><p><strong>隔离性</strong>： 多个用户并发访问数据库时，数据库为每一个用户开启事务，不能被其它事务的操作数据所干扰，多个并发事务之间要相互隔离 </p><blockquote><p>隔离所导致的一些问题</p></blockquote><p><strong>脏读</strong> ：一个事务读取了另一个事务未提交的数据</p><p><strong>不可重复读</strong>：在一个事务内读取表中某一行数据，多次读取结果不同，(这个不一定是错误，只是某些场合不对)</p><p>**虚读(幻读)**：是指一个事务内读取到了别的事务插入的数据，导致前后读取不一致</p><h2 id="6-2、测试mysql事务"><a href="#6-2、测试mysql事务" class="headerlink" title="6.2、测试mysql事务"></a>6.2、测试mysql事务</h2><blockquote><p>mysql事务 默认开启自动提交</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- 关闭事务自动提交</span><br><br><span class="hljs-comment">-- 手动处理事务</span><br><span class="hljs-comment">-- 事务开启 </span><br><span class="hljs-keyword">start</span> transaction <span class="hljs-comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内 (一组事务)</span><br><span class="hljs-keyword">insert</span> xx<br><span class="hljs-keyword">insert</span> zz<br><span class="hljs-keyword">insert</span> yy<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> <span class="hljs-comment">--(持久化,如果事务执行成功)</span><br><span class="hljs-keyword">rollback</span> <span class="hljs-comment">--(回滚，如果事务执行失败)</span><br><span class="hljs-comment">-- 事务结束</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">--开启事务自动提交</span><br><br><span class="hljs-comment">-- 设置一个事务的保存点</span><br><span class="hljs-keyword">savepoint</span> <br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">savepoint</span> <span class="hljs-comment">-- 回滚到保存点</span><br><span class="hljs-keyword">release</span> <span class="hljs-keyword">savepoint</span> <span class="hljs-comment">--删除保存点</span><br></code></pre></td></tr></table></figure><h1 id="七、索引"><a href="#七、索引" class="headerlink" title="七、索引"></a>七、索引</h1><blockquote><p>Mysql官方对索引的定义为：<strong>索引(index)是帮助Mysql高效获取数据的数据结构</strong>。提取句子主干，就可以得到索引的本质：索引是数据结构</p></blockquote><h2 id="7-1、索引的分类"><a href="#7-1、索引的分类" class="headerlink" title="7.1、索引的分类"></a>7.1、索引的分类</h2><blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li>主键索引 (primary key)<ul><li>唯一地标识，主键不可重复，只能有一个列作为主键</li></ul></li><li>唯一索引 (unique key)<ul><li>避免重复的列出现，唯一索引可以重复，多个列都可标识为  唯一索引</li></ul></li><li>常规索引 (key/index)<ul><li>默认的，index，key关键字来设置</li></ul></li><li>全文索引 (fulltext)<ul><li>在特定的数据库引擎下才有，myisam</li><li>快速定位数据</li></ul></li></ul><blockquote><p>索引的使用  - 基础语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SQL">  <span class="hljs-comment">-- 索引的使用</span><br><span class="hljs-comment">-- 1.在创建表的时候给字段增加索引</span><br><span class="hljs-comment">-- 2.创建完毕后，增加索引</span><br><span class="hljs-comment">-- 显示所有的索引信息</span><br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> `test`<br><br><span class="hljs-comment">-- 增加一个索引</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `test` <span class="hljs-keyword">ADD</span> FULLTEXT INDEX `name` (`name`)<br><br><span class="hljs-comment">-- 分析sql执行的状况</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-comment">-- 常规索引，非全文索引</span><br> <br></code></pre></td></tr></table></figure><h2 id="7-2、测试索引"><a href="#7-2、测试索引" class="headerlink" title="7.2、测试索引"></a>7.2、测试索引</h2><p>博客：<a href="https://blog.csdn.net/wufuhuai/article/details/79631466">https://blog.csdn.net/wufuhuai/article/details/79631466</a></p><h2 id="7-3、索引原则"><a href="#7-3、索引原则" class="headerlink" title="7.3、索引原则"></a>7.3、索引原则</h2><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用来查询的字段上</li></ul><blockquote><p>索引的数据结构</p></blockquote><p>Hash类型的索引</p><p>Btree innodb默认的数据结构</p><h1 id="八、权限管理和备份"><a href="#八、权限管理和备份" class="headerlink" title="八、权限管理和备份"></a>八、权限管理和备份</h1><h2 id="8-1、用户管理"><a href="#8-1、用户管理" class="headerlink" title="8.1、用户管理"></a>8.1、用户管理</h2><p>博客：<a href="https://blog.csdn.net/weixin_43790276/article/details/102674936">https://blog.csdn.net/weixin_43790276/article/details/102674936</a></p><h2 id="8-2、mysql数据库备份"><a href="#8-2、mysql数据库备份" class="headerlink" title="8.2、mysql数据库备份"></a>8.2、mysql数据库备份</h2><p>为什么要备份</p><ul><li>保证重要的数据不丢失</li><li>数据转移</li></ul><p>Mysql数据库备份的方式</p><ul><li>直接拷贝物理文件</li><li>可视化工具中手动导出</li><li>使用命令行导出 mysqldump 命令行导出</li></ul><blockquote><p>使用sql命令 导出/导入mysql数据库  mysqldump 命令使用</p></blockquote><p><img src="mysql_Sql_Learn.assets/image-20210601214121018.png" alt="image-20210601214121018"></p><ul><li>要备份数据库，防止数据丢失</li></ul><h1 id="九、规范数据库设计"><a href="#九、规范数据库设计" class="headerlink" title="九、规范数据库设计"></a>九、规范数据库设计</h1><h2 id="9-1、为什么需要设计"><a href="#9-1、为什么需要设计" class="headerlink" title="9.1、为什么需要设计"></a>9.1、为什么需要设计</h2><p>==当数据库比较复杂的时候，我们就需要设计了==</p><p><strong>糟糕的数据库设计：</strong></p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦，异常(屏蔽物理外键)</li><li>程序性能差</li></ul><p><strong>良好的数据库设计：</strong></p><ul><li>节省内存空间</li><li>保证数据的完整性</li><li>方便我们开发系统</li></ul><p><strong>软件开发中，关于数据库的设计</strong></p><ul><li>分析需求：分析业务和需要处理的数据库的需求</li><li>概要设计：设计关系图E-R图</li></ul><p><strong>设计数据库的步骤</strong>：(个人博客)</p><ul><li>收集信息，分析需求<ul><li>用户表(用户登陆注销，用户个人信息，写博客，创建分类)</li><li>分类表(文章分类，谁创建的)</li><li>文章表(文章的信息)</li><li>友链表(友链信息)</li><li>自定义表(系统信息，某个关键字，或者一些主字段)  key:value</li></ul></li><li>标识实体(把需求落地到每个字段)</li></ul><h2 id="9-2、三大范式"><a href="#9-2、三大范式" class="headerlink" title="9.2、三大范式"></a>9.2、三大范式</h2><p><strong>为什么需要数据规范化</strong></p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p>博客：<a href="https://www.cnblogs.com/wsg25/p/9615100.html">https://www.cnblogs.com/wsg25/p/9615100.html</a></p><p><strong>第一范式</strong></p><ul><li>原子性：保证每一列不可再分</li></ul><p><strong>第二范式</strong></p><ul><li>前提：满足第一范式</li><li>且每张表只描述一件事情</li></ul><p><strong>第三范式</strong></p><ul><li><p>前提：满足第一，第二范式</p></li><li><p>数据表中每一列数据都和主键直接相关，而不能间接相关</p></li></ul><p>规范数据库的设计</p><p>==规范性和性能的问题==</p><p>关联查询的表不得超过三张表</p><ul><li>考虑商业化的需求和目标(成本，用户体验) 数据库性能更加重要</li><li>考虑性能同时还要适当地考虑规范性</li><li>故意给某些表增加一些冗余的字段。(从多表查询中变为单表查询)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learnJava</title>
    <link href="/2021/10/29/learnJava/"/>
    <url>/2021/10/29/learnJava/</url>
    
    <content type="html"><![CDATA[<p>Java</p><span id="more"></span><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><h3 id="1-mybatis逆向生成工具"><a href="#1-mybatis逆向生成工具" class="headerlink" title="1.mybatis逆向生成工具"></a>1.mybatis逆向生成工具</h3><p>mybatis通用生成工具</p><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 通用mapper逆向工具 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以借助mybatis逆序生成工具 生成pojo类 mapper文件</p><h3 id="2-使用包下的类来简化查询"><a href="#2-使用包下的类来简化查询" class="headerlink" title="2.使用包下的类来简化查询"></a>2.使用包下的类来简化查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Example userExample = <span class="hljs-keyword">new</span> Example(Users.class);<br>Example.Criteria userCriteria = userExample.createCriteria();<br>userCriteria.andEqualTo(<span class="hljs-string">&quot;username&quot;</span>, username);<br>Users result = usersMapper.selectOneByExample(userExample);<br></code></pre></td></tr></table></figure><h3 id="3-数据脱敏"><a href="#3-数据脱敏" class="headerlink" title="3.数据脱敏"></a>3.数据脱敏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">MD5Utils.getMD5(password);<br></code></pre></td></tr></table></figure><blockquote><p>将密码通过md5加密存入数据库</p><p>登陆时,将用户输入的密码进行MD5加密,与数据库中的值进行比较</p></blockquote><h3 id="4-mybatis分页插件"><a href="#4-mybatis分页插件" class="headerlink" title="4.mybatis分页插件"></a>4.mybatis分页插件</h3><blockquote><p>原生分页</p><p>按价格排序</p><p>第一页按价格升序,之后第二页价格排序的结果和之前那一页商品价格没有完全对应上</p><p>前一页和后一页的商品价格没有对应上</p></blockquote><blockquote><p>controller方法 里的参数 默认值</p><p>分页时,默认开始页从0开始 还是从1开始</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前评价页数&quot;, required = false, defaultValue = &quot;0&quot;)</span><br><span class="hljs-meta">@RequestParam</span> Integer page,<br><span class="hljs-meta">@ApiParam(name = &quot;pageSize&quot;, value = &quot;每页评价个数&quot;, required = false, defaultValue = &quot;10&quot;)</span><br><span class="hljs-meta">@RequestParam</span> Integer pageSize<br></code></pre></td></tr></table></figure><h3 id="5-分页插件的bug"><a href="#5-分页插件的bug" class="headerlink" title="5.分页插件的bug"></a>5.分页插件的bug</h3><blockquote><p>mybatis-pagehelper 分页插件不支持嵌套结果映射</p><p>由于嵌套结果方式会导致结果集被折叠,因此分页查询的结果在折叠后总数会减少,所以无法保证分页结果数量正确</p></blockquote><p>1.解决</p><pre><code>&gt;查询所有id之后,将pageSize个数的 id 传递给后端,由后端查询数据,返回给前端</code></pre><p> 2.解决</p><blockquote><p>mybatis自己内部解决,嵌套</p><p>将一整个sql 进行拆分,拆分为多个sql进行查询</p><p>修改mapper.xml文件中的sql语句</p></blockquote><blockquote><p>在 OrdersMapperCustom.xml 中有第2种解决方案</p></blockquote><h3 id="6-模糊查询"><a href="#6-模糊查询" class="headerlink" title="6.模糊查询"></a>6.模糊查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*mapper.xml文件中要这样写*/</span><br><br><span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;paramsMap.keywords != null&quot;<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">and</span> i.item_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%$&#123;paramsMap.keywords&#125;$%&#x27;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>mapper.xml 多条件查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs XML">order by<br>       <span class="hljs-comment">&lt;!--k: 默认,代表默认排序,根据name </span><br><span class="hljs-comment">       c: 根据销量排序</span><br><span class="hljs-comment">       p: 根据价格排序</span><br><span class="hljs-comment">       --&gt;</span><br><span class="hljs-symbol">&amp;quot;</span> <span class="hljs-symbol">&amp;quot;</span> <br>&lt; 转义&#x27;&#x27; 符号 , 有可能报错/&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>               <br>         <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;paramsMap.sort == <span class="hljs-symbol">&amp;quot;</span>c<span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>             i.sell_counts desc<br>         <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;paramsMap.sort == <span class="hljs-symbol">&amp;quot;</span>p<span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>               tempSpec.priceDiscount asc<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>              i.item_name asc<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">     &lt;choose&gt;</span><br><span class="hljs-comment">               </span><br><span class="hljs-comment">         &lt;when test=&quot;paramsMap.sort == &#x27;c&#x27;&quot;&gt;</span><br><span class="hljs-comment">             i.sell_counts desc</span><br><span class="hljs-comment">         &lt;/when&gt;</span><br><span class="hljs-comment">            &lt;when test=&quot;paramsMap.sort == &#x27;p&#x27;&quot;&gt;</span><br><span class="hljs-comment">               tempSpec.priceDiscount asc</span><br><span class="hljs-comment">          &lt;/when&gt;</span><br><span class="hljs-comment">          &lt;otherwise&gt;</span><br><span class="hljs-comment">              i.item_name asc</span><br><span class="hljs-comment">          &lt;/otherwise&gt;</span><br><span class="hljs-comment">    &lt;/choose&gt; --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-xml文件-“-号的转义"><a href="#7-xml文件-“-号的转义" class="headerlink" title="7. xml文件 “ 号的转义"></a>7. xml文件 “ 号的转义</h3><blockquote><p>xml文件中 “” 转义</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;paramsMap.sort == <span class="hljs-symbol">&amp;quot;</span>c<span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>    i.sell_counts desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这样写会报错</p><p>java.lang.NumberFormatException: For input string: “k”</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;paramsMap.sort == &#x27;c&#x27; &quot;</span>&gt;</span><br>    i.sell_counts desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>模糊查询时的书写 用$符号取值 而不是 # 号</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;paramsMap.keywords != null and paramsMap.keywords != &#x27;&#x27; &quot;</span>&gt;</span><br>   and i.item_name like &#x27;%$&#123;paramsMap.keywords&#125;%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>mybatis-pagehelper</p></blockquote><ol><li><p>引入分页插件依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--mybatis-pagehelper 实现分页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置application.yml配置文件</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">pagehelper:</span><br><span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>用分页插件，在查询前使用分页插件，原理：统一拦截sql，为其提供分页功能</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* page: 第几页</span><br><span class="hljs-comment">* pageSize: 每页显示条数</span><br><span class="hljs-comment">*/</span><br>PageHelper.startPage(page, pageSize);<br></code></pre></td></tr></table></figure></li><li><p>页数据封装到 PagedGridResult.java 传给前端</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">PageInfo&lt;?&gt; pageList = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(list);<br>PagedGridResult grid = <span class="hljs-keyword">new</span> PagedGridResult();<br>grid.setPage(page);<br>grid.setRows(list);<br>grid.setTotal(pageList.getPages());<br>grid.setRecords(pageList.getTotal());<br></code></pre></td></tr></table></figure></li></ol><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p><img src="/img/learnJava.assets/image-20211029230023380.png" alt="image-20211029230023380"></p><p>前端端口 8080 到 后端端口8088 不一致 , 会产生跨域问题 ,</p><p>写一个配置类 注册到spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tho.config;<br><br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.CorsFilter;<br><br><span class="hljs-comment">// 配置跨域问题</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfig</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CorsConfig</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/10/29 23:28</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> CorsFilter</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 配置跨域</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsFilter <span class="hljs-title">corsFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 1.添加cors配置信息</span><br>        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration();<br><br>        config.addAllowedOrigin(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br><br>        <span class="hljs-comment">// 设置是否发送 cookie信息</span><br>        config.setAllowCredentials(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 设置允许请求的方式</span><br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">// 设置允许的header</span><br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">// 2.为url添加映射路径</span><br>        UrlBasedCorsConfigurationSource corsSource = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource();<br>        corsSource.registerCorsConfiguration (<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br>        <span class="hljs-comment">// 3.返回重新定义好的corsSource</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsFilter(corsSource);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="cookie-amp-session"><a href="#cookie-amp-session" class="headerlink" title="cookie&amp;session"></a>cookie&amp;session</h2><blockquote><p>cookie </p><ul><li><p>以键值对的形式存储信息在浏览器</p></li><li><p>cookie不能跨域,当前及其父级域名可以取值</p></li><li><p>cookie可以设置有效期</p></li><li><p>cookie可以设置path</p></li></ul></blockquote><blockquote><p>session</p><ul><li>基于服务器内存的缓存(非持久化),可保持请求会话</li><li>每个session通过sessionid来区分不同请求</li><li>session可以设置过期时间</li><li>session也是以键值对存在的</li></ul></blockquote><h2 id="springboot配置日志"><a href="#springboot配置日志" class="headerlink" title="springboot配置日志"></a>springboot配置日志</h2><p>依赖</p><ul><li>springboot-starter 和 springboot-web都要屏蔽自带的日志框架</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用自定义日志框架 屏蔽自带的日志框架--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用自定义日志框架 屏蔽自带的日志框架--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 打包war [2] 移除自带内置tomcat --&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;exclusions&gt;</span><br><span class="hljs-comment">                &lt;exclusion&gt;</span><br><span class="hljs-comment">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="hljs-comment">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">                &lt;/exclusion&gt;</span><br><span class="hljs-comment">            &lt;/exclusions&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>为slf4j添加配置文件</li></ul><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,stdout,file</span><br><span class="hljs-meta">log4j.additivity.org.apache</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.stdout</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.stdout.threshold</span>=<span class="hljs-string">INFO</span><br><span class="hljs-meta">log4j.appender.stdout.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="hljs-string">%-5p %c&#123;1&#125;:%L - %m%n</span><br><span class="hljs-meta">log4j.appender.file</span>=<span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.DatePattern</span>=<span class="hljs-string">&#x27;.&#x27;yyyy-MM-dd-HH-mm</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">INFO</span><br><span class="hljs-meta">log4j.appender.file.append</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">/workspaces/logs/foodie-api/mylog.log</span><br></code></pre></td></tr></table></figure><h2 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h2><blockquote><p>定义分页中每页显示数据的大小</p><p>其它Controller继承BaseController即可</p></blockquote><h2 id="涉及到金额"><a href="#涉及到金额" class="headerlink" title="涉及到金额"></a>涉及到金额</h2><blockquote><p>使用分为单位 9.98元   998分</p><p>int类型</p></blockquote><h2 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">`` 和 <span class="hljs-string">&#x27;&#x27;</span> 使用<br><span class="hljs-type">varchar</span>类型变量的使用<br></code></pre></td></tr></table></figure><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><h2 id="购物车功能"><a href="#购物车功能" class="headerlink" title="购物车功能"></a>购物车功能</h2><ol><li>购物车存储形式 - Cookie<ul><li>无需登录,无需查库,保存在浏览器端</li><li>优点：性能好,访问快,没有和数据库交互</li><li>缺点1：换电脑购物车数据会丢失</li><li>缺点2：电脑被其他人登录,不安全</li></ul></li><li>购物车存储形式-Session<ul><li>用户登录后,购物车数据放入用户会话</li><li>优点：初期性能较好,访问快</li><li>缺点1：session基于内存,用户量庞大影响服务器性能</li><li>缺点2：只能存在当前会话,不适用集群与分布式系统</li></ul></li><li>购物车存储形式-数据库<ul><li>用户登录后,购物车数据存入数据库</li><li>优点：数据持久化，可在任何地点任何时间访问</li><li>缺点：频繁读写数据库,造成数据库压力</li></ul></li><li>购物车存储形式 - Redis<ul><li>用户登录后，购物车数据存入redis缓存</li><li>优点1：数据持久化，可在任何地点任何时间访问</li><li>优点2：频繁读写基于缓存,不会造成数据库压力</li><li>优点3：适合使用集群和分布式系统,可扩展性强 </li></ul></li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>校验手机号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkMobileIsOk</span><span class="hljs-params">(String mobile)</span> </span>&#123;<br>        String regex = <span class="hljs-string">&quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(17[013678])|(18[0,5-9]))\\d&#123;8&#125;$&quot;</span>;<br>        Pattern p = Pattern.compile(regex);<br>        Matcher m = p.matcher(mobile);<br>        <span class="hljs-keyword">boolean</span> isMatch = m.matches();<br>        <span class="hljs-keyword">return</span> isMatch;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用微信支付中心回调接口"><a href="#调用微信支付中心回调接口" class="headerlink" title="调用微信支付中心回调接口"></a>调用微信支付中心回调接口</h2><blockquote><p>同步通知 , 异步通知</p></blockquote><blockquote><p>生成订单 -&gt; 请求支付中心,此时支付页面会轮询订单状态,如果支付成功,支付中心会回调本地接口,将订单状态修改,支付页面会根据订单状态进行跳转,跳转到支付成功页面</p><p>想要让远程支付中心回调本地接口,需要进行内网穿透,使得本地接口可以被远程支付中心调用,或者将项目部署到云服务器</p><p>(可以之间修改数据库订单状态来模拟完成订单支付)</p><p>微信支付方式前端页面可以根据支付中心返回支付金额来得到具体的支付金额</p><p>支付宝支付 无法之间根据支付中心返回的支付金额来显示,只能显示购物车显示的支付金额</p><p>(修改了支付成功页面,不管哪一种支付方式,最后的支付结果都是0.01元)</p></blockquote><h2 id="ComponentScan注解"><a href="#ComponentScan注解" class="headerlink" title="@ComponentScan注解"></a>@ComponentScan注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">(basePackages = &#123;<span class="hljs-string">&quot;com.tho&quot;</span>, <span class="hljs-string">&quot;org.n3r.idworker&quot;</span>&#125;)<br><br><br><span class="hljs-keyword">import</span> org.n3r.idworker.Sid; 导入的Sid<br>使用 <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Sid sid; <br>是无法使用sid中的方法的,需要加上最上面的注解到 启动类 (Application.class) 才能使用<br></code></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><blockquote><ul><li><p>使用定时任务关闭超期未支付订单,会存在的弊端:</p></li><li><p>1.会有时间差,程序不严谨</p></li><li><p>  10.39 下单 11.00 检查 不足 1小时 , 12:00 检查,超过1小时多余 21 分钟</p></li><li><p>2.不支持集群</p></li><li><p>  单机没有问题,使用集群后,就会有多个定时任务</p></li><li><p>  解决方案:只使用一台计算机节点,单独用来运行所有定时任务</p></li><li><p>3.会对数据库全表搜索,影响数据库性能 : select * from order_status</p></li><li><p>定时任务,仅仅只适用于小型轻量级项目,传统项目</p></li><li><p>消息队列 MQ 来 解决定时任务的需求</p></li><li><p>延时任务(队列)</p></li><li><p>10:12 下单的,未付款订单 , 11:12分检查,如果当前状态还是10, 则直接关闭订单即可</p></li></ul></blockquote><h2 id="Sql语句"><a href="#Sql语句" class="headerlink" title="Sql语句"></a>Sql语句</h2><p>查询名字重复的数据</p><p>删除名字重复的数据</p><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><h3 id="Hibernate-Validator校验参数"><a href="#Hibernate-Validator校验参数" class="headerlink" title="Hibernate Validator校验参数"></a>Hibernate Validator校验参数</h3><p><a href="https://www.jianshu.com/p/a1e8a8908ec1">https://www.jianshu.com/p/a1e8a8908ec1</a></p><h4 id="1-实体类上加上相关注解-标识参数校验的规则"><a href="#1-实体类上加上相关注解-标识参数校验的规则" class="headerlink" title="1.实体类上加上相关注解,标识参数校验的规则"></a>1.实体类上加上相关注解,标识参数校验的规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.tho.pojo.bo.center;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.hibernate.validator.constraints.Length;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(value=&quot;用户对象&quot;, description=&quot;从客户端，由用户传入的数据封装在此entity中&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CenterUserBO</span> </span>&#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;用户名&quot;, name=&quot;username&quot;, example=&quot;json&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;密码&quot;, name=&quot;password&quot;, example=&quot;123456&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;确认密码&quot;, name=&quot;confirmPassword&quot;, example=&quot;123456&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String confirmPassword;<br><br><br>    <span class="hljs-meta">@NotBlank(message = &quot;用户昵称不能为空&quot;)</span><br>    <span class="hljs-meta">@Length(max = 12, message = &quot;用户昵称不能超过12位&quot;)</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;用户昵称&quot;, name=&quot;nickname&quot;, example=&quot;杰森&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String nickname;<br><br>    <span class="hljs-meta">@Length(max = 12, message = &quot;用户真实姓名不能超过12位&quot;)</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;真实姓名&quot;, name=&quot;realname&quot;, example=&quot;杰森&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String realname;<br><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\\d&#123;8&#125;)$&quot;, message = &quot;手机号格式不正确&quot;)</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;手机号&quot;, name=&quot;mobile&quot;, example=&quot;13999999999&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String mobile;<br><br>    <span class="hljs-meta">@Email</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;邮箱地址&quot;, name=&quot;email&quot;, example=&quot;imooc@imooc.com&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@Min(value = 0, message = &quot;性别选择不正确&quot;)</span><br>    <span class="hljs-meta">@Max(value = 2, message = &quot;性别选择不正确&quot;)</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;性别&quot;, name=&quot;sex&quot;, example=&quot;0:女 1:男 2:保密&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> Integer sex;<br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;生日&quot;, name=&quot;birthday&quot;, example=&quot;1900-01-01&quot;, required = false)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Controller中加入相关注解"><a href="#2-Controller中加入相关注解" class="headerlink" title="2.Controller中加入相关注解"></a>2.Controller中加入相关注解</h4><blockquote><p>@Valid 加到 @RequestBody 注解的实体类</p><p>加上 BindingResult result 参数</p><p>getErrors 方法获取 错误信息</p><p>判断BindingResult是否保存错误的校验信息,如果有,直接return<br>       if (result.hasErrors()) {<br>           Map&lt;String, String&gt; errors = getErrors(result);<br>           return CommonJsonResult.errorMap(errors);<br>       }</p><p>前端做好错误信息提示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@ApiOperation(value = &quot;获取用户信息&quot;, notes = &quot;获取用户信息&quot;, httpMethod = &quot;Post &quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonJsonResult <span class="hljs-title">update</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;userId&quot;, value = &quot;用户id&quot;, required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam</span> String userId,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestBody</span>  <span class="hljs-meta">@Valid</span> CenterUserBO centerUserBO,</span></span><br><span class="hljs-params"><span class="hljs-function">            BindingResult result,</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 判断BindingResult是否保存错误的校验信息,如果有,直接return</span><br>        <span class="hljs-keyword">if</span> (result.hasErrors()) &#123;<br>            Map&lt;String, String&gt; errors = getErrors(result);<br>            <span class="hljs-keyword">return</span> CommonJsonResult.errorMap(errors);<br>        &#125;<br><br><br><br>        Users userResult = centerUserService.updateUserInfo(userId, centerUserBO);<br>        Users users1 = setNullPropertyValue(userResult);<br>        <span class="hljs-comment">// 设置cookie</span><br>        CookieUtils.setCookie(request, response, <span class="hljs-string">&quot;user&quot;</span>,<br>                JsonUtils.objectToJson(users1), <span class="hljs-keyword">true</span>);<br><br><br>        <span class="hljs-comment">// todo 后续要改,要增加令牌token,会整合进redis,分布式会话</span><br>        <span class="hljs-keyword">return</span> CommonJsonResult.ok();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> tho</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> 2021/11/6 15:54</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> result</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Return</span> Map&lt;String,String&gt;</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 获取hibernate.validator 校验的错误</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Map&lt;String, String&gt; <span class="hljs-title">getErrors</span><span class="hljs-params">(BindingResult result)</span> </span>&#123;<br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        List&lt;FieldError&gt; errorList = result.getFieldErrors();<br>        <span class="hljs-keyword">for</span> (FieldError error : errorList) &#123;<br>            String errorField = error.getField();<br>            String errorMsg = error.getDefaultMessage();<br>            map.put(errorField, errorMsg);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="商家发货需要通过浏览器发起请求"><a href="#商家发货需要通过浏览器发起请求" class="headerlink" title="商家发货需要通过浏览器发起请求"></a>商家发货需要通过浏览器发起请求</h2><blockquote><p>添加一个按钮,进行商家发货</p></blockquote><h2 id="Http-Https-不同域之间访问"><a href="#Http-Https-不同域之间访问" class="headerlink" title="Http Https 不同域之间访问"></a>Http Https 不同域之间访问</h2><blockquote><p>安全-&gt;不安全 不安全-&gt;安全</p></blockquote><h2 id="多环境部署"><a href="#多环境部署" class="headerlink" title="多环境部署"></a>多环境部署</h2><blockquote><p>开发环境 dev</p><p>测试环境 test</p><p>生产环境 prod</p></blockquote><blockquote><p>profile 提供多环境支持</p><p>application.yml 配置文件</p><p>application-{name}.yml 环境配置(挂件)</p><p>激活多环境 spring.profiles.active:{name}</p><p>三个配置文件:</p><p>application.yml</p><p>application-dev.yml</p><p>application-prod.xml</p></blockquote><ul><li>通过application.yml里的配置来决定要选择的环境</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  profiles:<br>    active: prod # springboot 多环境配置<br></code></pre></td></tr></table></figure><h2 id="使用RedisTemplate"><a href="#使用RedisTemplate" class="headerlink" title="使用RedisTemplate"></a>使用RedisTemplate</h2><blockquote><p>直接使用RedisTemplate 设置的key会出现一些前缀</p><p>使用封装了RedisTemplate的工具类不会出现前缀</p></blockquote><h2 id="mysql远程连接"><a href="#mysql远程连接" class="headerlink" title="mysql远程连接"></a>mysql远程连接</h2><blockquote><p>配置了mysql.user表中的 user-host字段也无法远程连接</p><p>root - 192.168.198.100</p><p>root - localhost</p><p>host字段为  localhost 优先级高于其它的设置,只能由localhost才能进行连接</p></blockquote><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   排除spring-boot-starter-logging --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过以上方式想要排除 spring-boot-starter-logging 依赖 ,但是通过maven查看继承树,该依赖仍然存在,同时引入log4j2的包会报异常,log4j2和 spring-boot-starter-logging 里的依赖有冲突</p><blockquote><p>解决办法</p><p>将 spring-boot-starter-logging 里的内容清空,让 spring-boot-starter-logging  成为一个空壳依赖即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    排除 spring-boot-starter-logging --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h2><blockquote><p>该注解什么时候提交事务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用了该注解, 该方法有 synchronized 关键字,前一个线程进入该方法,执行完数据库操作,因为事务的存在,数据库不会进行更新,第一个线程释放此方法的锁,第二个线程进入方法,也执行了数据库操作,数据库操作都保存到了事务里,之后事务进行了提交,商品库存变为负数,之后其它线程校验库存时因为库存已经是负数,都会抛出异常,事务回滚,数据库不会发生变动</span><br><br><span class="hljs-comment">// 解决办法：给事务也加上锁,只有当事务提交之后,锁才会释放</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Integer <span class="hljs-title">createOrder</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Product product = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// lock.lock();</span><br>        <span class="hljs-comment">// try &#123;</span><br>            <span class="hljs-comment">// TransactionStatus transaction1 = platformTransactionManager.getTransaction(transactionDefinition);</span><br>            product = productMapper.selectByPrimaryKey(purchaseProductId);<br>            <span class="hljs-keyword">if</span> (product==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// platformTransactionManager.rollback(transaction1);</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;购买商品：&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;不存在&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//商品当前库存</span><br>            Integer currentCount = product.getCount();<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;库存数：&quot;</span>+currentCount);<br>            <span class="hljs-comment">//校验库存</span><br>            <span class="hljs-keyword">if</span> (purchaseProductNum &gt; currentCount)&#123;<br>                <span class="hljs-comment">// platformTransactionManager.rollback(transaction1);</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;商品&quot;</span>+purchaseProductId+<span class="hljs-string">&quot;仅剩&quot;</span>+currentCount+<span class="hljs-string">&quot;件，无法购买&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 使用数据库的update行锁解决超卖问题</span><br>            productMapper.updateProductCount(purchaseProductNum,<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-keyword">new</span> Date(),product.getId());<br>            <span class="hljs-comment">// platformTransactionManager.commit(transaction1);</span><br>        <span class="hljs-comment">// &#125;finally &#123;</span><br>            <span class="hljs-comment">// lock.unlock();</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">// TransactionStatus transaction = platformTransactionManager.getTransaction(transactionDefinition);</span><br>        Order order = <span class="hljs-keyword">new</span> Order();<br>        order.setOrderAmount(product.getPrice().multiply(<span class="hljs-keyword">new</span> BigDecimal(purchaseProductNum)));<br>        order.setOrderStatus(<span class="hljs-number">1</span>);<span class="hljs-comment">//待处理</span><br>        order.setReceiverName(<span class="hljs-string">&quot;xxx&quot;</span>);<br>        order.setReceiverMobile(<span class="hljs-string">&quot;13311112222&quot;</span>);<br>        order.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>        order.setCreateUser(<span class="hljs-string">&quot;xxx&quot;</span>);<br>        order.setUpdateTime(<span class="hljs-keyword">new</span> Date());<br>        order.setUpdateUser(<span class="hljs-string">&quot;xxx&quot;</span>);<br>        orderMapper.insertSelective(order);<br><br>        OrderItem orderItem = <span class="hljs-keyword">new</span> OrderItem();<br>        orderItem.setOrderId(order.getId());<br>        orderItem.setProductId(product.getId());<br>        orderItem.setPurchasePrice(product.getPrice());<br>        orderItem.setPurchaseNum(purchaseProductNum);<br>        orderItem.setCreateUser(<span class="hljs-string">&quot;xxx&quot;</span>);<br>        orderItem.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>        orderItem.setUpdateTime(<span class="hljs-keyword">new</span> Date());<br>        orderItem.setUpdateUser(<span class="hljs-string">&quot;xxx&quot;</span>);<br>        orderItemMapper.insertSelective(orderItem);<br>        <span class="hljs-comment">// platformTransactionManager.commit(transaction);</span><br>        <span class="hljs-keyword">return</span> order.getId();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// Spring 默认的回滚,不加rollbackFor 属性,会在抛出运行时异常时回滚,只有制定了异常类型,才会在主动抛出不是运行时异常时进行回滚</span><br>   <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">singleLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        log.info(<span class="hljs-string">&quot;我进入了方法！&quot;</span>);<br>        DistributeLock distributeLock = distributeLockMapper.selectDistributeLock(<span class="hljs-string">&quot;demo&quot;</span>);<br>        <span class="hljs-keyword">if</span> (distributeLock==<span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;分布式锁找不到&quot;</span>);<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;我进入了锁！&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">20000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我已经执行完成！&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令手册</title>
    <link href="/2021/10/29/Linux%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/29/Linux%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Linux基本命令</p><span id="more"></span><h2 id="1、Linux初级指令"><a href="#1、Linux初级指令" class="headerlink" title="1、Linux初级指令"></a>1、Linux初级指令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>ls - List 默认列出当前目录,可以列出其他目录或者路径下的文件信息,目录信息</p><p>ls 还可以列出指定目录下的文件列表</p></blockquote><p>ls命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a  列出指定目录下的所有文件，包括隐藏文件<br><br>-c 使用最后一次更改文件状态以进行排序(-t)或长时间打印(-l)的时间<br><br>-h 与-l选项一起使用时，请使用单位后缀:Byte、Kilobyte、mete、gb、tb和Petabyte，以便使用以2为基数的大小将数字减少到3或更少<br><br>-l 长格式列表。(见下文)。如果输出到终端，则所有文件大小的总和将输出到长清单前面的一行中<br><br>-n 以数字形式显示用户和组id，而不是在长(-l)输出中转换为用户或组名。这个选项默认打开-l选项<br><br>-o 以长格式列出，但省略组id<br><br>-s 显示每个文件实际使用的文件系统块的数量，以512字节为单位，其中部分单元四舍五入为下一个整数值<br><br>-t 在按照字典顺序对操作数排序之前，先按修改的时间排序(最近修改的是first)<br><br>-u 使用最后一次访问的时间，而不是最后一次修改文件进行排序<br></code></pre></td></tr></table></figure><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><blockquote><p>pwd - Print Working Directory</p><p>打印当前工作目录的完整路径名</p></blockquote><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><blockquote><p>touch - change file timestamps</p><p>将每个文件的访问和修改时间更新为当前时间,除非提供-c 或 -h, 否则将根据File参数创建文件</p></blockquote><p>touch命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a  或--time=atime或--time=access或--time=use 只更改存取时间。<br><br>-c  或--no-create 不建立任何文档。<br><br>-d 使用指定的日期时间，而非现在的时间。<br><br>-f 此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题。<br><br>-m  或--time=mtime或--time=modify 只更改变动时间。<br><br>-r 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。<br><br>-t 使用指定的日期时间，而非现在的时间。<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> touch 使用示例</span><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> touch test1 test2 test3</span><br><span class="hljs-meta">#</span><span class="bash"> 创建了 test1 test2 test3 三个文件</span><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> touch -c test5</span><br><span class="hljs-meta">#</span><span class="bash"> 没有创建test5文件</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">stat</span> <span class="hljs-built_in">test</span>* 查看所有以<span class="hljs-built_in">test</span>为前缀的文件的详细信息</span><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">stat</span> <span class="hljs-built_in">test</span>*</span><br>  File: test1<br>  Size: 0               Blocks: 0          IO Block: 65536  regular empty file<br>Device: 66075b9fh/1711758239d   Inode: 3659174697289084  Links: 1<br>Access: (0644/-rw-r--r--)  Uid: (197609/     zly)   Gid: (197121/ UNKNOWN)<br>Access: 2021-10-29 12:38:30.824178500 +0800<br>Modify: 2021-10-29 12:38:30.824178500 +0800<br>Change: 2021-10-29 12:38:30.821779700 +0800<br> Birth: 2021-10-29 12:38:30.821779700 +0800<br>  File: test2<br>  Size: 0               Blocks: 0          IO Block: 65536  regular empty file<br>Device: 66075b9fh/1711758239d   Inode: 281474976761213  Links: 1<br>Access: (0644/-rw-r--r--)  Uid: (197609/     zly)   Gid: (197121/ UNKNOWN)<br>Access: 2021-10-29 12:38:30.825094100 +0800<br>Modify: 2021-10-29 12:38:30.825094100 +0800<br>Change: 2021-10-29 12:38:30.821779700 +0800<br> Birth: 2021-10-29 12:38:30.821779700 +0800<br>  File: test3<br>  Size: 0               Blocks: 0          IO Block: 65536  regular empty file<br>Device: 66075b9fh/1711758239d   Inode: 281474976761214  Links: 1<br>Access: (0644/-rw-r--r--)  Uid: (197609/     zly)   Gid: (197121/ UNKNOWN)<br>Access: 2021-10-29 12:38:30.825911400 +0800<br>Modify: 2021-10-29 12:38:30.825911400 +0800<br>Change: 2021-10-29 12:38:30.821779700 +0800<br> Birth: 2021-10-29 12:38:30.821779700 +0800<br></code></pre></td></tr></table></figure><h3 id="cat-amp-tac"><a href="#cat-amp-tac" class="headerlink" title="cat&amp;tac"></a>cat&amp;tac</h3><blockquote><p>cat 将File 或 标准输入连接到标准输出</p></blockquote><p>cat参数格式</p><p>cat [Option] [File]</p><p>cat命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">-A, --show-all      等价于 -vET<br><br>-b, --number-nonblank  对非空输出行编号<br><br>-e            等价于 -vE<br><br>-E, --show-ends     在每行结束处显示<br><br>-n, --number   对输出的所有行编号,由1开始对所有输出的行数编号<br><br>-s, --squeeze-blank 有连续两行以上的空白行，就代换为一行的空白行<br><br>-t            与 -vT 等价<br><br>-T, --show-tabs     将跳格字符显示为 ^I<br><br>-u            (被忽略)<br><br>-v, --show-nonprinting  使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外<br></code></pre></td></tr></table></figure><p>cat命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> cat test1</span><br>111<br>222<br>333<br>xxx<br>yyy<br>zzz<br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> cat -n test1</span><br>     1  111<br>     2  222<br>     3  333<br>     4  xxx<br>     5  yyy<br>     6  zzz<br>     <br></code></pre></td></tr></table></figure><blockquote><p>tac 命令与cat命令展示的内容相反,不能带行号输出</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> tac test1</span><br>zzzyyy<br>xxx<br>333<br>222<br>111<br><br></code></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote><p>mkdir - Make Directory</p><p>如果目录不存在,创建目录</p></blockquote><p>mkdir命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">-m, --mode=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask<br><br>-p, --parents 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录;<br><br>-v, --verbose 每次创建新目录都显示信息<br><br>--help  显示此帮助信息并退出<br><br>--version 输出版本信息并退出<br></code></pre></td></tr></table></figure><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><blockquote><p>Cd - Change Directory</p><p>切换当前目录至 指定目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">cd /<br></code></pre></td></tr></table></figure><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>rm&amp;rmdir - Remove Directory</p><p>删除指定目录,文件权限不允许写入,会提示用户进行确实是否删除指定canshu</p></blockquote><p>rm命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-f, --force  忽略不存在的文件，从不给出提示。<br><br>-i, --interactive 进行交互式删除<br><br>-r, -R, --recursive  指示rm将参数中列出的全部目录和子目录均递归地删除。<br><br>-d, --dir 删除空目录<br></code></pre></td></tr></table></figure><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote><p>mv - Move</p><p>移动目录或者文件到指定目录下,同时具有重命名功能</p></blockquote><p>mv名称参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b ：若需覆盖文件，则覆盖前先行备份。<br><br>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；<br><br>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖<br><br>-n：不要覆盖现有文件。（-n选项将覆盖以前的任何-f或-i选项。）<br><br>-u ：若目标文件已经存在，且 source 比较新，才会更新(update)<br></code></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>cp - Copy</p><p>将source_file 内容拷贝到 target_file,尝试将文件复制到自身,则复制失败</p></blockquote><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><blockquote><p>echo </p><p>echo实用程序将任何指定的操作数写入标准输出，这些操作数由单个空格（<code>）字符分隔，后跟换行符（</code>\ n’）字符。</p></blockquote><p>echo 命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">PWD 是取当前路径，然后<span class="hljs-built_in">echo</span>到标准输出，一般<span class="hljs-built_in">echo</span> \<span class="hljs-variable">$name</span> 用来查看某个环境变量的值zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span></span><br>hello world<br><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$pwd</span></span><br><br><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PWD</span></span><br>/d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash">PWD 是取当前路径，然后<span class="hljs-built_in">echo</span>到标准输出，一般<span class="hljs-built_in">echo</span> \<span class="hljs-variable">$name</span> 用来查看某个环境变量的值</span><br></code></pre></td></tr></table></figure><h3 id="head-amp-tail"><a href="#head-amp-tail" class="headerlink" title="head &amp; tail"></a>head &amp; tail</h3><blockquote><p>head </p><p>此过滤器显示每个指定文件或标准输入（如果未指定文件）的前几行或字节。</p><p>If more than a single file is specified, each file is preceded by a header consisting of the string <code>==&gt; XXX &lt;==&#39;&#39; where</code>XXX’’ is the name of the file.</p><p>如果省略count，则默认为10.如果指定了多个文件，则每个文件的头均由字符串<code>==&gt; XXX &lt;==&#39;&#39;组成，其中</code>XXX’’为文件名 文件。</p></blockquote><p>head常用参数示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-n 展示前n行<br><br>-c 展示前n个字符<br></code></pre></td></tr></table></figure><p>head 命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs she">zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br>$ head test<br>111<br>222<br>333<br>xxx<br>yyy<br>zzz<br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br>$ head -n3 test<br>111<br>222<br>333<br><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br>$ head -c5 test<br>111<br><br></code></pre></td></tr></table></figure><blockquote><p>tail 命令与head命令相反,由文件末尾开始展示文件内容</p></blockquote><ul><li>tail 与 head 常用来查看日志,日志文件太大,没办法用vim 或者 cat 去看</li><li>要么用 head tail 要么用 more &amp; less</li></ul><h3 id="more-amp-less"><a href="#more-amp-less" class="headerlink" title="more &amp; less"></a>more &amp; less</h3><blockquote><p>more</p><p>more每次打开文件不是全部把文件读入内存而是流式读取，不会因为vi|vim某个大文件而造成系统oom。</p></blockquote><ul><li>more&amp;less最重要的一点就是流式读取，支持翻页，像cat命令是全部读取输出到标准输出，如果文件太大会把屏幕刷满的，根本没办法看。</li></ul><p>more 命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">+n   从笫n行开始显示<br><br>-n    定义屏幕大小为n行<br><br>+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示<br><br>-c    从顶部清屏，然后显示<br><br>-d    提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能<br><br>-l    忽略Ctrl+l（换页）字符<br><br>-p    通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似<br><br>-s    把连续的多个空行显示为一行<br><br>-u    把文件内容中的下画线去掉<br></code></pre></td></tr></table></figure><ul><li><strong>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件</strong></li></ul><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><blockquote><p>wc</p><p>输出文件中包含的行数，字数和字节数。</p></blockquote><p>wc常用命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">-c 统计字节数。<br><br>-l 统计行数。<br><br>-m 统计字符数。这个标志不能与 -c 标志一起使用。<br><br>-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。<br><br>-L 打印最长行的长度。<br></code></pre></td></tr></table></figure><h3 id="date-amp-cal"><a href="#date-amp-cal" class="headerlink" title="date &amp; cal"></a>date &amp; cal</h3><blockquote><p>date cal 显示当前时间</p></blockquote><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><blockquote><p>which - </p><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p></blockquote><p>which命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">which</span> hexo</span><br>/c/Users/zly/AppData/Roaming/npm/hexo<br><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">which</span> java</span><br>/c/Program Files (x86)/Common Files/Oracle/Java/javapath/java<br><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">which</span> ls</span><br>/usr/bin/ls<br><br></code></pre></td></tr></table></figure><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><blockquote><p>whereis</p><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p></blockquote><p>whereis命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b  定位可执行文件。<br><br>-m  定位帮助文件。<br><br>-s  定位源代码文件。<br><br>-u  搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。<br><br>-B  指定搜索可执行文件的路径。<br><br>-M  指定搜索帮助文件的路径。<br><br>-S  指定搜索源代码文件的路径。<br></code></pre></td></tr></table></figure><p>where &amp; whereis 命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">where</span> java</span><br>C:\Program Files (x86)\Common Files\Oracle\Java\javapath\java.exe<br>E:\jdk_1.8\bin\java.exe<br>E:\jdk_1.8\jre\bin\java.exe<br><br>zly@LAPTOP-U1UMJM7B MINGW64 /d/LinuxLearn<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">where</span> hexo</span><br>C:\Users\zly\AppData\Roaming\npm\hexo<br>C:\Users\zly\AppData\Roaming\npm\hexo.cmd<br><br></code></pre></td></tr></table></figure><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><blockquote><p>nl</p><p>nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号！其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</p></blockquote><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><blockquote><p>ps</p><p>ps实用程序显示标题行，其后是包含有关具有控制终端的所有进程的信息的行。</p></blockquote><p>ps命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">a 显示所有进程<br><br>-a 显示同一终端下的所有程序<br><br>-A 显示所有进程<br><br>c 显示进程的真实名称<br><br>-N 反向选择<br><br>-e 等于“-A”<br><br>e 显示环境变量<br><br>f 显示程序间的关系<br><br>-H 显示树状结构<br><br>r 显示当前终端的进程<br><br>T 显示当前终端的所有程序<br><br>u 指定用户的所有进程<br><br>-au 显示较详细的资讯<br><br>-aux 显示所有包含其他使用者的行程<br><br>-C&lt;命令&gt; 列出指定命令的状况<br><br>--lines&lt;行数&gt; 每页显示的行数<br><br>--width&lt;字符数&gt; 每页显示的字符数<br></code></pre></td></tr></table></figure><p>ps命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看所有进程</span><br><span class="hljs-meta">$</span><span class="bash">ps -a</span><br><span class="hljs-meta">#</span><span class="bash">查看进程的环境变量和程序间的关系</span><br><span class="hljs-meta">$</span><span class="bash">ps -ef</span><br></code></pre></td></tr></table></figure><h3 id="kill-amp-killall"><a href="#kill-amp-killall" class="headerlink" title="kill &amp; killall"></a>kill &amp; killall</h3><blockquote><p>kill</p><p>命令kill将指定的信号发送到指定的进程或进程组。如果未指定信号，则发送TERM信号。TERM信号将杀死不捕获该信号的进程。对于其他过程，可能需要使用KILL（9）信号，因为无法捕获该信号。</p></blockquote><p>kill 命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称<br><br>-a 当处理当前进程时，不限制命令名和进程号的对应关系<br><br>-p 指定kill 命令只打印相关进程的进程号，而不发送任何信号<br><br>-s 指定发送信号<br><br>-u 指定用户<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">kill</span> -l</span><br><span class="hljs-meta">#</span><span class="bash"> 查看所有的 <span class="hljs-built_in">kill</span> 可选项</span><br></code></pre></td></tr></table></figure><h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>HUP   1   终端断线<br>INT   2   中断（同 Ctrl + C）<br>QUIT   3   退出（同 Ctrl + \）<br>TERM  15   终止<br>KILL   9   强制终止<br>CONT  18   继续（与STOP相反， fg/bg命令）<br>STOP   19   暂停（同 Ctrl + Z）</p><ul><li>kill -9 是我们使用的最多的信号，其实这种方式一点也不优雅，应该使用kill -15信号，大部分程序接收到SIGTERM信号后，会先释放自己的资源，然后再停止。但是也有程序可能接收信号后，做一些其他的事情（如果程序正在等待IO，可能就不会立马做出响应，等到io完成后在结束），也就是说，SIGTERM多半是会被阻塞的。</li></ul><h2 id="2、Linux进阶指令"><a href="#2、Linux进阶指令" class="headerlink" title="2、Linux进阶指令"></a>2、Linux进阶指令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>find</p><p>find实用程序对列出的每个路径递归地遍历目录树，根据树中的每个文件计算表达式(由下面列出的“初选”和“操作数”组成)。</p></blockquote><ul><li><strong>这个命令使用频率极高，如果对这个命令了解很透彻，在日常工作中可以事半功倍。这个命令的参数较多，常用的参数会在下面常用参数示例讲清楚</strong></li></ul><p>find命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell">-print：find命令将匹配的文件输出到标准输出。<br><br>-exec：find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#x27;command&#x27; &#123; &#125; \;，注意&#123;  &#125;和\；之间的空格。<br><br>-name  按照文件名查找文件。<br><br>-perm  按照文件权限来查找文件。<br><br>-prune 使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。<br><br>-user  按照文件属主来查找文件。<br><br>-group 按照文件所属的组来查找文件。<br><br>-mtime -n +n 按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。<br><br>-nogroup 查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。<br><br>-nouser  查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。<br><br>-newer file1 ! file2 查找更改时间比文件file1新但比文件file2旧的文件。<br><br>-type 查找某一类型的文件，诸如：<br><br>b - 块设备文件。<br><br>d - 目录。<br><br>c - 字符设备文件。<br><br>p - 管道文件。<br><br>l - 符号链接文件。<br><br>f - 普通文件。<br><br>-size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。-depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。<br><br>-fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。<br><br>-mount：在查找文件时不跨越文件系统mount点。<br><br>-follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。<br><br>-cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。<br><br>另外,下面三个的区别:<br><br>-amin n  查找系统中最后N分钟访问的文件<br><br>-atime n 查找系统中最后n*24小时访问的文件<br><br>-cmin n  查找系统中最后N分钟被改变文件状态的文件<br><br>-ctime n 查找系统中最后n*24小时被改变文件状态的文件<br><br>-mmin n  查找系统中最后N分钟被改变文件数据的文件<br><br>-mtime n 查找系统中最后n*24小时被改变文件数据的文件<br></code></pre></td></tr></table></figure><p>find 命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">find /user -name &quot;*.log&quot; -print<br><span class="hljs-meta">#</span><span class="bash"> -name参数常用参数示例  查找 /users 目录下所有以 .<span class="hljs-built_in">log</span> 结尾的文件</span><br></code></pre></td></tr></table></figure><ul><li>有个日志目录，我系统的所有日志都会打到这个目录，目录的日志文件命名很随意，我没办法说根据名字删除，于是我想到用日期的方式删除，保存一个月的日志即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">find /home/tho/logs// -mtime +30 -name &quot;.log.gz&quot; -exec rm -rf &#123;&#125; \;<br></code></pre></td></tr></table></figure><ul><li><p><strong>exec 参数后面跟的是command，它的终止是以<code>;</code>为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。</strong></p></li><li><p>其实我把这个命令放在我的一个系统crontab文件里面，每天执行一次，这样我的日志目录就不用了手动清理。corntab使用详解在后面的命令中会讲到。</p></li><li><p>-exec 后面可以接任何命令，你可以灵活运用，再结合到前面的-name参数，可以玩出花来。</p></li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><blockquote><p>grep </p><p>grep实用程序搜索任何给定的输入文件，选择与一个或多个模式匹配的行。默认情况下，如果模式中的正则表达式（RE）匹配输入行而没有尾随换行符，则该模式会匹配输入行。空表达式匹配每行。与至少一种模式匹配的每条输入线均写入标准输出</p></blockquote><ul><li>做基础服务，使用服务的人不免会遇到问题，这时候我就去要去看日志了，日志都是G级别的，当然不能用vim打开去搜索，会把系统挂掉，vim是全部文档加载到内存。这时候就需要使用grep命令去根据一些关键信息匹配查找了。（当然有些同学可能会说，既然经常查日志的话，就不能把日志接入到ElasticSearch这种可搜索的组建中，很好，用技术去解决实际问题。我们也是这样做的，但总免不了还是会去服务器上查一下日志，学会这个命令没错的）</li></ul><p>grep命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a  --text  不要忽略二进制的数据。<br><br>-A&lt;显示行数&gt;  --after-context=&lt;显示行数&gt;  #除了显示符合范本样式的那一列之外，并显示该行之后的内容。<br><br>-b  --byte-offset  #在显示符合样式的那一行之前，标示出该行第一个字符的编号。<br><br>-B&lt;显示行数&gt;  --before-context=&lt;显示行数&gt;  #除了显示符合样式的那一行之外，并显示该行之前的内容。<br><br>-c  --count  #计算符合样式的列数。<br><br>-C&lt;显示行数&gt;  --context=&lt;显示行数&gt;或-&lt;显示行数&gt;  #除了显示符合样式的那一行之外，并显示该行之前后的内容。<br><br>-d &lt;动作&gt;   --directories=&lt;动作&gt;  #当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。<br><br>-e&lt;范本样式&gt; --regexp=&lt;范本样式&gt;  #指定字符串做为查找文件内容的样式。<br><br>-E   --extended-regexp  #将样式为延伸的普通表示法来使用。<br><br>-f&lt;规则文件&gt; --file=&lt;规则文件&gt;  #指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。<br><br>-F  --fixed-regexp  #将样式视为固定字符串的列表。<br><br>-G  --basic-regexp  #将样式视为普通的表示法来使用。<br><br>-h  --no-filename  #在显示符合样式的那一行之前，不标示该行所属的文件名称。<br><br>-H  --with-filename  #在显示符合样式的那一行之前，表示该行所属的文件名称。<br><br>-i  --ignore-case  #忽略字符大小写的差别。<br><br>-l  --file-with-matches  #列出文件内容符合指定的样式的文件名称。<br><br>-L  --files-without-match  #列出文件内容不符合指定的样式的文件名称。<br><br>-n  --line-number  #在显示符合样式的那一行之前，标示出该行的列数编号。<br><br>-q  --quiet或--silent  #不显示任何信息。<br><br>-r  --recursive  #此参数的效果和指定“-d recurse”参数相同。<br><br>-s  --no-messages  #不显示错误信息。<br><br>-v  --revert-match  #显示不包含匹配文本的所有行。<br><br>-V  --version  #显示版本信息。<br><br>-w  --word-regexp  #只显示全字符合的列。<br><br>-x  --line-regexp  #只显示全列符合的列。<br><br>-y  此参数的效果和指定“-i”参数相同。<br></code></pre></td></tr></table></figure><ul><li>掌握grep的常用参数，会让你查找日志或者内容非常轻松。特别是当你数据量很大的时候，没办法使用vi或者vim打开的情况下。</li></ul><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><blockquote><p>cut实用程序从每个文件中剪切出每行的选定部分（由列表指定），并将它们写入标准输出。如果未指定文件参数，或者文件参数为单破折号（-），则从标准输入中读取内容。列表指定的项目可以是列位置，也可以是由特殊字符分隔的字段。列编号从1开始。</p></blockquote><p>cur命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b：仅显示行中指定直接范围的内容；<br><br>-c：仅显示行中指定范围的字符；<br><br>-d：指定字段的分隔符，默认的字段分隔符为“TAB”；<br><br>-f：显示指定字段的内容；<br><br>-n：与“-b”选项连用，不分割多字节字符；<br><br>--complement：补足被选择的字节、字符或字段；<br><br>--out-delimiter=&lt;字段分隔符&gt;：指定输出内容是的字段分割符；<br></code></pre></td></tr></table></figure><p>cut 命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">cut -c-10 tmp.txt  <span class="hljs-comment">#cut tmp.txt文件的前10列</span></span><br><span class="hljs-meta">$</span><span class="bash">cut -c3-5 tmp.txt  <span class="hljs-comment">#cut tmp.txt文件的第3到5列</span></span><br><span class="hljs-meta">$</span><span class="bash">cut -c3- tmp.txt  <span class="hljs-comment">#cut tmp.txt文件的第3到结尾列</span></span><br><span class="hljs-meta">$</span><span class="bash">cut -c7-7 tmp.txt <span class="hljs-comment"># cut tmp.txt 第7列</span></span><br></code></pre></td></tr></table></figure><blockquote><p>综合使用命令</p><p>vim写了一行hello world。对我说，你怎样通过linux命令吧这个文本里面的hello world搞成十行，并且取出每一列的第七个字符。</p><p><strong>当时的我真的是心里一群草泥马跑过，这可难道我了，我沉思了片刻，说只要十行么？多点行么？。当然不行，只要十行，取每行的第七个字符续</strong>沉思了片刻，拿起面试官的电脑就是一顿操作，于是有了我记忆深刻的下面这一行命令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat tmp.cc| &gt;&gt;tmp.cc|&gt;&gt;tmp.cc|&gt;&gt;tmp.cc|head -n10|&gt;tmp.cc|cut -c7-7</span><br></code></pre></td></tr></table></figure><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><blockquote><p>diff</p><p>比较两个文件的不同</p></blockquote><p>diff 命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b或--ignore-space-change 不检查空格字符的不同。<br><br>-B或--ignore-blank-lines 不检查空白行。<br><br>-c 显示全部内文，并标出不同之处。<br><br>-C或--context 与执行&quot;-c-&quot;指令相同。<br><br>-d或--minimal 使用不同的演算法，以较小的单位来做比较。<br><br>-D或ifdef 此参数的输出格式可用于前置处理器巨集。<br><br>-e或--ed 此参数的输出格式可用于ed的script文件。<br><br>-f或-forward-ed 输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。<br><br>-H或--speed-large-files 比较大文件时，可加快速度。<br><br>-l或--ignore-matching-lines 若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。<br><br>-i或--ignore-case 不检查大小写的不同。<br><br>-l或--paginate 将结果交由pr程序来分页。<br><br>-n或--rcs 将比较结果以RCS的格式来显示。<br><br>-N或--new-file 在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较。<br><br>-p 若比较的文件为C语言的程序码文件时，显示差异所在的函数名称。<br><br>-P或--unidirectional-new-file 与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。<br><br>-q或--brief 仅显示有无差异，不显示详细的信息。<br><br>-r或--recursive 比较子目录中的文件。<br><br>-s或--report-identical-files 若没有发现任何差异，仍然显示信息。<br><br>-S或--starting-file 在比较目录时，从指定的文件开始比较。<br><br>-t或--expand-tabs 在输出时，将tab字符展开。<br><br>-T或--initial-tab 在每行前面加上tab字符以便对齐。<br><br>-u,-U或--unified= 以合并的方式来显示文件内容的不同。<br><br>-v或--version 显示版本信息。<br><br>-w或--ignore-all-space 忽略全部的空格字符。<br><br>-W或--width 在使用-y参数时，指定栏宽。<br><br>-x或--exclude 不比较选项中所指定的文件或目录。<br><br>-X或--exclude-from 您可以将文件或目录类型存成文本文件，然后在=中指定此文本文件。<br><br>-y或--side-by-side 以并列的方式显示文件的异同之处。<br></code></pre></td></tr></table></figure><p>diff示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> diff <span class="hljs-built_in">test</span> tmp.cc</span><br>1,3d0<br>&lt; hello world<br>&lt; hello world<br>&lt; 11<br></code></pre></td></tr></table></figure><h3 id="tar-amp-gzip"><a href="#tar-amp-gzip" class="headerlink" title="tar &amp; gzip"></a>tar &amp; gzip</h3><blockquote><p>tar - 用来压缩和解压文件,tar本身不具有压缩功能,它是调用压缩功能实现的</p></blockquote><p>tar命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">-A 新增压缩文件到已存在的压缩<br><br>-B 设置区块大小<br><br>-c 建立新的压缩文件<br><br>-d 记录文件的差别<br><br>-r 添加文件到已经压缩的文件<br><br>-u 添加改变了和现有的文件到已经存在的压缩文件<br><br>-x 从压缩的文件中提取文件<br><br>-t 显示压缩文件的内容<br><br>-z 支持gzip解压文件<br><br>-j 支持bzip2解压文件<br><br>-Z 支持compress解压文件<br><br>-v 显示操作过程<br><br>-l 文件系统边界设置<br><br>-k 保留原有文件不覆盖<br><br>-m 保留文件不被覆盖<br><br>-W 确认压缩文件的正确性<br><br>-b 设置区块数目<br><br>-C 切换到指定目录<br><br>-f 指定压缩文件<br></code></pre></td></tr></table></figure><p>tar参数示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">打包  tar -cvf 包名  文件名</span><br><span class="hljs-meta">$</span><span class="bash">tar -cvf test.tar test.txt</span> <br><span class="hljs-meta">#</span><span class="bash">解包  tar -xvf 包名</span> <br><span class="hljs-meta">$</span><span class="bash">tar -xvf test.tar</span><br><span class="hljs-meta">#</span><span class="bash">压缩  tar -czvf 包名 文件名</span><br><span class="hljs-meta">$</span><span class="bash">tar -czvf test.tgz test.txt</span><br><span class="hljs-meta">#</span><span class="bash">解压  tar -xzvf 包名</span><br><span class="hljs-meta">$</span><span class="bash">tar -xzvf test.tgz</span><br></code></pre></td></tr></table></figure><p>-c 创建 -x 提取文件</p><p>-v 显示操作过程</p><p>-f 指定文件</p><p>-z 支持压缩文件</p><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><blockquote><p>du</p><p>du实用程序显示每个文件自变量以及以每个目录自变量为根的文件层次结构中每个目录的文件系统块使用情况。如果未指定文件，则显示以当前目录为根的层次结构的块使用情况。</p></blockquote><p>du命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a或-all 显示目录中个别文件的大小。<br><br>-b或-bytes 显示目录或文件大小时，以byte为单位。<br><br>-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br><br>-k或--kilobytes 以KB(1024bytes)为单位输出。<br><br>-m或--megabytes 以MB为单位输出。<br><br>-s或--summarize 仅显示总计，只列出最后加总的值。<br><br>-h或--human-readable 以K，M，G为单位，提高信息的可读性。<br><br>-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br><br>-L&lt;符号链接&gt;或--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br><br>-S或--separate-dirs  显示个别目录的大小时，并不含其子目录的大小。<br><br>-X&lt;文件&gt;或--exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br><br>--exclude=&lt;目录或文件&gt;     略过指定的目录或文件。<br><br>-D或--dereference-args  显示指定符号链接的源文件大小。<br><br>-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。<br><br>-l或--count-links  重复计算硬件链接的文件。<br></code></pre></td></tr></table></figure><p>du命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看指定文件大小</span><br><span class="hljs-meta">$</span><span class="bash">du -h filename</span><br><span class="hljs-meta">#</span><span class="bash">展示该目录下所有文件大小，大小以可读方式展示</span><br><span class="hljs-meta">$</span><span class="bash">du  -h /</span><br><span class="hljs-meta">#</span><span class="bash">展示当前目录大小</span><br><span class="hljs-meta">$</span><span class="bash">du -sh</span><br><span class="hljs-meta">#</span><span class="bash">展示当前目录下每个目录大小</span><br><span class="hljs-meta">$</span><span class="bash">du -sh ./</span><br><span class="hljs-meta">#</span><span class="bash">显示所有文件的大小，以可读方式展示</span><br><span class="hljs-meta">$</span><span class="bash">du -ah /</span><br></code></pre></td></tr></table></figure><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><blockquote><p>df</p><p>df实用程序显示有关指定文件系统或其中一部分文件的文件系统上的可用磁盘空间量的统计信息。值以每块计数512字节的形式显示。如果未指定文件或文件系统操作数，则将显示所有已挂载文件系统的统计信息（受下面的-t选项约束）。</p></blockquote><p>df命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a 全部文件系统列表<br><br>-h 方便阅读方式显示<br><br>-H 等于“-h”，但是计算式，1K=1000，而不是1K=1024<br><br>-i 显示inode信息<br><br>-k 区块为1024字节<br><br>-l 只显示本地文件系统<br><br>-m 区块为1048576字节<br><br>--no-sync 忽略 sync 命令<br><br>-P 输出格式为POSIX<br><br>--sync 在取得磁盘信息前，先执行sync命令<br><br>-T 文件系统类型<br><br>--block-size=&lt;区块大小&gt; 指定区块大小<br><br>-t&lt;文件系统类型&gt; 只显示选定文件系统的磁盘信息<br><br>-x&lt;文件系统类型&gt; 不显示选定文件系统的磁盘信息<br></code></pre></td></tr></table></figure><p>df命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">展示当前系统磁盘使用情况，以可读的方式展示</span><br><span class="hljs-meta">$</span><span class="bash"> df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br>E:/git/Git      140G   13G  128G   9% /<br>C:               98G   43G   56G  44% /c<br>D:              932G  1.7G  930G   1% /d<br></code></pre></td></tr></table></figure><h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><blockquote><p>lsof</p><p>lsof（list open files）是一个列出当前系统打开文件的工具。(在linux环境下，任何事物都以文件的形式存在)</p><p>lsof可以打开的文件包括：</p><p>1.普通文件</p><p>2.目录</p><p>3.网络文件系统的文件</p><p>4.字符或设备文件</p><p>5.(函数)共享库</p><p>6.管道，命名管道</p><p>7.符号链接</p><p>8.网络文件（例如：NFS file、网络socket，unix域名socket）</p><p>9.还有其它类型的文件，等等</p><p><strong>这个命令在我日常工作中使用场景很多，使用范围很广。</strong></p></blockquote><p>lsof命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a 列出打开文件存在的进程<br><br>-c&lt;进程名&gt; 列出指定进程所打开的文件<br><br>-g 列出GID号进程详情<br><br>-d&lt;文件号&gt; 列出占用该文件号的进程<br><br>+d&lt;目录&gt; 列出目录下被打开的文件<br><br>+D&lt;目录&gt; 递归列出目录下被打开的文件<br><br>-n&lt;目录&gt; 列出使用NFS的文件<br><br>-i&lt;条件&gt; 列出符合条件的进程。（4、6、协议、:端口、 @ip ）<br><br>-p&lt;进程号&gt; 列出指定进程号所打开的文件<br><br>-u 列出UID号进程详情<br></code></pre></td></tr></table></figure><p>lsof命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">显示当前系统打开的文件</span><br><span class="hljs-meta">$</span><span class="bash">lsof</span>  <br><span class="hljs-meta">#</span><span class="bash">查看某个文件的相关进程  lsof 文件名</span><br><span class="hljs-meta">$</span><span class="bash"> lsof /bin/bash</span><br>COMMAND  PID  USER  FD   TYPE DEVICE SIZE/OFF   NODE NAME<br>bash    9430 midou txt    REG  253,1   960392 140072 /usr/bin/bash<br><span class="hljs-meta">#</span><span class="bash">查看某个用户打开的文件信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -u username</span><br><span class="hljs-meta">#</span><span class="bash">列出某个程序进程所打开的文件信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -c java</span><br><span class="hljs-meta">#</span><span class="bash">列出除了某个用户外的被打开的文件信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -u ^midou</span><br><span class="hljs-meta">#</span><span class="bash">通过某个进程号显示该进行打开的文件</span><br><span class="hljs-meta">$</span><span class="bash">lsof -p pid</span><br><span class="hljs-meta">#</span><span class="bash">列出除了某个进程号，其他进程号所打开的文件信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -p ^pid</span><br><span class="hljs-meta">#</span><span class="bash">列出所有的网络连接</span><br><span class="hljs-meta">$</span><span class="bash">lsof -i</span><br><span class="hljs-meta">#</span><span class="bash">列出所有tcp 网络连接信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -i tcp</span><br><span class="hljs-meta">#</span><span class="bash">列出所有udp网络连接信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -i udp</span><br><span class="hljs-meta">#</span><span class="bash">列出谁在某个端口使用情况</span><br><span class="hljs-meta">$</span><span class="bash">lsof -i :port</span><br><span class="hljs-meta">#</span><span class="bash">特定的tcp端口</span><br><span class="hljs-meta">$</span><span class="bash">lsof -i tcp:port</span> <br><span class="hljs-meta">#</span><span class="bash">特定的udp端口</span><br><span class="hljs-meta">$</span><span class="bash">lsof -i udp:port</span><br><span class="hljs-meta">#</span><span class="bash">列出某个用户的所有活跃的网络端口</span><br><span class="hljs-meta">$</span><span class="bash">lsof -a -u username -i</span><br><span class="hljs-meta">#</span><span class="bash">根据文件描述符范围列出文件信息</span><br><span class="hljs-meta">$</span><span class="bash">lsof -d 0-2</span><br></code></pre></td></tr></table></figure><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><blockquote><p>ping</p><p>将ICMP ECHO_REQUEST数据包发送到网络主机</p></blockquote><p>ping 命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">-d 使用Socket的SO_DEBUG功能。<br><br>-f 极限检测。大量且快速地送网络封包给一台机器，看它的回应。<br><br>-n 只输出数值。<br><br>-q 不显示任何传送封包的信息，只显示最后的结果。<br><br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。通常是查看本机的网络接口是否有问题。<br><br>-R 记录路由过程。<br><br>-v 详细显示指令的执行过程。<br><br><br><br>-c 数目：在发送指定数目的包后停止。<br><br>-i 秒数：设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。<br><br>-I 网络界面：使用指定的网络界面送出数据包。<br><br>-l 前置载入：设置在送出要求信息之前，先行发出的数据包。<br><br>-p 范本样式：设置填满数据包的范本样式。<br><br>-s 字节数：指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节。<br><br>-t 存活数值：设置存活数值TTL的大小。<br><br>ping，在日常工作中都是简单的用来测试本机与其他机器之间的网络通信，当然如果了解这些参数的话，会有更多的用法。<br></code></pre></td></tr></table></figure><p>ping命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">检测网络情况</span><br><span class="hljs-meta">$</span><span class="bash">ping host</span><br><span class="hljs-meta">#</span><span class="bash">ping网关</span><br><span class="hljs-meta">$</span><span class="bash">ping -b host</span><br><span class="hljs-meta">#</span><span class="bash">ping指定次数</span><br><span class="hljs-meta">$</span><span class="bash">ping -c 10 host</span><br><span class="hljs-meta">#</span><span class="bash">ping指定时间间隔和次数限制</span><br><span class="hljs-meta">$</span><span class="bash">ping -c 10 -i 0.5 host</span><br><span class="hljs-meta">#</span><span class="bash">通过域名ping公网上的站点</span><br></code></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><blockquote><p>netstat</p><p>etstat命令以符号形式显示各种与网络相关的数据结构的内容。有多种输出格式，具体取决于显示信息的选项。该命令的第一种形式显示每个协议的活动套接字列表。第二种形式根据选择的选项显示其他网络数据结构之一的内容。使用第三种形式，并指定等待间隔，netstat将在配置的网络接口上连续显示有关数据包流量的信息。第四种形式显示指定协议或地址族的统计信息。如果指定了等待间隔，将显示最近间隔秒的协议信息。第五种形式显示指定协议或地址族的每个接口的统计信息。第六种形式显示mbuf（9）统计信息。第七种形式显示指定地址系列的路由表。第八种形式显示路由统计信息。</p></blockquote><p>netstat命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a或–all 显示所有连线中的Socket。<br><br>-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。<br><br>-c或–continuous 持续列出网络状态。<br><br>-C或–cache 显示路由器配置的快取信息。<br><br>-e或–extend 显示网络其他相关信息。<br><br>-F或–fib 显示FIB。<br><br>-g或–groups 显示多重广播功能群组组员名单。<br><br>-h或–help 在线帮助。<br><br>-i或–interfaces 显示网络界面信息表单。<br><br>-l或–listening 显示监控中的服务器的Socket。<br><br>-M或–masquerade 显示伪装的网络连线。<br><br>-n或–numeric 直接使用IP地址，而不通过域名服务器。<br><br>-N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。<br><br>-o或–timers 显示计时器。<br><br>-p或–programs 显示正在使用Socket的程序识别码和程序名称。<br><br>-r或–route 显示Routing Table。<br><br>-s或–statistice 显示网络工作信息统计表。<br><br>-t或–tcp 显示TCP传输协议的连线状况。<br><br>-u或–udp 显示UDP传输协议的连线状况。<br><br>-v或–verbose 显示指令执行过程。<br><br>-V或–version 显示版本信息。<br><br>-w或–raw 显示RAW传输协议的连线状况。<br><br>-x或–unix 此参数的效果和指定”-A unix”参数相同。<br><br>–ip或–inet 此参数的效果和指定”-A inet”参数相同。<br></code></pre></td></tr></table></figure><p>netstat命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">列出所有端口使用情况</span><br><span class="hljs-meta">$</span><span class="bash">netstat -a</span><br><span class="hljs-meta">#</span><span class="bash">显示当前UDP连接状况</span><br><span class="hljs-meta">$</span><span class="bash">netstat -nu</span><br><span class="hljs-meta">#</span><span class="bash">显示UDP端口号的使用情况</span><br><span class="hljs-meta">$</span><span class="bash">netstat -apu</span><br><span class="hljs-meta">#</span><span class="bash">显示网卡列表</span><br><span class="hljs-meta">$</span><span class="bash">netstat -i</span><br><span class="hljs-meta">#</span><span class="bash">显示网络统计信息</span><br><span class="hljs-meta">$</span><span class="bash">netstat -s</span><br><span class="hljs-meta">#</span><span class="bash">显示监听的套接口</span><br><span class="hljs-meta">$</span><span class="bash">netstat -l</span><br><span class="hljs-meta">#</span><span class="bash">显示所有已建立的有效连接</span><br><span class="hljs-meta">$</span><span class="bash">netstat -n</span><br><span class="hljs-meta">#</span><span class="bash">显示关于路由表的信息</span><br><span class="hljs-meta">$</span><span class="bash">netstat -r</span><br><span class="hljs-meta">#</span><span class="bash">列出所有 tcp 端口</span><br><span class="hljs-meta">$</span><span class="bash">netstat -at</span><br><span class="hljs-meta">#</span><span class="bash">找出程序运行的端口</span><br><span class="hljs-meta">$</span><span class="bash">netstat -ap | grep ssh</span><br><span class="hljs-meta">#</span><span class="bash">在 netstat 输出中显示 PID 和进程名称</span><br><span class="hljs-meta">$</span><span class="bash">netstat -pt</span><br></code></pre></td></tr></table></figure><h3 id="ifconfg"><a href="#ifconfg" class="headerlink" title="ifconfg"></a>ifconfg</h3><blockquote><p>ifconfig</p><p>Ifconfig用于配置内核驻留的网络接口。它在引导时用于根据需要设置接口。之后，通常仅在调试或需要系统调整时才需要它。</p></blockquote><p>ifconfig命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">up 启动指定网络设备/网卡。<br><br>down 关闭指定网络设备/网卡。该参数可以有效地阻止通过指定接口的IP信息流，如果想永久地关闭一个接口，我们还需要从核心路由表中将该接口的路由信息全部删除。<br><br>arp 设置指定网卡是否支持ARP协议。<br><br>-promisc 设置是否支持网卡的promiscuous模式，如果选择此参数，网卡将接收网络中发给它所有的数据包<br><br>-allmulti 设置是否支持多播模式，如果选择此参数，网卡将接收网络中所有的多播数据包<br><br>-a 显示全部接口信息<br><br>-s 显示摘要信息（类似于 netstat -i）<br><br>add 给指定网卡配置IPv6地址<br><br>del 删除指定网卡的IPv6地址<br><br>&lt;硬件地址&gt; 配置网卡最大的传输单元<br><br>mtu&lt;字节数&gt; 设置网卡的最大传输单元 (bytes)<br><br>netmask&lt;子网掩码&gt; 设置网卡的子网掩码。掩码可以是有前缀0x的32位十六进制数，也可以是用点分开的4个十进制数。如果不打算将网络分成子网，可以不管这一选项；如果要使用子网，那么请记住，网络中每一个系统必须有相同子网掩码。<br><br>tunel 建立隧道<br><br>dstaddr 设定一个远端地址，建立点对点通信<br><br>-broadcast&lt;地址&gt; 为指定网卡设置广播协议<br><br>-pointtopoint&lt;地址&gt; 为网卡设置点对点通讯协议<br><br>multicast 为网卡设置组播标志<br><br>address 为网卡设置IPv4地址<br><br>txqueuelen&lt;长度&gt; 为网卡设置传输列队的长度<br></code></pre></td></tr></table></figure><p>ifconfig常用命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">显示网络设备信息</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig</span><br><span class="hljs-meta">#</span><span class="bash">启动关闭指定网卡</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig eth0 up</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig eth0 down</span><br><span class="hljs-meta">#</span><span class="bash">配置IP地址</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig eth0 ip</span><br><span class="hljs-meta">#</span><span class="bash">启用和关闭ARP协议</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig eth0 arp</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig eth0 -arp</span><br><span class="hljs-meta">#</span><span class="bash">设置最大传输单元</span><br><span class="hljs-meta">$</span><span class="bash">ifconfig eth0 mtu 1500</span><br></code></pre></td></tr></table></figure><h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><blockquote><p>hostname</p><p>主机名用于显示系统的DNS名称，并显示或设置其主机名或NIS域名。</p></blockquote><p>hostname命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-v：详细信息模式；<br>-a：显示主机别名；<br>-d：显示DNS域名；<br>-f：显示FQDN名称；<br>-i：显示主机的ip地址；<br>-s：显示短主机名称，在第一个点处截断；<br>-y：显示NIS域名。<br></code></pre></td></tr></table></figure><p>hostname参数示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看主机ip,这个命令我最推荐的一个用法就是查看主机ip，之前我一直用ifconfig</span><br><span class="hljs-meta">$</span><span class="bash">hostname -i</span> <br></code></pre></td></tr></table></figure><h3 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h3><blockquote><p>traceroute</p><p>traceroute跟踪从IP网络获取到给定主机的路由信息包。它利用IP协议的生存时间（TTL）字段并尝试从每个网关到主机的路径引发ICMP TIME_EXCEEDED响应。</p></blockquote><p>traceroute命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">-d 使用Socket层级的排错功能。<br><br>-f 设置第一个检测数据包的存活数值TTL的大小。<br><br>-F 设置勿离断位。<br><br>-g 设置来源路由网关，最多可设置8个。<br><br>-i 使用指定的网络界面送出数据包。<br><br>-I 使用ICMP回应取代UDP资料信息。<br><br>-m 设置检测数据包的最大存活数值TTL的大小。<br><br>-n 直接使用IP地址而非主机名称。<br><br>-p 设置UDP传输协议的通信端口。<br><br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。<br><br>-s 设置本地主机送出数据包的IP地址。<br><br>-t 设置检测数据包的TOS数值。<br><br>-v 详细显示指令的执行过程。<br><br>-w 设置等待远端主机回报的时间。<br><br>-x 开启或关闭数据包的正确性检验。<br></code></pre></td></tr></table></figure><p>traceroute命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">traceroute 一下百度，看下数据包的路由途径</span><br><span class="hljs-meta">$</span><span class="bash"> traceroute www.baidu.com</span><br>traceroute: Warning: www.baidu.com has multiple addresses; using 183.232.231.172<br>traceroute to www.baidu.com (183.232.231.172), 64 hops max, 52 byte packets<br> 1  192.168.0.1 (192.168.0.1)  6.059 ms  0.879 ms  0.843 ms<br> 2  192.168.1.1 (192.168.1.1)  1.305 ms  2.232 ms  2.167 ms<br> 3  10.104.0.1 (10.104.0.1)  5.085 ms  5.534 ms  4.466 ms<br> 4  221.131.253.13 (221.131.253.13)  4.633 ms  11.736 ms  4.199 ms<br> 5  117.148.181.1 (117.148.181.1)  4.544 ms *<br>    112.11.233.49 (112.11.233.49)  13.384 ms<br> 6  221.183.47.165 (221.183.47.165)  6.591 ms  6.643 ms<br>    221.183.47.161 (221.183.47.161)  5.591 ms<br> 7  * 221.183.40.225 (221.183.40.225)  27.242 ms  25.222 ms<br> 8  221.183.59.154 (221.183.59.154)  27.937 ms  27.501 ms  26.869 ms<br> 9  120.241.49.198 (120.241.49.198)  60.772 ms<br>    120.241.49.30 (120.241.49.30)  33.451 ms<br>    120.241.48.190 (120.241.48.190)  45.563 ms<br>10  * * *<br>11  * * *<br>12  * * *<br>13  * * *<br>14  * * *<br>15  * * *<br>16  * * *<br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><p>记录按序列号从1开始，每行纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 10 <a href="http://www.baidu.com,表示向每个网关发送10个数据包./">www.baidu.com，表示向每个网关发送10个数据包。</a></p><p>有时我们traceroute 一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。</p><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><blockquote><p>route</p><p>Route操纵内核的IP路由表。它的主要用途是在使用ifconfig（8）程序对其进行配置后，通过接口设置到特定主机或网络的静态路由。</p></blockquote><p>route命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">-c 显示更多信息<br><br>-n 不解析名字<br><br>-v 显示详细的处理信息<br><br>-F 显示发送信息<br><br>-C 显示路由缓存<br><br>-f 清除所有网关入口的路由表。<br><br>-p 与 add 命令一起使用时使路由具有永久性。<br><br>add:添加一条新路由。<br><br>del:删除一条路由。<br><br>-net:目标地址是一个网络。<br><br>-host:目标地址是一个主机。<br></code></pre></td></tr></table></figure><p>route命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">显示当前路由</span><br><span class="hljs-meta">$</span><span class="bash">route</span><br><span class="hljs-meta">#</span><span class="bash">屏蔽一条路由</span><br><span class="hljs-meta">$</span><span class="bash">route add -net 224.0.0.0 netmask 240.0.0.0 reject</span><br><span class="hljs-meta">#</span><span class="bash">删除路由记录</span><br><span class="hljs-meta">$</span><span class="bash">route del -net 224.0.0.0 netmask 240.0.0.0</span><br><span class="hljs-meta">#</span><span class="bash">删除和添加设置默认网关</span><br><span class="hljs-meta">$</span><span class="bash">route del default gw 192.168.0.100</span><br><span class="hljs-meta">$</span><span class="bash">route add default gw 192.168.0.100</span><br></code></pre></td></tr></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><blockquote><p>wget</p><p>GNU Wget是一个免费实用程序，用于从Web非交互式下载文件。它支持HTTP，HTTPS和FTP协议，以及通过HTTP代理进行检索。</p></blockquote><p>wget命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs shell">启动：<br>  -V,  --version           显示 Wget 的版本信息并退出。<br>  -h,  --help              打印此帮助。<br>  -b,  --background        启动后转入后台。<br>  -e,  --execute=COMMAND   运行一个“.wgetrc”风格的命令。<br><br>日志和输入文件：<br>  -o,  --output-file=FILE    将日志信息写入 FILE。<br>  -a,  --append-output=FILE  将信息添加至 FILE。<br>  -d,  --debug               打印大量调试信息。<br>  -q,  --quiet               安静模式 (无信息输出)。<br>  -v,  --verbose             详尽的输出 (此为默认值)。<br>  -nv, --no-verbose          关闭详尽输出，但不进入安静模式。<br>  -i,  --input-file=FILE     下载本地或外部 FILE 中的 URLs。<br>  -F,  --force-html          把输入文件当成 HTML 文件。<br>  -B,  --base=URL            解析与 URL 相关的<br>                             HTML 输入文件 (由 -i -F 选项指定)。<br>       --config=FILE         Specify config file to use.<br><br>下载：<br>  -t,  --tries=NUMBER            设置重试次数为 NUMBER (0 代表无限制)。<br>       --retry-connrefused       即使拒绝连接也是重试。<br>  -O,  --output-document=FILE    将文档写入 FILE。<br>  -nc, --no-clobber              skip downloads that would download to<br>                                 existing files (overwriting them).<br>  -c,  --continue                断点续传下载文件。<br>       --progress=TYPE           选择进度条类型。<br>  -N,  --timestamping            只获取比本地文件新的文件。<br>  --no-use-server-timestamps     不用服务器上的时间戳来设置本地文件。<br>  -S,  --server-response         打印服务器响应。<br>       --spider                  不下载任何文件。<br>  -T,  --timeout=SECONDS         将所有超时设为 SECONDS 秒。<br>       --dns-timeout=SECS        设置 DNS 查寻超时为 SECS 秒。<br>       --connect-timeout=SECS    设置连接超时为 SECS 秒。<br>       --read-timeout=SECS       设置读取超时为 SECS 秒。<br>  -w,  --wait=SECONDS            等待间隔为 SECONDS 秒。<br>       --waitretry=SECONDS       在获取文件的重试期间等待 1..SECONDS 秒。<br>       --random-wait             获取多个文件时，每次随机等待间隔<br>                                 0.5*WAIT...1.5*WAIT 秒。<br>       --no-proxy                禁止使用代理。<br>  -Q,  --quota=NUMBER            设置获取配额为 NUMBER 字节。<br>       --bind-address=ADDRESS    绑定至本地主机上的 ADDRESS (主机名或是 IP)。<br>       --limit-rate=RATE         限制下载速率为 RATE。<br>       --no-dns-cache            关闭 DNS 查寻缓存。<br>       --restrict-file-names=OS  限定文件名中的字符为 OS 允许的字符。<br>       --ignore-case             匹配文件/目录时忽略大小写。<br>  -4,  --inet4-only              仅连接至 IPv4 地址。<br>  -6,  --inet6-only              仅连接至 IPv6 地址。<br>       --prefer-family=FAMILY    首先连接至指定协议的地址<br>                                 FAMILY 为 IPv6，IPv4 或是 none。<br>       --user=USER               将 ftp 和 http 的用户名均设置为 USER。<br>       --password=PASS           将 ftp 和 http 的密码均设置为 PASS。<br>       --ask-password            提示输入密码。<br>       --no-iri                  关闭 IRI 支持。<br>       --local-encoding=ENC      IRI (国际化资源标识符) 使用 ENC 作为本地编码。<br>       --remote-encoding=ENC     使用 ENC 作为默认远程编码。<br>       --unlink                  remove file before clobber.<br><br>目录：<br>  -nd, --no-directories           不创建目录。<br>  -x,  --force-directories        强制创建目录。<br>  -nH, --no-host-directories      不要创建主目录。<br>       --protocol-directories     在目录中使用协议名称。<br>  -P,  --directory-prefix=PREFIX  以 PREFIX/... 保存文件<br>       --cut-dirs=NUMBER          忽略远程目录中 NUMBER 个目录层。<br><br>HTTP 选项：<br>       --http-user=USER        设置 http 用户名为 USER。<br>       --http-password=PASS    设置 http 密码为 PASS。<br>       --no-cache              不在服务器上缓存数据。<br>       --default-page=NAME     改变默认页<br>                               (默认页通常是“index.html”)。<br>  -E,  --adjust-extension      以合适的扩展名保存 HTML/CSS 文档。<br>       --ignore-length         忽略头部的‘Content-Length’区域。<br>       --header=STRING         在头部插入 STRING。<br>       --max-redirect          每页所允许的最大重定向。<br>       --proxy-user=USER       使用 USER 作为代理用户名。<br>       --proxy-password=PASS   使用 PASS 作为代理密码。<br>       --referer=URL           在 HTTP 请求头包含‘Referer: URL’。<br>       --save-headers          将 HTTP 头保存至文件。<br>  -U,  --user-agent=AGENT      标识为 AGENT 而不是 Wget/VERSION。<br>       --no-http-keep-alive    禁用 HTTP keep-alive (永久连接)。<br>       --no-cookies            不使用 cookies。<br>       --load-cookies=FILE     会话开始前从 FILE 中载入 cookies。<br>       --save-cookies=FILE     会话结束后保存 cookies 至 FILE。<br>       --keep-session-cookies  载入并保存会话 (非永久) cookies。<br>       --post-data=STRING      使用 POST 方式；把 STRING 作为数据发送。<br>       --post-file=FILE        使用 POST 方式；发送 FILE 内容。<br>       --content-disposition   当选中本地文件名时<br>                               允许 Content-Disposition 头部 (尚在实验)。<br>       --auth-no-challenge     发送不含服务器询问的首次等待<br>                               的基本 HTTP 验证信息。<br><br>HTTPS (SSL/TLS) 选项：<br>       --secure-protocol=PR     选择安全协议，可以是 auto、SSLv2、<br>                                SSLv3 或是 TLSv1 中的一个。<br>       --no-check-certificate   不要验证服务器的证书。<br>       --certificate=FILE       客户端证书文件。<br>       --certificate-type=TYPE  客户端证书类型，PEM 或 DER。<br>       --private-key=FILE       私钥文件。<br>       --private-key-type=TYPE  私钥文件类型，PEM 或 DER。<br>       --ca-certificate=FILE    带有一组 CA 认证的文件。<br>       --ca-directory=DIR       保存 CA 认证的哈希列表的目录。<br>       --random-file=FILE       带有生成 SSL PRNG 的随机数据的文件。<br>       --egd-file=FILE          用于命名带有随机数据的 EGD 套接字的文件。<br><br>FTP 选项：<br>       --ftp-user=USER         设置 ftp 用户名为 USER。<br>       --ftp-password=PASS     设置 ftp 密码为 PASS。<br>       --no-remove-listing     不要删除‘.listing’文件。<br>       --no-glob               不在 FTP 文件名中使用通配符展开。<br>       --no-passive-ftp        禁用“passive”传输模式。<br>       --retr-symlinks         递归目录时，获取链接的文件 (而非目录)。<br><br>递归下载：<br>  -r,  --recursive          指定递归下载。<br>  -l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)。<br>       --delete-after       下载完成后删除本地文件。<br>  -k,  --convert-links      让下载得到的 HTML 或 CSS 中的链接指向本地文件。<br>  -K,  --backup-converted   在转换文件 X 前先将它备份为 X.orig。<br>  -m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式。<br>  -p,  --page-requisites    下载所有用于显示 HTML 页面的图片之类的元素。<br>       --strict-comments    用严格方式 (SGML) 处理 HTML 注释。<br><br>递归接受/拒绝：<br>  -A,  --accept=LIST               逗号分隔的可接受的扩展名列表。<br>  -R,  --reject=LIST               逗号分隔的要拒绝的扩展名列表。<br>  -D,  --domains=LIST              逗号分隔的可接受的域列表。<br>       --exclude-domains=LIST      逗号分隔的要拒绝的域列表。<br>       --follow-ftp                跟踪 HTML 文档中的 FTP 链接。<br>       --follow-tags=LIST          逗号分隔的跟踪的 HTML 标识列表。<br>       --ignore-tags=LIST          逗号分隔的忽略的 HTML 标识列表。<br>  -H,  --span-hosts                递归时转向外部主机。<br>  -L,  --relative                  只跟踪有关系的链接。<br>  -I,  --include-directories=LIST  允许目录的列表。<br>  --trust-server-names             use the name specified by the redirection<br>                                   url last component.<br>  -X,  --exclude-directories=LIST  排除目录的列表。<br>  -np, --no-parent                 不追溯至父目录。<br></code></pre></td></tr></table></figure><p>wget常用参数示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">下载某个文件，wget 文件的地址</span><br><span class="hljs-meta">$</span><span class="bash">wget https://blog.csdn.net/qq_38646470</span><br></code></pre></td></tr></table></figure><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><blockquote><p>vmstat</p><p>vmstat报告有关进程，内存，页面调度，块IO，陷阱，磁盘和cpu活动的信息。</p></blockquote><p>vmstat命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a：显示活跃和非活跃内存<br><br>-f：显示从系统启动至今的fork数量 。<br><br>-m：显示slabinfo<br><br>-n：只在开始时显示一次各字段名称。<br><br>-s：显示内存相关统计信息及多种系统活动数量。<br><br>delay：刷新时间间隔。如果不指定，只显示一条结果。<br><br>count：刷新次数。如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷。<br><br>-d：显示磁盘相关统计信息。<br><br>-p：显示指定磁盘分区统计信息<br><br>-S：使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节（byte）。默认单位为K（1024 bytes）<br></code></pre></td></tr></table></figure><p>vmstat命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">显示虚拟内存情况</span><br><span class="hljs-meta">$</span><span class="bash"> vmstat</span><br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br> 1  0      0 23764228 507816 36953948    0    0     3     5    0    0  1  0 98  0  0<br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><p>Procs（进程）：</p><p>r: 运行队列中进程数量</p><p>b: 等待IO的进程数量</p><p>Memory（内存）：</p><p>swpd: 使用虚拟内存大小</p><p>free: 可用内存大小</p><p>buff: 用作缓冲的内存大小</p><p>cache: 用作缓存的内存大小</p><p>Swap：</p><p>si: 每秒从交换区写到内存的大小</p><p>so: 每秒写入交换区的内存大小</p><p>IO：（现在的Linux版本块的大小为1024bytes）</p><p>bi: 每秒读取的块数</p><p>bo: 每秒写入的块数</p><p>系统：</p><p>in: 每秒中断数，包括时钟中断。</p><p>cs: 每秒上下文切换数。</p><p>CPU（以百分比表示）：</p><p>us: 用户进程执行时间(user time)</p><p>sy: 系统进程执行时间(system time)</p><p>id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。</p><p>wa: 等待IO时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash">表示在3秒时间内进行3次采样。将得到一个数据汇总他能够反映真正的系统情况。</span><br><span class="hljs-meta">$</span><span class="bash">vmstat 3 3</span><br><span class="hljs-meta">#</span><span class="bash">查看系统fork多少次</span><br><span class="hljs-meta">$</span><span class="bash"> vmstat -f</span><br>    166484246 forks<br><span class="hljs-meta">#</span><span class="bash">查看内存使用的详细信息</span><br><span class="hljs-meta">$</span><span class="bash">vmstat -s</span><br><span class="hljs-meta">#</span><span class="bash">查看磁盘的读/写</span><br><span class="hljs-meta">$</span><span class="bash">vmstat -d</span><br><span class="hljs-meta">#</span><span class="bash">查看系统的slab信息</span><br><span class="hljs-meta">$</span><span class="bash">vmstat -m</span><br></code></pre></td></tr></table></figure><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><blockquote><p>free</p><p>free显示系统中可用和可用的物理内存和交换内存的总量，以及内核使用的缓冲区和高速缓存。</p></blockquote><p>free命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 以Byte为单位显示内存使用情况。<br><br>-k 以KB为单位显示内存使用情况。<br><br>-m 以MB为单位显示内存使用情况。<br><br>-g  以GB为单位显示内存使用情况。<br><br>-o 不显示缓冲区调节列。<br><br>-s&lt;间隔秒数&gt; 持续观察内存使用状况。<br><br>-t 显示内存总和列。<br></code></pre></td></tr></table></figure><p>free命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">显示内存使用情况</span><br><span class="hljs-meta">$</span><span class="bash"> free</span><br>              total        used        free      shared  buff/cache   available<br>Mem:       65808884     4582700    23754736         684    37471448    60913052<br><span class="hljs-meta">$</span><span class="bash"> free -h</span><br>              total        used        free      shared  buff/cache   available<br>Mem:            62G        4.4G         22G        684K         35G         58G<br>Swap:            0B          0B          0B<br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><p>total:总计物理内存的大小。</p><p>used:已使用多大。</p><p>free:可用有多少。</p><p>Shared:多个进程共享的内存总额。</p><p>Buffers/cached:磁盘缓存的大小。</p><p>第三行(-/+ buffers/cached):</p><p>used:已使用多大。</p><p>free:可用有多少。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">\#周期性的查询内存使用信息，5s执行一次<br><span class="hljs-meta">$</span><span class="bash"> free -s 5</span><br></code></pre></td></tr></table></figure><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><blockquote><p>top</p><p>top程序提供正在运行的系统的动态实时视图。它可以显示系统摘要信息以及Linux内核当前正在管理的进程或线程的列表。所显示的系统摘要信息的类型以及为进程显示的信息的类型，顺序和大小都是用户可配置的，并且可以使配置在重新启动后保持不变。<br>    该程序为流程操作提供了一个有限的交互式界面，并为个人配置提供了更为广泛    的界面-涵盖了其操作的各个方面。尽管在本文档中始终引用top，但是您可以随意为程序命名。然后，该新名称（可能是别名）将反映在顶部的显示屏上，并在读写配置文件时使用。</p></blockquote><p>top 命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 批处理<br><br>-c 显示完整的治命令<br><br>-I 忽略失效过程<br><br>-s 保密模式<br><br>-S 累积模式<br><br>-i&lt;时间&gt; 设置间隔时间<br><br>-u&lt;用户名&gt; 指定用户名<br><br>-p&lt;进程号&gt; 指定进程<br><br>-n&lt;次数&gt; 循环显示的次数<br></code></pre></td></tr></table></figure><p>top常用参数示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">top</span><br><span class="hljs-meta">$</span><span class="bash"> top</span><br>top - 00:56:07 up 149 days, 14:40,  1 user,  load average: 0.00, 0.02, 0.05<br>Tasks: 254 total,   1 running, 253 sleeping,   0 stopped,   0 zombie<br><span class="hljs-meta">%</span><span class="bash">Cpu(s):  1.4 us,  0.3 sy,  0.0 ni, 98.3 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</span><br>KiB Mem : 65808884 total, 23749772 free,  4586160 used, 37472952 buff/cache<br>KiB Swap:        0 total,        0 free,        0 used. 60909608 avail Mem<br><br>  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND<br>24397 dongshan  20   0 17.972g 688312  13728 S   6.2  1.0   7:09.11 java<br>    1 root      20   0   42140   3684   1476 S   0.0  0.0  23:58.88 systemd<br>    2 root      20   0       0      0      0 S   0.0  0.0   0:05.47 kthreadd<br>    3 root      20   0       0      0      0 S   0.0  0.0   0:16.06 ksoftirqd/0<br>    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H<br>    7 root      rt   0       0      0      0 S   0.0  0.0   1:27.00 migration/0<br>    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh<br>    9 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/0<br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><p><strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</strong></p><p>00:56:07 — 当前系统时间</p><p>up 149 days, 14:40 — 系统已经运行了149天14小时40分钟（在这期间系统没有重启过的）</p><p>1users — 当前有1个用户登录系统</p><p>load average: 0.00, 0.02, 0.05 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><p><strong>第二行，Tasks — 任务（进程）</strong></p><p>系统现在共有254个进程，其中处于运行中的有1个，253个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p><p><strong>第三行，cpu状态信息</strong></p><p>%Cpu(s):  1.4 us,  0.3 sy,  0.0 ni, 98.3 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</p><p>1.4 us — 用户空间占用CPU的百分比。</p><p>0.3 sy — 内核空间占用CPU的百分比。</p><p>0.0 ni — 改变过优先级的进程占用CPU的百分比</p><p>98.3 id — 空闲CPU百分比</p><p>0.1 wa — IO等待占用CPU的百分比</p><p>0.0 hi — 硬中断（Hardware IRQ）占用CPU的百分比</p><p>0.0 si — 软中断（Software Interrupts）占用CPU的百分比</p><p><strong>第四行,内存状态</strong></p><p>65808884 total  物理内存总量</p><p>23749772 free  使用中的内存总量</p><p>4586160 used  空闲内存总量</p><p>37472952 buff/cache  缓存的内存量</p><p><strong>第五行，swap交换分区信息</strong></p><p>0 total  交换区总量</p><p>0 use  使用的交换区总量</p><p>0 free  空闲交换区总量</p><p>60909608 avail Mem  可用交换区总量</p><p><strong>第七行以下：各进程（任务）的状态监控</strong></p><p>PID — 进程id</p><p>USER — 进程所有者</p><p>PR — 进程优先级</p><p>NI — nice值。负值表示高优先级，正值表示低优先级</p><p>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p><p>SHR — 共享内存大小，单位kb</p><p>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</p><p>%CPU — 上次更新到现在的CPU时间占用百分比</p><p>%MEM — 进程使用的物理内存百分比</p><p>TIME+ — 进程使用的CPU时间总计，单位1/100秒</p><p>COMMAND — 进程名称（命令名/命令行）</p><h3 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h3><blockquote><p>sar</p><p>sar（System Activity Reporter系统活动情况报告）是目前 Linux 上最为全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告，包括：文件的读写情况、 系统调用的使用情况、磁盘I/O、CPU效率、内存使用状况、进程活动及IPC有关的活动等。</p></blockquote><p>sar命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">-A：所有报告的总和<br><br>-u：输出CPU使用情况的统计信息<br><br>-v：输出inode、文件和其他内核表的统计信息<br><br>-d：输出每一个块设备的活动信息<br><br>-r：输出内存和交换空间的统计信息<br><br>-b：显示I/O和传送速率的统计信息<br><br>-a：文件读写情况<br><br>-c：输出进程统计信息，每秒创建的进程数<br><br>-R：输出内存页面的统计信息<br><br>-y：终端设备活动情况<br><br>-w：输出系统交换活动信息<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Idea使用</title>
    <link href="/2021/10/27/Idea%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A/"/>
    <url>/2021/10/27/Idea%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>Idea生成类和方法注释</p><span id="more"></span><h3 id="新建类注释"><a href="#新建类注释" class="headerlink" title="新建类注释"></a>新建类注释</h3><p>Settings -&gt; Editor -&gt; File and Code Templates</p><p>File选项卡 下Class 选项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">#<span class="hljs-keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end<br>#parse(<span class="hljs-string">&quot;File Header.java&quot;</span>)<br> <span class="hljs-comment">/**  </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> 作者名字</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> $&#123;DATE&#125;/$&#123;TIME&#125; // 时间</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@ProjectName</span> $&#123;PROJECT_NAME&#125;// 工程名</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@ClassName</span>: $&#123;NAME&#125;// 类名</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: TODO// 描述</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $</span>&#123;NAME&#125; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>Settings -&gt; Editor -&gt; Live Templates</p><p>1.点击 + 号</p><p><img src="/img/markdown/image-20211027095320407.png"></p><p>2.新建一个组 MyGroup</p><p><img src="/img/markdown/image-20211027095101893.png"></p><p>3.选中刚才的组,再点击 + 号</p><p><img src="/img/markdown/image-20211027095020949.png"></p><p>4.修改<abbreviation> 选项卡</p><p><img src="/img/markdown/image-20211027095512737.png"></p><p>Template text 中内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">**<br>* <span class="hljs-meta">@Author</span> tho<br>* <span class="hljs-meta">@Date</span> $date$ $times$<br>$param$<br>* <span class="hljs-meta">@Return</span> $return_type$<br>* <span class="hljs-meta">@Description</span>: todo<br>*/<br></code></pre></td></tr></table></figure><p>java 中注释格式其中一种为 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>/x + tab 可以生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">/ + 下面文本的内容 <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">选择x只是个人习惯 不能选择已经存在的可以使用tab生成的内容,而x按起来比较方便,就选择 x<br>x 也可以改成任何不会冲突的命令<br>    必须使用/ + 某个指令 + 快捷键(Tab)生成<br>    不能将/ 写到下面文本中, <br>直接使用 某个指令 + 快捷键   生成的内容会有问题<br></code></pre></td></tr></table></figure><p>5.选择对应的函数来生成时间等信息</p><p><img src="/img/markdown/image-20211027100010970.png"></p><p><img src="/img/markdown/image-20211027100106443.png"></p><ul><li><p>date() 和 time() 函数idea自带 可以直接输入</p></li><li><p>param 和 return_type 选项要选择自定义脚本来显示,idea自带显示不是很好</p></li><li><p>param对应脚本(直接将以下代码贴进Expression 选项内)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">groovyScript(<span class="hljs-string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27;* @param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\n&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())<br></code></pre></td></tr></table></figure></li><li><p>return_type对应脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">groovyScript(<span class="hljs-string">&quot;def result=&#x27;&#x27;;  def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;&lt;&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;if(i!=0)&#123;result+=&#x27;&lt;&#x27;;&#125;;  def p1=params[i].split(&#x27;,&#x27;).toList();  for(i2 = 0; i2 &lt; p1.size(); i2++)  &#123; def p2=p1[i2].split(&#x27;\\\\.&#x27;).toList();  result+=p2[p2.size()-1]; if(i2!=p1.size()-1)&#123;result+=&#x27;,&#x27;&#125;  &#125; ; &#125;;  return result&quot;</span>, methodReturnType())<br></code></pre></td></tr></table></figure></li></ul><p>6.点击如下按钮将模板设置配置到全局</p><p><img src="/img/markdown/image-20211027100357703.png"></p><p><img src="/img/markdown/image-20211027100412702.png"></p><p>7.之后新建的类会自动生成注释</p><p>方法上的注释 需要使用 /x + tab</p>]]></content>
    
    
    
    <tags>
      
      <tag>Idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Idea使用</title>
    <link href="/2021/10/27/2021-10-27/"/>
    <url>/2021/10/27/2021-10-27/</url>
    
    <content type="html"><![CDATA[<p>Idea生成类和方法注释</p><span id="more"></span><h3 id="新建类注释"><a href="#新建类注释" class="headerlink" title="新建类注释"></a>新建类注释</h3><p>Settings -&gt; Editor -&gt; File and Code Templates</p><p>File选项卡 下Class 选项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">#<span class="hljs-keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end<br>#parse(<span class="hljs-string">&quot;File Header.java&quot;</span>)<br> <span class="hljs-comment">/**  </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span> 作者名字</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Date</span> $&#123;DATE&#125;/$&#123;TIME&#125; // 时间</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@ProjectName</span> $&#123;PROJECT_NAME&#125;// 工程名</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@ClassName</span>: $&#123;NAME&#125;// 类名</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: TODO// 描述</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $</span>&#123;NAME&#125; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>Settings -&gt; Editor -&gt; Live Templates</p><p>1.点击 + 号</p><p><img src="/img/markdown/image-20211027095320407.png"></p><p>2.新建一个组 MyGroup</p><p><img src="/img/markdown/image-20211027095101893.png"></p><p>3.选中刚才的组,再点击 + 号</p><p><img src="/img/markdown/image-20211027095020949.png"></p><p>4.修改<abbreviation> 选项卡</p><p><img src="/img/markdown/image-20211027095512737.png"></p><p>Template text 中内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">**<br>* <span class="hljs-meta">@Author</span> tho<br>* <span class="hljs-meta">@Date</span> $date$ $times$<br>$param$<br>* <span class="hljs-meta">@Return</span> $return_type$<br>* <span class="hljs-meta">@Description</span>: todo<br>*/<br></code></pre></td></tr></table></figure><p>java 中注释格式其中一种为 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>/x + tab 可以生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">/ + 下面文本的内容 <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">选择x只是个人习惯 不能选择已经存在的可以使用tab生成的内容,而x按起来比较方便,就选择 x<br>x 也可以改成任何不会冲突的命令<br>    必须使用/ + 某个指令 + 快捷键(Tab)生成<br>    不能将/ 写到下面文本中, <br>直接使用 某个指令 + 快捷键   生成的内容会有问题<br></code></pre></td></tr></table></figure><p>5.选择对应的函数来生成时间等信息</p><p><img src="/img/markdown/image-20211027100010970.png"></p><p><img src="/img/markdown/image-20211027100106443.png"></p><ul><li><p>date() 和 time() 函数idea自带 可以直接输入</p></li><li><p>param 和 return_type 选项要选择自定义脚本来显示,idea自带显示不是很好</p></li><li><p>param对应脚本(直接将以下代码贴进Expression 选项内)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">groovyScript(<span class="hljs-string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27;* @param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\n&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())<br></code></pre></td></tr></table></figure></li><li><p>return_type对应脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">groovyScript(<span class="hljs-string">&quot;def result=&#x27;&#x27;;  def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;&lt;&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;if(i!=0)&#123;result+=&#x27;&lt;&#x27;;&#125;;  def p1=params[i].split(&#x27;,&#x27;).toList();  for(i2 = 0; i2 &lt; p1.size(); i2++)  &#123; def p2=p1[i2].split(&#x27;\\\\.&#x27;).toList();  result+=p2[p2.size()-1]; if(i2!=p1.size()-1)&#123;result+=&#x27;,&#x27;&#125;  &#125; ; &#125;;  return result&quot;</span>, methodReturnType())<br></code></pre></td></tr></table></figure></li></ul><p>6.点击如下按钮将模板设置配置到全局</p><p><img src="/img/markdown/image-20211027100357703.png"></p><p><img src="/img/markdown/image-20211027100412702.png"></p><p>7.之后新建的类会自动生成注释</p><p>方法上的注释 需要使用 /x + tab</p>]]></content>
    
    
    
    <tags>
      
      <tag>Idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2021/10/26/Hexo&amp;Fluid/"/>
    <url>/2021/10/26/Hexo&amp;Fluid/</url>
    
    <content type="html"><![CDATA[<p>Hexo基本使用</p><span id="more"></span><p>Hexo多台电脑写博客：<a href="https://www.dazhuanlan.com/frank87/topics/1040043">https://www.dazhuanlan.com/frank87/topics/1040043</a></p><p>Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>Fluid主题：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><h5 id="2021-10-22"><a href="#2021-10-22" class="headerlink" title="2021.10.22"></a>2021.10.22</h5><p>上传项目到github,有几个测试数据文件太大,超过了100m,push到github报错,直接删除了那几个文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git status<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;删除大文件&#x27;</span><br></code></pre></td></tr></table></figure><p>之后执行 <code>git push -u origin master </code>还是报错,那几个文件还是存在了本地, <code>.git</code>文件夹也是很大,保存了删除掉的文件.</p><p>重复了几次上面步骤问题依旧</p><p>解决办法:删除 <code>.git</code> 文件夹,重新</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> init<br><span class="hljs-attribute">git</span> remote add origin git@github.com:th<span class="hljs-number">66778899</span>/Algorithms<span class="hljs-number">4</span>th.git<br></code></pre></td></tr></table></figure><p>之后再进行 <code>git add . git push -m &#39;&#39; git push -u origin master </code>没有问题,成功上传项目到github</p><p>ssh默认不支持rsa了 <a href="https://silenwang.github.io/2021/10/11/ssh%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81rsa%E4%BA%86/">https://silenwang.github.io/2021/10/11/ssh默认不支持rsa了/</a></p><p>配置多个git账号 : <a href="https://blog.csdn.net/q13554515812/article/details/83506172">https://blog.csdn.net/q13554515812/article/details/83506172</a></p><p>git基本使用 <a href="https://zhuanlan.zhihu.com/p/30044692">https://zhuanlan.zhihu.com/p/30044692</a></p><p>ssh -T <a href="mailto:git@github.com">git@github.com</a> -i ~/.ssh/id_rsa_github</p><p>dev分支测试</p><p>建立新分支,需要 <code>git push -u origin dev</code> 将本地dev分支 与 远程分支建立流联系,需要在远程仓库创建对应的分支</p><p>$ git push fatal: The current branch dev has no upstream branch. To push the current branch and set the remote as upstream, use</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin dev<br></code></pre></td></tr></table></figure><p>dev 和 master分支 <code>git checkout master | git checkout dev</code></p><p>会导致对应分支下的文件发生覆盖问题</p><p>master分支和 dev 分支 merge 问题</p><p> git分支的使用 <a href="https://zhuanlan.zhihu.com/p/137855358">https://zhuanlan.zhihu.com/p/137855358</a></p><p><a href="https://nyimac.gitee.io/about/">About - Nyima’s Blog (gitee.io)</a></p><p><a href="https://nyimac.gitee.io/about/">https://nyimac.gitee.io/about/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
